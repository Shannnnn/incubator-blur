/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.blur.thrift.generated;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import org.apache.blur.thirdparty.thrift_0_9_0.scheme.IScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.SchemeFactory;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.StandardScheme;

import org.apache.blur.thirdparty.thrift_0_9_0.scheme.TupleScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TTupleProtocol;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolException;
import org.apache.blur.thirdparty.thrift_0_9_0.EncodingUtils;
import org.apache.blur.thirdparty.thrift_0_9_0.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

public class Blur {

  /**
   * The Blur service API.  This API is the same for both controller servers as well as
   * shards servers.  Each of the methods are documented.
   */
  public interface Iface extends BlurPlatform.Iface {

    /**
     * Creates a table with the given TableDescriptor.
     * 
     * @param tableDescriptor the TableDescriptor.
     */
    public void createTable(TableDescriptor tableDescriptor) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Enables the given table, blocking until all shards are online.
     * 
     * @param table the table name.
     */
    public void enableTable(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Disables the given table, blocking until all shards are offline.
     * 
     * @param table the table name.
     */
    public void disableTable(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Removes the given table, with an optional to delete the underlying index storage as well.
     * 
     * @param table the table name.
     * 
     * @param deleteIndexFiles true to remove the index storage and false if to preserve.
     */
    public void removeTable(String table, boolean deleteIndexFiles) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Attempts to add a column definition to the given table.
     * @return true if successfully defined false if not.
     * 
     * @param table the name of the table.
     * 
     * @param columnDefinition the ColumnDefinition.
     */
    public boolean addColumnDefinition(String table, ColumnDefinition columnDefinition) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Returns a list of the table names across all shard clusters.
     * @return list of all tables in all shard clusters.
     */
    public List<String> tableList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Returns a list of the table names for the given cluster.
     * @return list of all the tables within the given shard cluster.
     * 
     * @param cluster the cluster name.
     */
    public List<String> tableListByCluster(String cluster) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Returns a table descriptor for the given table.
     * @return the TableDescriptor.
     * 
     * @param table the table name.
     */
    public TableDescriptor describe(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Gets the schema for a given table.
     * @return Schema.
     * 
     * @param table the table name.
     */
    public Schema schema(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Parses the given query and returns the string that represents the query.
     * @return string representation of the parsed query.
     * 
     * @param table the table name.
     * 
     * @param query the query to parse.
     */
    public String parseQuery(String table, Query query) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Gets the table stats for the given table.
     * @return TableStats.
     * 
     * @param table the table name.
     */
    public TableStats tableStats(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Will perform a forced optimize on the index in the given table.
     * 
     * @param table table the name of the table.
     * 
     * @param numberOfSegmentsPerShard the maximum of segments per shard index after the operation is completed.
     */
    public void optimize(String table, int numberOfSegmentsPerShard) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Creates a snapshot for the table with the given name
     * 
     * @param table
     * @param name
     */
    public void createSnapshot(String table, String name) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Removes a previous snapshot(identified by name) of the table
     * 
     * @param table
     * @param name
     */
    public void removeSnapshot(String table, String name) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Returns a map where the key is the shard, and the list is the snapshots within that shard
     * 
     * @param table
     */
    public Map<String,List<String>> listSnapshots(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Sets the User for the current session.
     * 
     * @param user the User object.
     */
    public void setUser(User user) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Executes a query against a the given table and returns the results.  If this method is
     * executed against a controller the results will contain the aggregated results from all
     * the shards.  If this method is executed against a shard server the results will only
     * contain aggregated results from the shards of the given table that are being served on
     * the shard server, if any.
     * @return the BlurResults.
     * 
     * @param table the table name.
     * 
     * @param blurQuery the query to execute.
     */
    public BlurResults query(String table, BlurQuery blurQuery) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Fetches a Row or a Record in the given table with the given Selector.
     * @return the FetchResult.
     * 
     * @param table the table name.
     * 
     * @param selector the Selector to use to fetch the Row or Record.
     */
    public FetchResult fetchRow(String table, Selector selector) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Fetches a batch of Rows or Records in the given table with the given Selector list.
     * @return the FetchResult.
     * 
     * @param table the table name.
     * 
     * @param selectors the Selector to use to fetch the Row or Record.
     */
    public List<FetchResult> fetchRowBatch(String table, List<Selector> selectors) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Mutates a Row given the RowMutation that is provided.
     * 
     * @param mutation the RowMutation.
     */
    public void mutate(RowMutation mutation) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Enqueue a RowMutation. Note that the effect of the RowMutation will occur at some point in the future, volume and load will play a role in how much time will pass before the mutation goes into effect.
     * 
     * @param mutation the RowMutation.
     */
    public void enqueueMutate(RowMutation mutation) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Mutates a group of Rows given the list of RowMutations that are provided.  Note: This is not an atomic operation.
     * 
     * @param mutations the batch of RowMutations.
     */
    public void mutateBatch(List<RowMutation> mutations) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Enqueue a batch of RowMutations. Note that the effect of the RowMutation will occur at some point in the future, volume and load will play a role in how much time will pass before the mutation goes into effect.
     * 
     * @param mutations the batch of RowMutations.
     */
    public void enqueueMutateBatch(List<RowMutation> mutations) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Cancels a query that is executing against the given table with the given uuid.  Note, the
     * cancel call maybe take some time for the query actually stops executing.
     * 
     * @param table the table name.
     * 
     * @param uuid the uuid of the query.
     */
    public void cancelQuery(String table, String uuid) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Returns a list of the query ids of queries that have recently been executed for the given table.
     * @return list of all the uuids of the queries uuids.
     * 
     * @param table the table name.
     */
    public List<String> queryStatusIdList(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Returns the query status for the given table and query uuid.
     * @return fetches the BlurQueryStatus for the given table and uuid.
     * 
     * @param table the table name.
     * 
     * @param uuid the uuid of the query.
     */
    public BlurQueryStatus queryStatusById(String table, String uuid) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Gets the terms list from the index for the given table, family, column using the
     * startWith value to page through the results.  This method only makes sense to use with
     * string and text field types.
     * @return the list of terms for the given column.
     * 
     * @param table the table name.
     * 
     * @param columnFamily the column family. If the frequency requested is a system field like "rowid", "recordid", "family", etc then columnFamily can be null.
     * 
     * @param columnName the column name.
     * 
     * @param startWith the term to start with assuming that you are paging through the term list.
     * 
     * @param size the number to fetch at once.
     */
    public List<String> terms(String table, String columnFamily, String columnName, String startWith, short size) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Gets the record frequency for the provided table, family, column and value.
     * @return the count for the entire table.
     * 
     * @param table the table name.
     * 
     * @param columnFamily the column family. If the frequency requested is a system field like "rowid", "recordid", "family", etc then columnFamily can be null.
     * 
     * @param columnName the column name.
     * 
     * @param value the value.
     */
    public long recordFrequency(String table, String columnFamily, String columnName, String value) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Returns a list of all the shard clusters.
     * @return list of all the shard clusters.
     */
    public List<String> shardClusterList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Returns a list of all the shard servers for the given cluster.
     * @return list of all the shard servers within the cluster.
     * 
     * @param cluster the cluster name.
     */
    public List<String> shardServerList(String cluster) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Returns a list of all the controller servers.
     * @return list of all the controllers.
     */
    public List<String> controllerServerList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Returns a map of the layout of the given table, where the key is the shard name
     * and the value is the shard server.<br><br>
     * This method will return the "correct" layout for the given shard, or the
     * "correct" layout of cluster if called on a controller.<br><br>
     * The meaning of correct:<br>Given the current state of the shard cluster with failures taken
     * into account, the correct layout is what the layout should be given the current state.  In
     * other words, what the shard server should be serving.  The act of calling the shard
     * server layout method with the NORMAL option will block until the layout shard server
     * matches the correct layout.  Meaning it will block until indexes that should be open are
     * open and ready for queries.  However indexes are lazily closed, so if a table is being
     * disabled then the call will return immediately with an empty map, but the indexes may
     * not be close yet.<br><br>
     * @return map of shards in a table to the shard servers.
     * 
     * @param table the table name.
     */
    public Map<String,String> shardServerLayout(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Returns a map of the layout of the given table, where the key is the shard name and the
     * value is the shard server.<br><br>
     * This method will return immediately with what shards are currently
     * open in the shard server.  So if a shard is being moved to another server and is being
     * closed by this server it WILL be returned in the map.  The shardServerLayout method would not return
     * the shard given the same situation.
     * @return map of shards to a map of shard servers with the state of the shard.
     * 
     * @param table the table name.
     */
    public Map<String,Map<String,ShardState>> shardServerLayoutState(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Checks to see if the given cluster is in safemode.
     * @return boolean.
     * 
     * @param cluster the name of the cluster.
     */
    public boolean isInSafeMode(String cluster) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Fetches the Blur configuration.
     * @return Map of property name to value.
     */
    public Map<String,String> configuration() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Fetches the Blur metrics by name.  If the metrics parameter is null all the Metrics are returned.
     * @return Map of metric name to Metric.
     * 
     * @param metrics the names of the metrics to return.  If null all are returned.
     */
    public Map<String,Metric> metrics(Set<String> metrics) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Starts a trace with the given trace id.
     * 
     * @param traceId the trace id.
     * 
     * @param requestId the request id, used to connected remote calls together.  Client can pass null.
     */
    public void startTrace(String traceId, String requestId) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Get a list of all the traces.
     * @return the list of trace ids.
     */
    public List<String> traceList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Gets a request list for the given trace.
     * @return the list of request ids for the given trace id.
     * 
     * @param traceId the trace id.
     */
    public List<String> traceRequestList(String traceId) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Fetches the given trace.
     * @return the json for the given trace request.
     * 
     * @param traceId the trace id.
     * 
     * @param requestId the request id.
     */
    public String traceRequestFetch(String traceId, String requestId) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Remove the trace for the given trace id.
     * 
     * @param traceId the trace id.
     */
    public void traceRemove(String traceId) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * A way to ping a server to make sure the connection is still valid.
     */
    public void ping() throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Changes the logging level for the given instance dynamically at runtime.
     * 
     * @param classNameOrLoggerName the className or Logger Name of the Logger to be changed.
     * 
     * @param level the logging level.
     */
    public void logging(String classNameOrLoggerName, Level level) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

    /**
     * Resets the logging for this instance to match the log4j file.  NOTE: This will allow for dynamically changing to logging file at runtime.
     */
    public void resetLogging() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException;

  }

  public interface AsyncIface extends BlurPlatform .AsyncIface {

    public void createTable(TableDescriptor tableDescriptor, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.createTable_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void enableTable(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.enableTable_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void disableTable(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.disableTable_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void removeTable(String table, boolean deleteIndexFiles, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.removeTable_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void addColumnDefinition(String table, ColumnDefinition columnDefinition, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.addColumnDefinition_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void tableList(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.tableList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void tableListByCluster(String cluster, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.tableListByCluster_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void describe(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.describe_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void schema(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.schema_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void parseQuery(String table, Query query, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.parseQuery_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void tableStats(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.tableStats_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void optimize(String table, int numberOfSegmentsPerShard, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.optimize_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void createSnapshot(String table, String name, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.createSnapshot_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void removeSnapshot(String table, String name, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.removeSnapshot_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void listSnapshots(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.listSnapshots_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void setUser(User user, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.setUser_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void query(String table, BlurQuery blurQuery, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.query_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void fetchRow(String table, Selector selector, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.fetchRow_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void fetchRowBatch(String table, List<Selector> selectors, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.fetchRowBatch_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void mutate(RowMutation mutation, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.mutate_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void enqueueMutate(RowMutation mutation, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.enqueueMutate_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void mutateBatch(List<RowMutation> mutations, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.mutateBatch_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void enqueueMutateBatch(List<RowMutation> mutations, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.enqueueMutateBatch_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void cancelQuery(String table, String uuid, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.cancelQuery_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void queryStatusIdList(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.queryStatusIdList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void queryStatusById(String table, String uuid, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.queryStatusById_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void terms(String table, String columnFamily, String columnName, String startWith, short size, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.terms_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void recordFrequency(String table, String columnFamily, String columnName, String value, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.recordFrequency_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void shardClusterList(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.shardClusterList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void shardServerList(String cluster, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.shardServerList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void controllerServerList(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.controllerServerList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void shardServerLayout(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.shardServerLayout_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void shardServerLayoutState(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.shardServerLayoutState_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void isInSafeMode(String cluster, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.isInSafeMode_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void configuration(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.configuration_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void metrics(Set<String> metrics, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.metrics_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void startTrace(String traceId, String requestId, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.startTrace_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void traceList(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.traceList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void traceRequestList(String traceId, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.traceRequestList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void traceRequestFetch(String traceId, String requestId, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.traceRequestFetch_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void traceRemove(String traceId, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.traceRemove_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void ping(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.ping_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void logging(String classNameOrLoggerName, Level level, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.logging_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

    public void resetLogging(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.resetLogging_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException;

  }

  public static class Client extends BlurPlatform.Client implements Iface {
    public static class Factory implements org.apache.blur.thirdparty.thrift_0_9_0.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void createTable(TableDescriptor tableDescriptor) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_createTable(tableDescriptor);
      recv_createTable();
    }

    public void send_createTable(TableDescriptor tableDescriptor) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      createTable_args args = new createTable_args();
      args.setTableDescriptor(tableDescriptor);
      sendBase("createTable", args);
    }

    public void recv_createTable() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      createTable_result result = new createTable_result();
      receiveBase(result, "createTable");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void enableTable(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_enableTable(table);
      recv_enableTable();
    }

    public void send_enableTable(String table) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      enableTable_args args = new enableTable_args();
      args.setTable(table);
      sendBase("enableTable", args);
    }

    public void recv_enableTable() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      enableTable_result result = new enableTable_result();
      receiveBase(result, "enableTable");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void disableTable(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_disableTable(table);
      recv_disableTable();
    }

    public void send_disableTable(String table) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      disableTable_args args = new disableTable_args();
      args.setTable(table);
      sendBase("disableTable", args);
    }

    public void recv_disableTable() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      disableTable_result result = new disableTable_result();
      receiveBase(result, "disableTable");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void removeTable(String table, boolean deleteIndexFiles) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_removeTable(table, deleteIndexFiles);
      recv_removeTable();
    }

    public void send_removeTable(String table, boolean deleteIndexFiles) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      removeTable_args args = new removeTable_args();
      args.setTable(table);
      args.setDeleteIndexFiles(deleteIndexFiles);
      sendBase("removeTable", args);
    }

    public void recv_removeTable() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      removeTable_result result = new removeTable_result();
      receiveBase(result, "removeTable");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public boolean addColumnDefinition(String table, ColumnDefinition columnDefinition) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_addColumnDefinition(table, columnDefinition);
      return recv_addColumnDefinition();
    }

    public void send_addColumnDefinition(String table, ColumnDefinition columnDefinition) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      addColumnDefinition_args args = new addColumnDefinition_args();
      args.setTable(table);
      args.setColumnDefinition(columnDefinition);
      sendBase("addColumnDefinition", args);
    }

    public boolean recv_addColumnDefinition() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      addColumnDefinition_result result = new addColumnDefinition_result();
      receiveBase(result, "addColumnDefinition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "addColumnDefinition failed: unknown result");
    }

    public List<String> tableList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_tableList();
      return recv_tableList();
    }

    public void send_tableList() throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      tableList_args args = new tableList_args();
      sendBase("tableList", args);
    }

    public List<String> recv_tableList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      tableList_result result = new tableList_result();
      receiveBase(result, "tableList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "tableList failed: unknown result");
    }

    public List<String> tableListByCluster(String cluster) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_tableListByCluster(cluster);
      return recv_tableListByCluster();
    }

    public void send_tableListByCluster(String cluster) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      tableListByCluster_args args = new tableListByCluster_args();
      args.setCluster(cluster);
      sendBase("tableListByCluster", args);
    }

    public List<String> recv_tableListByCluster() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      tableListByCluster_result result = new tableListByCluster_result();
      receiveBase(result, "tableListByCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "tableListByCluster failed: unknown result");
    }

    public TableDescriptor describe(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_describe(table);
      return recv_describe();
    }

    public void send_describe(String table) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      describe_args args = new describe_args();
      args.setTable(table);
      sendBase("describe", args);
    }

    public TableDescriptor recv_describe() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      describe_result result = new describe_result();
      receiveBase(result, "describe");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "describe failed: unknown result");
    }

    public Schema schema(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_schema(table);
      return recv_schema();
    }

    public void send_schema(String table) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      schema_args args = new schema_args();
      args.setTable(table);
      sendBase("schema", args);
    }

    public Schema recv_schema() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      schema_result result = new schema_result();
      receiveBase(result, "schema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "schema failed: unknown result");
    }

    public String parseQuery(String table, Query query) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_parseQuery(table, query);
      return recv_parseQuery();
    }

    public void send_parseQuery(String table, Query query) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      parseQuery_args args = new parseQuery_args();
      args.setTable(table);
      args.setQuery(query);
      sendBase("parseQuery", args);
    }

    public String recv_parseQuery() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      parseQuery_result result = new parseQuery_result();
      receiveBase(result, "parseQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "parseQuery failed: unknown result");
    }

    public TableStats tableStats(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_tableStats(table);
      return recv_tableStats();
    }

    public void send_tableStats(String table) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      tableStats_args args = new tableStats_args();
      args.setTable(table);
      sendBase("tableStats", args);
    }

    public TableStats recv_tableStats() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      tableStats_result result = new tableStats_result();
      receiveBase(result, "tableStats");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "tableStats failed: unknown result");
    }

    public void optimize(String table, int numberOfSegmentsPerShard) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_optimize(table, numberOfSegmentsPerShard);
      recv_optimize();
    }

    public void send_optimize(String table, int numberOfSegmentsPerShard) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      optimize_args args = new optimize_args();
      args.setTable(table);
      args.setNumberOfSegmentsPerShard(numberOfSegmentsPerShard);
      sendBase("optimize", args);
    }

    public void recv_optimize() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      optimize_result result = new optimize_result();
      receiveBase(result, "optimize");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void createSnapshot(String table, String name) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_createSnapshot(table, name);
      recv_createSnapshot();
    }

    public void send_createSnapshot(String table, String name) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      createSnapshot_args args = new createSnapshot_args();
      args.setTable(table);
      args.setName(name);
      sendBase("createSnapshot", args);
    }

    public void recv_createSnapshot() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      createSnapshot_result result = new createSnapshot_result();
      receiveBase(result, "createSnapshot");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void removeSnapshot(String table, String name) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_removeSnapshot(table, name);
      recv_removeSnapshot();
    }

    public void send_removeSnapshot(String table, String name) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      removeSnapshot_args args = new removeSnapshot_args();
      args.setTable(table);
      args.setName(name);
      sendBase("removeSnapshot", args);
    }

    public void recv_removeSnapshot() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      removeSnapshot_result result = new removeSnapshot_result();
      receiveBase(result, "removeSnapshot");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public Map<String,List<String>> listSnapshots(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_listSnapshots(table);
      return recv_listSnapshots();
    }

    public void send_listSnapshots(String table) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      listSnapshots_args args = new listSnapshots_args();
      args.setTable(table);
      sendBase("listSnapshots", args);
    }

    public Map<String,List<String>> recv_listSnapshots() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      listSnapshots_result result = new listSnapshots_result();
      receiveBase(result, "listSnapshots");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "listSnapshots failed: unknown result");
    }

    public void setUser(User user) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_setUser(user);
    }

    public void send_setUser(User user) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      setUser_args args = new setUser_args();
      args.setUser(user);
      sendBase("setUser", args);
    }

    public BlurResults query(String table, BlurQuery blurQuery) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_query(table, blurQuery);
      return recv_query();
    }

    public void send_query(String table, BlurQuery blurQuery) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      query_args args = new query_args();
      args.setTable(table);
      args.setBlurQuery(blurQuery);
      sendBase("query", args);
    }

    public BlurResults recv_query() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      query_result result = new query_result();
      receiveBase(result, "query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "query failed: unknown result");
    }

    public FetchResult fetchRow(String table, Selector selector) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_fetchRow(table, selector);
      return recv_fetchRow();
    }

    public void send_fetchRow(String table, Selector selector) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      fetchRow_args args = new fetchRow_args();
      args.setTable(table);
      args.setSelector(selector);
      sendBase("fetchRow", args);
    }

    public FetchResult recv_fetchRow() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      fetchRow_result result = new fetchRow_result();
      receiveBase(result, "fetchRow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "fetchRow failed: unknown result");
    }

    public List<FetchResult> fetchRowBatch(String table, List<Selector> selectors) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_fetchRowBatch(table, selectors);
      return recv_fetchRowBatch();
    }

    public void send_fetchRowBatch(String table, List<Selector> selectors) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      fetchRowBatch_args args = new fetchRowBatch_args();
      args.setTable(table);
      args.setSelectors(selectors);
      sendBase("fetchRowBatch", args);
    }

    public List<FetchResult> recv_fetchRowBatch() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      fetchRowBatch_result result = new fetchRowBatch_result();
      receiveBase(result, "fetchRowBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "fetchRowBatch failed: unknown result");
    }

    public void mutate(RowMutation mutation) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_mutate(mutation);
      recv_mutate();
    }

    public void send_mutate(RowMutation mutation) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      mutate_args args = new mutate_args();
      args.setMutation(mutation);
      sendBase("mutate", args);
    }

    public void recv_mutate() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      mutate_result result = new mutate_result();
      receiveBase(result, "mutate");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void enqueueMutate(RowMutation mutation) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_enqueueMutate(mutation);
      recv_enqueueMutate();
    }

    public void send_enqueueMutate(RowMutation mutation) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      enqueueMutate_args args = new enqueueMutate_args();
      args.setMutation(mutation);
      sendBase("enqueueMutate", args);
    }

    public void recv_enqueueMutate() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      enqueueMutate_result result = new enqueueMutate_result();
      receiveBase(result, "enqueueMutate");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void mutateBatch(List<RowMutation> mutations) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_mutateBatch(mutations);
      recv_mutateBatch();
    }

    public void send_mutateBatch(List<RowMutation> mutations) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      mutateBatch_args args = new mutateBatch_args();
      args.setMutations(mutations);
      sendBase("mutateBatch", args);
    }

    public void recv_mutateBatch() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      mutateBatch_result result = new mutateBatch_result();
      receiveBase(result, "mutateBatch");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void enqueueMutateBatch(List<RowMutation> mutations) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_enqueueMutateBatch(mutations);
      recv_enqueueMutateBatch();
    }

    public void send_enqueueMutateBatch(List<RowMutation> mutations) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      enqueueMutateBatch_args args = new enqueueMutateBatch_args();
      args.setMutations(mutations);
      sendBase("enqueueMutateBatch", args);
    }

    public void recv_enqueueMutateBatch() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      enqueueMutateBatch_result result = new enqueueMutateBatch_result();
      receiveBase(result, "enqueueMutateBatch");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void cancelQuery(String table, String uuid) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_cancelQuery(table, uuid);
      recv_cancelQuery();
    }

    public void send_cancelQuery(String table, String uuid) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      cancelQuery_args args = new cancelQuery_args();
      args.setTable(table);
      args.setUuid(uuid);
      sendBase("cancelQuery", args);
    }

    public void recv_cancelQuery() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      cancelQuery_result result = new cancelQuery_result();
      receiveBase(result, "cancelQuery");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public List<String> queryStatusIdList(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_queryStatusIdList(table);
      return recv_queryStatusIdList();
    }

    public void send_queryStatusIdList(String table) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      queryStatusIdList_args args = new queryStatusIdList_args();
      args.setTable(table);
      sendBase("queryStatusIdList", args);
    }

    public List<String> recv_queryStatusIdList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      queryStatusIdList_result result = new queryStatusIdList_result();
      receiveBase(result, "queryStatusIdList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "queryStatusIdList failed: unknown result");
    }

    public BlurQueryStatus queryStatusById(String table, String uuid) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_queryStatusById(table, uuid);
      return recv_queryStatusById();
    }

    public void send_queryStatusById(String table, String uuid) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      queryStatusById_args args = new queryStatusById_args();
      args.setTable(table);
      args.setUuid(uuid);
      sendBase("queryStatusById", args);
    }

    public BlurQueryStatus recv_queryStatusById() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      queryStatusById_result result = new queryStatusById_result();
      receiveBase(result, "queryStatusById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "queryStatusById failed: unknown result");
    }

    public List<String> terms(String table, String columnFamily, String columnName, String startWith, short size) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_terms(table, columnFamily, columnName, startWith, size);
      return recv_terms();
    }

    public void send_terms(String table, String columnFamily, String columnName, String startWith, short size) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      terms_args args = new terms_args();
      args.setTable(table);
      args.setColumnFamily(columnFamily);
      args.setColumnName(columnName);
      args.setStartWith(startWith);
      args.setSize(size);
      sendBase("terms", args);
    }

    public List<String> recv_terms() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      terms_result result = new terms_result();
      receiveBase(result, "terms");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "terms failed: unknown result");
    }

    public long recordFrequency(String table, String columnFamily, String columnName, String value) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_recordFrequency(table, columnFamily, columnName, value);
      return recv_recordFrequency();
    }

    public void send_recordFrequency(String table, String columnFamily, String columnName, String value) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      recordFrequency_args args = new recordFrequency_args();
      args.setTable(table);
      args.setColumnFamily(columnFamily);
      args.setColumnName(columnName);
      args.setValue(value);
      sendBase("recordFrequency", args);
    }

    public long recv_recordFrequency() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      recordFrequency_result result = new recordFrequency_result();
      receiveBase(result, "recordFrequency");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "recordFrequency failed: unknown result");
    }

    public List<String> shardClusterList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_shardClusterList();
      return recv_shardClusterList();
    }

    public void send_shardClusterList() throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      shardClusterList_args args = new shardClusterList_args();
      sendBase("shardClusterList", args);
    }

    public List<String> recv_shardClusterList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      shardClusterList_result result = new shardClusterList_result();
      receiveBase(result, "shardClusterList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "shardClusterList failed: unknown result");
    }

    public List<String> shardServerList(String cluster) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_shardServerList(cluster);
      return recv_shardServerList();
    }

    public void send_shardServerList(String cluster) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      shardServerList_args args = new shardServerList_args();
      args.setCluster(cluster);
      sendBase("shardServerList", args);
    }

    public List<String> recv_shardServerList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      shardServerList_result result = new shardServerList_result();
      receiveBase(result, "shardServerList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "shardServerList failed: unknown result");
    }

    public List<String> controllerServerList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_controllerServerList();
      return recv_controllerServerList();
    }

    public void send_controllerServerList() throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      controllerServerList_args args = new controllerServerList_args();
      sendBase("controllerServerList", args);
    }

    public List<String> recv_controllerServerList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      controllerServerList_result result = new controllerServerList_result();
      receiveBase(result, "controllerServerList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "controllerServerList failed: unknown result");
    }

    public Map<String,String> shardServerLayout(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_shardServerLayout(table);
      return recv_shardServerLayout();
    }

    public void send_shardServerLayout(String table) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      shardServerLayout_args args = new shardServerLayout_args();
      args.setTable(table);
      sendBase("shardServerLayout", args);
    }

    public Map<String,String> recv_shardServerLayout() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      shardServerLayout_result result = new shardServerLayout_result();
      receiveBase(result, "shardServerLayout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "shardServerLayout failed: unknown result");
    }

    public Map<String,Map<String,ShardState>> shardServerLayoutState(String table) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_shardServerLayoutState(table);
      return recv_shardServerLayoutState();
    }

    public void send_shardServerLayoutState(String table) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      shardServerLayoutState_args args = new shardServerLayoutState_args();
      args.setTable(table);
      sendBase("shardServerLayoutState", args);
    }

    public Map<String,Map<String,ShardState>> recv_shardServerLayoutState() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      shardServerLayoutState_result result = new shardServerLayoutState_result();
      receiveBase(result, "shardServerLayoutState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "shardServerLayoutState failed: unknown result");
    }

    public boolean isInSafeMode(String cluster) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_isInSafeMode(cluster);
      return recv_isInSafeMode();
    }

    public void send_isInSafeMode(String cluster) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      isInSafeMode_args args = new isInSafeMode_args();
      args.setCluster(cluster);
      sendBase("isInSafeMode", args);
    }

    public boolean recv_isInSafeMode() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      isInSafeMode_result result = new isInSafeMode_result();
      receiveBase(result, "isInSafeMode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "isInSafeMode failed: unknown result");
    }

    public Map<String,String> configuration() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_configuration();
      return recv_configuration();
    }

    public void send_configuration() throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      configuration_args args = new configuration_args();
      sendBase("configuration", args);
    }

    public Map<String,String> recv_configuration() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      configuration_result result = new configuration_result();
      receiveBase(result, "configuration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "configuration failed: unknown result");
    }

    public Map<String,Metric> metrics(Set<String> metrics) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_metrics(metrics);
      return recv_metrics();
    }

    public void send_metrics(Set<String> metrics) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      metrics_args args = new metrics_args();
      args.setMetrics(metrics);
      sendBase("metrics", args);
    }

    public Map<String,Metric> recv_metrics() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      metrics_result result = new metrics_result();
      receiveBase(result, "metrics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "metrics failed: unknown result");
    }

    public void startTrace(String traceId, String requestId) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_startTrace(traceId, requestId);
    }

    public void send_startTrace(String traceId, String requestId) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      startTrace_args args = new startTrace_args();
      args.setTraceId(traceId);
      args.setRequestId(requestId);
      sendBase("startTrace", args);
    }

    public List<String> traceList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_traceList();
      return recv_traceList();
    }

    public void send_traceList() throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      traceList_args args = new traceList_args();
      sendBase("traceList", args);
    }

    public List<String> recv_traceList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      traceList_result result = new traceList_result();
      receiveBase(result, "traceList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "traceList failed: unknown result");
    }

    public List<String> traceRequestList(String traceId) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_traceRequestList(traceId);
      return recv_traceRequestList();
    }

    public void send_traceRequestList(String traceId) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      traceRequestList_args args = new traceRequestList_args();
      args.setTraceId(traceId);
      sendBase("traceRequestList", args);
    }

    public List<String> recv_traceRequestList() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      traceRequestList_result result = new traceRequestList_result();
      receiveBase(result, "traceRequestList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "traceRequestList failed: unknown result");
    }

    public String traceRequestFetch(String traceId, String requestId) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_traceRequestFetch(traceId, requestId);
      return recv_traceRequestFetch();
    }

    public void send_traceRequestFetch(String traceId, String requestId) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      traceRequestFetch_args args = new traceRequestFetch_args();
      args.setTraceId(traceId);
      args.setRequestId(requestId);
      sendBase("traceRequestFetch", args);
    }

    public String recv_traceRequestFetch() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      traceRequestFetch_result result = new traceRequestFetch_result();
      receiveBase(result, "traceRequestFetch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException(org.apache.blur.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "traceRequestFetch failed: unknown result");
    }

    public void traceRemove(String traceId) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_traceRemove(traceId);
      recv_traceRemove();
    }

    public void send_traceRemove(String traceId) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      traceRemove_args args = new traceRemove_args();
      args.setTraceId(traceId);
      sendBase("traceRemove", args);
    }

    public void recv_traceRemove() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      traceRemove_result result = new traceRemove_result();
      receiveBase(result, "traceRemove");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void ping() throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

    public void logging(String classNameOrLoggerName, Level level) throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_logging(classNameOrLoggerName, level);
      recv_logging();
    }

    public void send_logging(String classNameOrLoggerName, Level level) throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      logging_args args = new logging_args();
      args.setClassNameOrLoggerName(classNameOrLoggerName);
      args.setLevel(level);
      sendBase("logging", args);
    }

    public void recv_logging() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      logging_result result = new logging_result();
      receiveBase(result, "logging");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void resetLogging() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      send_resetLogging();
      recv_resetLogging();
    }

    public void send_resetLogging() throws org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      resetLogging_args args = new resetLogging_args();
      sendBase("resetLogging", args);
    }

    public void recv_resetLogging() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException
    {
      resetLogging_result result = new resetLogging_result();
      receiveBase(result, "resetLogging");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

  }
  public static class AsyncClient extends BlurPlatform.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClientManager clientManager;
      private org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClientManager clientManager, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClientManager clientManager, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createTable(TableDescriptor tableDescriptor, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<createTable_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      createTable_call method_call = new createTable_call(tableDescriptor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createTable_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private TableDescriptor tableDescriptor;
      public createTable_call(TableDescriptor tableDescriptor, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<createTable_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tableDescriptor = tableDescriptor;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("createTable", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        createTable_args args = new createTable_args();
        args.setTableDescriptor(tableDescriptor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createTable();
      }
    }

    public void enableTable(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<enableTable_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      enableTable_call method_call = new enableTable_call(table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enableTable_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      public enableTable_call(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<enableTable_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("enableTable", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        enableTable_args args = new enableTable_args();
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_enableTable();
      }
    }

    public void disableTable(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<disableTable_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      disableTable_call method_call = new disableTable_call(table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disableTable_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      public disableTable_call(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<disableTable_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("disableTable", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        disableTable_args args = new disableTable_args();
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_disableTable();
      }
    }

    public void removeTable(String table, boolean deleteIndexFiles, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<removeTable_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      removeTable_call method_call = new removeTable_call(table, deleteIndexFiles, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeTable_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      private boolean deleteIndexFiles;
      public removeTable_call(String table, boolean deleteIndexFiles, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<removeTable_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.deleteIndexFiles = deleteIndexFiles;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("removeTable", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        removeTable_args args = new removeTable_args();
        args.setTable(table);
        args.setDeleteIndexFiles(deleteIndexFiles);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeTable();
      }
    }

    public void addColumnDefinition(String table, ColumnDefinition columnDefinition, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<addColumnDefinition_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      addColumnDefinition_call method_call = new addColumnDefinition_call(table, columnDefinition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addColumnDefinition_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      private ColumnDefinition columnDefinition;
      public addColumnDefinition_call(String table, ColumnDefinition columnDefinition, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<addColumnDefinition_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.columnDefinition = columnDefinition;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("addColumnDefinition", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        addColumnDefinition_args args = new addColumnDefinition_args();
        args.setTable(table);
        args.setColumnDefinition(columnDefinition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addColumnDefinition();
      }
    }

    public void tableList(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<tableList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      tableList_call method_call = new tableList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableList_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      public tableList_call(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<tableList_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("tableList", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        tableList_args args = new tableList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tableList();
      }
    }

    public void tableListByCluster(String cluster, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<tableListByCluster_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      tableListByCluster_call method_call = new tableListByCluster_call(cluster, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableListByCluster_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String cluster;
      public tableListByCluster_call(String cluster, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<tableListByCluster_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cluster = cluster;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("tableListByCluster", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        tableListByCluster_args args = new tableListByCluster_args();
        args.setCluster(cluster);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tableListByCluster();
      }
    }

    public void describe(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<describe_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      describe_call method_call = new describe_call(table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class describe_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      public describe_call(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<describe_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("describe", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        describe_args args = new describe_args();
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TableDescriptor getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_describe();
      }
    }

    public void schema(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<schema_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      schema_call method_call = new schema_call(table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class schema_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      public schema_call(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<schema_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("schema", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        schema_args args = new schema_args();
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Schema getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_schema();
      }
    }

    public void parseQuery(String table, Query query, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<parseQuery_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      parseQuery_call method_call = new parseQuery_call(table, query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parseQuery_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      private Query query;
      public parseQuery_call(String table, Query query, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<parseQuery_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.query = query;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("parseQuery", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        parseQuery_args args = new parseQuery_args();
        args.setTable(table);
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parseQuery();
      }
    }

    public void tableStats(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<tableStats_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      tableStats_call method_call = new tableStats_call(table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableStats_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      public tableStats_call(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<tableStats_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("tableStats", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        tableStats_args args = new tableStats_args();
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TableStats getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tableStats();
      }
    }

    public void optimize(String table, int numberOfSegmentsPerShard, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<optimize_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      optimize_call method_call = new optimize_call(table, numberOfSegmentsPerShard, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class optimize_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      private int numberOfSegmentsPerShard;
      public optimize_call(String table, int numberOfSegmentsPerShard, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<optimize_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.numberOfSegmentsPerShard = numberOfSegmentsPerShard;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("optimize", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        optimize_args args = new optimize_args();
        args.setTable(table);
        args.setNumberOfSegmentsPerShard(numberOfSegmentsPerShard);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_optimize();
      }
    }

    public void createSnapshot(String table, String name, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<createSnapshot_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      createSnapshot_call method_call = new createSnapshot_call(table, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createSnapshot_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      private String name;
      public createSnapshot_call(String table, String name, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<createSnapshot_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.name = name;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("createSnapshot", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        createSnapshot_args args = new createSnapshot_args();
        args.setTable(table);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createSnapshot();
      }
    }

    public void removeSnapshot(String table, String name, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<removeSnapshot_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      removeSnapshot_call method_call = new removeSnapshot_call(table, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeSnapshot_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      private String name;
      public removeSnapshot_call(String table, String name, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<removeSnapshot_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.name = name;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("removeSnapshot", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        removeSnapshot_args args = new removeSnapshot_args();
        args.setTable(table);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeSnapshot();
      }
    }

    public void listSnapshots(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<listSnapshots_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      listSnapshots_call method_call = new listSnapshots_call(table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listSnapshots_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      public listSnapshots_call(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<listSnapshots_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("listSnapshots", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        listSnapshots_args args = new listSnapshots_args();
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<String>> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listSnapshots();
      }
    }

    public void setUser(User user, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<setUser_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      setUser_call method_call = new setUser_call(user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setUser_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private User user;
      public setUser_call(User user, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<setUser_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.user = user;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("setUser", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        setUser_args args = new setUser_args();
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void query(String table, BlurQuery blurQuery, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<query_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      query_call method_call = new query_call(table, blurQuery, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      private BlurQuery blurQuery;
      public query_call(String table, BlurQuery blurQuery, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<query_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.blurQuery = blurQuery;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("query", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        query_args args = new query_args();
        args.setTable(table);
        args.setBlurQuery(blurQuery);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BlurResults getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query();
      }
    }

    public void fetchRow(String table, Selector selector, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<fetchRow_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      fetchRow_call method_call = new fetchRow_call(table, selector, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchRow_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      private Selector selector;
      public fetchRow_call(String table, Selector selector, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<fetchRow_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.selector = selector;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("fetchRow", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        fetchRow_args args = new fetchRow_args();
        args.setTable(table);
        args.setSelector(selector);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FetchResult getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchRow();
      }
    }

    public void fetchRowBatch(String table, List<Selector> selectors, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<fetchRowBatch_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      fetchRowBatch_call method_call = new fetchRowBatch_call(table, selectors, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchRowBatch_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      private List<Selector> selectors;
      public fetchRowBatch_call(String table, List<Selector> selectors, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<fetchRowBatch_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.selectors = selectors;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("fetchRowBatch", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        fetchRowBatch_args args = new fetchRowBatch_args();
        args.setTable(table);
        args.setSelectors(selectors);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FetchResult> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchRowBatch();
      }
    }

    public void mutate(RowMutation mutation, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<mutate_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      mutate_call method_call = new mutate_call(mutation, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mutate_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private RowMutation mutation;
      public mutate_call(RowMutation mutation, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<mutate_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutation = mutation;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("mutate", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        mutate_args args = new mutate_args();
        args.setMutation(mutation);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_mutate();
      }
    }

    public void enqueueMutate(RowMutation mutation, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<enqueueMutate_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      enqueueMutate_call method_call = new enqueueMutate_call(mutation, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enqueueMutate_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private RowMutation mutation;
      public enqueueMutate_call(RowMutation mutation, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<enqueueMutate_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutation = mutation;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("enqueueMutate", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        enqueueMutate_args args = new enqueueMutate_args();
        args.setMutation(mutation);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_enqueueMutate();
      }
    }

    public void mutateBatch(List<RowMutation> mutations, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<mutateBatch_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      mutateBatch_call method_call = new mutateBatch_call(mutations, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mutateBatch_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private List<RowMutation> mutations;
      public mutateBatch_call(List<RowMutation> mutations, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<mutateBatch_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutations = mutations;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("mutateBatch", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        mutateBatch_args args = new mutateBatch_args();
        args.setMutations(mutations);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_mutateBatch();
      }
    }

    public void enqueueMutateBatch(List<RowMutation> mutations, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<enqueueMutateBatch_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      enqueueMutateBatch_call method_call = new enqueueMutateBatch_call(mutations, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enqueueMutateBatch_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private List<RowMutation> mutations;
      public enqueueMutateBatch_call(List<RowMutation> mutations, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<enqueueMutateBatch_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutations = mutations;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("enqueueMutateBatch", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        enqueueMutateBatch_args args = new enqueueMutateBatch_args();
        args.setMutations(mutations);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_enqueueMutateBatch();
      }
    }

    public void cancelQuery(String table, String uuid, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<cancelQuery_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      cancelQuery_call method_call = new cancelQuery_call(table, uuid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelQuery_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      private String uuid;
      public cancelQuery_call(String table, String uuid, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<cancelQuery_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.uuid = uuid;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("cancelQuery", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        cancelQuery_args args = new cancelQuery_args();
        args.setTable(table);
        args.setUuid(uuid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_cancelQuery();
      }
    }

    public void queryStatusIdList(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<queryStatusIdList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      queryStatusIdList_call method_call = new queryStatusIdList_call(table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStatusIdList_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      public queryStatusIdList_call(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<queryStatusIdList_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("queryStatusIdList", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        queryStatusIdList_args args = new queryStatusIdList_args();
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryStatusIdList();
      }
    }

    public void queryStatusById(String table, String uuid, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<queryStatusById_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      queryStatusById_call method_call = new queryStatusById_call(table, uuid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStatusById_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      private String uuid;
      public queryStatusById_call(String table, String uuid, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<queryStatusById_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.uuid = uuid;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("queryStatusById", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        queryStatusById_args args = new queryStatusById_args();
        args.setTable(table);
        args.setUuid(uuid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BlurQueryStatus getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryStatusById();
      }
    }

    public void terms(String table, String columnFamily, String columnName, String startWith, short size, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<terms_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      terms_call method_call = new terms_call(table, columnFamily, columnName, startWith, size, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class terms_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      private String columnFamily;
      private String columnName;
      private String startWith;
      private short size;
      public terms_call(String table, String columnFamily, String columnName, String startWith, short size, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<terms_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.columnFamily = columnFamily;
        this.columnName = columnName;
        this.startWith = startWith;
        this.size = size;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("terms", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        terms_args args = new terms_args();
        args.setTable(table);
        args.setColumnFamily(columnFamily);
        args.setColumnName(columnName);
        args.setStartWith(startWith);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_terms();
      }
    }

    public void recordFrequency(String table, String columnFamily, String columnName, String value, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<recordFrequency_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      recordFrequency_call method_call = new recordFrequency_call(table, columnFamily, columnName, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recordFrequency_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      private String columnFamily;
      private String columnName;
      private String value;
      public recordFrequency_call(String table, String columnFamily, String columnName, String value, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<recordFrequency_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.columnFamily = columnFamily;
        this.columnName = columnName;
        this.value = value;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("recordFrequency", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        recordFrequency_args args = new recordFrequency_args();
        args.setTable(table);
        args.setColumnFamily(columnFamily);
        args.setColumnName(columnName);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recordFrequency();
      }
    }

    public void shardClusterList(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<shardClusterList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      shardClusterList_call method_call = new shardClusterList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shardClusterList_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      public shardClusterList_call(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<shardClusterList_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("shardClusterList", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        shardClusterList_args args = new shardClusterList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shardClusterList();
      }
    }

    public void shardServerList(String cluster, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<shardServerList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      shardServerList_call method_call = new shardServerList_call(cluster, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shardServerList_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String cluster;
      public shardServerList_call(String cluster, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<shardServerList_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cluster = cluster;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("shardServerList", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        shardServerList_args args = new shardServerList_args();
        args.setCluster(cluster);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shardServerList();
      }
    }

    public void controllerServerList(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<controllerServerList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      controllerServerList_call method_call = new controllerServerList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class controllerServerList_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      public controllerServerList_call(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<controllerServerList_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("controllerServerList", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        controllerServerList_args args = new controllerServerList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_controllerServerList();
      }
    }

    public void shardServerLayout(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<shardServerLayout_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      shardServerLayout_call method_call = new shardServerLayout_call(table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shardServerLayout_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      public shardServerLayout_call(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<shardServerLayout_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("shardServerLayout", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        shardServerLayout_args args = new shardServerLayout_args();
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shardServerLayout();
      }
    }

    public void shardServerLayoutState(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<shardServerLayoutState_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      shardServerLayoutState_call method_call = new shardServerLayoutState_call(table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shardServerLayoutState_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String table;
      public shardServerLayoutState_call(String table, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<shardServerLayoutState_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("shardServerLayoutState", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        shardServerLayoutState_args args = new shardServerLayoutState_args();
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Map<String,ShardState>> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shardServerLayoutState();
      }
    }

    public void isInSafeMode(String cluster, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<isInSafeMode_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      isInSafeMode_call method_call = new isInSafeMode_call(cluster, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isInSafeMode_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String cluster;
      public isInSafeMode_call(String cluster, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<isInSafeMode_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cluster = cluster;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("isInSafeMode", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        isInSafeMode_args args = new isInSafeMode_args();
        args.setCluster(cluster);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isInSafeMode();
      }
    }

    public void configuration(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<configuration_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      configuration_call method_call = new configuration_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class configuration_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      public configuration_call(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<configuration_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("configuration", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        configuration_args args = new configuration_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_configuration();
      }
    }

    public void metrics(Set<String> metrics, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<metrics_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      metrics_call method_call = new metrics_call(metrics, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class metrics_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private Set<String> metrics;
      public metrics_call(Set<String> metrics, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<metrics_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metrics = metrics;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("metrics", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        metrics_args args = new metrics_args();
        args.setMetrics(metrics);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Metric> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_metrics();
      }
    }

    public void startTrace(String traceId, String requestId, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<startTrace_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      startTrace_call method_call = new startTrace_call(traceId, requestId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startTrace_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String traceId;
      private String requestId;
      public startTrace_call(String traceId, String requestId, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<startTrace_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.traceId = traceId;
        this.requestId = requestId;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("startTrace", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        startTrace_args args = new startTrace_args();
        args.setTraceId(traceId);
        args.setRequestId(requestId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void traceList(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<traceList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      traceList_call method_call = new traceList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class traceList_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      public traceList_call(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<traceList_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("traceList", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        traceList_args args = new traceList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_traceList();
      }
    }

    public void traceRequestList(String traceId, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<traceRequestList_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      traceRequestList_call method_call = new traceRequestList_call(traceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class traceRequestList_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String traceId;
      public traceRequestList_call(String traceId, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<traceRequestList_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.traceId = traceId;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("traceRequestList", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        traceRequestList_args args = new traceRequestList_args();
        args.setTraceId(traceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_traceRequestList();
      }
    }

    public void traceRequestFetch(String traceId, String requestId, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<traceRequestFetch_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      traceRequestFetch_call method_call = new traceRequestFetch_call(traceId, requestId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class traceRequestFetch_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String traceId;
      private String requestId;
      public traceRequestFetch_call(String traceId, String requestId, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<traceRequestFetch_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.traceId = traceId;
        this.requestId = requestId;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("traceRequestFetch", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        traceRequestFetch_args args = new traceRequestFetch_args();
        args.setTraceId(traceId);
        args.setRequestId(requestId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_traceRequestFetch();
      }
    }

    public void traceRemove(String traceId, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<traceRemove_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      traceRemove_call method_call = new traceRemove_call(traceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class traceRemove_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String traceId;
      public traceRemove_call(String traceId, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<traceRemove_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.traceId = traceId;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("traceRemove", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        traceRemove_args args = new traceRemove_args();
        args.setTraceId(traceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_traceRemove();
      }
    }

    public void ping(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<ping_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      public ping_call(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<ping_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("ping", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ping();
      }
    }

    public void logging(String classNameOrLoggerName, Level level, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<logging_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      logging_call method_call = new logging_call(classNameOrLoggerName, level, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logging_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String classNameOrLoggerName;
      private Level level;
      public logging_call(String classNameOrLoggerName, Level level, org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<logging_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.classNameOrLoggerName = classNameOrLoggerName;
        this.level = level;
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("logging", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        logging_args args = new logging_args();
        args.setClassNameOrLoggerName(classNameOrLoggerName);
        args.setLevel(level);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_logging();
      }
    }

    public void resetLogging(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<resetLogging_call> resultHandler) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      checkReady();
      resetLogging_call method_call = new resetLogging_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resetLogging_call extends org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      public resetLogging_call(org.apache.blur.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<resetLogging_call> resultHandler, org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.blur.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessage("resetLogging", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        resetLogging_args args = new resetLogging_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlurException, org.apache.blur.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.blur.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.blur.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_resetLogging();
      }
    }

  }

  public static class Processor<I extends Iface> extends BlurPlatform.Processor<I> implements org.apache.blur.thirdparty.thrift_0_9_0.TProcessor {
    //private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, ? extends org.apache.blur.thirdparty.thrift_0_9_0.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, ? extends  org.apache.blur.thirdparty.thrift_0_9_0.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, ? extends  org.apache.blur.thirdparty.thrift_0_9_0.TBase>> getProcessMap(Map<String,  org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, ? extends  org.apache.blur.thirdparty.thrift_0_9_0.TBase>> processMap) {
      processMap.put("createTable", new createTable());
      processMap.put("enableTable", new enableTable());
      processMap.put("disableTable", new disableTable());
      processMap.put("removeTable", new removeTable());
      processMap.put("addColumnDefinition", new addColumnDefinition());
      processMap.put("tableList", new tableList());
      processMap.put("tableListByCluster", new tableListByCluster());
      processMap.put("describe", new describe());
      processMap.put("schema", new schema());
      processMap.put("parseQuery", new parseQuery());
      processMap.put("tableStats", new tableStats());
      processMap.put("optimize", new optimize());
      processMap.put("createSnapshot", new createSnapshot());
      processMap.put("removeSnapshot", new removeSnapshot());
      processMap.put("listSnapshots", new listSnapshots());
      processMap.put("setUser", new setUser());
      processMap.put("query", new query());
      processMap.put("fetchRow", new fetchRow());
      processMap.put("fetchRowBatch", new fetchRowBatch());
      processMap.put("mutate", new mutate());
      processMap.put("enqueueMutate", new enqueueMutate());
      processMap.put("mutateBatch", new mutateBatch());
      processMap.put("enqueueMutateBatch", new enqueueMutateBatch());
      processMap.put("cancelQuery", new cancelQuery());
      processMap.put("queryStatusIdList", new queryStatusIdList());
      processMap.put("queryStatusById", new queryStatusById());
      processMap.put("terms", new terms());
      processMap.put("recordFrequency", new recordFrequency());
      processMap.put("shardClusterList", new shardClusterList());
      processMap.put("shardServerList", new shardServerList());
      processMap.put("controllerServerList", new controllerServerList());
      processMap.put("shardServerLayout", new shardServerLayout());
      processMap.put("shardServerLayoutState", new shardServerLayoutState());
      processMap.put("isInSafeMode", new isInSafeMode());
      processMap.put("configuration", new configuration());
      processMap.put("metrics", new metrics());
      processMap.put("startTrace", new startTrace());
      processMap.put("traceList", new traceList());
      processMap.put("traceRequestList", new traceRequestList());
      processMap.put("traceRequestFetch", new traceRequestFetch());
      processMap.put("traceRemove", new traceRemove());
      processMap.put("ping", new ping());
      processMap.put("logging", new logging());
      processMap.put("resetLogging", new resetLogging());
      return processMap;
    }

    public static class createTable<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, createTable_args> {
      public createTable() {
        super("createTable");
      }

      public createTable_args getEmptyArgsInstance() {
        return new createTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createTable_result getResult(I iface, createTable_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        createTable_result result = new createTable_result();
        try {
          iface.createTable(args.tableDescriptor);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class enableTable<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, enableTable_args> {
      public enableTable() {
        super("enableTable");
      }

      public enableTable_args getEmptyArgsInstance() {
        return new enableTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enableTable_result getResult(I iface, enableTable_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        enableTable_result result = new enableTable_result();
        try {
          iface.enableTable(args.table);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class disableTable<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, disableTable_args> {
      public disableTable() {
        super("disableTable");
      }

      public disableTable_args getEmptyArgsInstance() {
        return new disableTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public disableTable_result getResult(I iface, disableTable_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        disableTable_result result = new disableTable_result();
        try {
          iface.disableTable(args.table);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class removeTable<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, removeTable_args> {
      public removeTable() {
        super("removeTable");
      }

      public removeTable_args getEmptyArgsInstance() {
        return new removeTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeTable_result getResult(I iface, removeTable_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        removeTable_result result = new removeTable_result();
        try {
          iface.removeTable(args.table, args.deleteIndexFiles);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class addColumnDefinition<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, addColumnDefinition_args> {
      public addColumnDefinition() {
        super("addColumnDefinition");
      }

      public addColumnDefinition_args getEmptyArgsInstance() {
        return new addColumnDefinition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addColumnDefinition_result getResult(I iface, addColumnDefinition_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        addColumnDefinition_result result = new addColumnDefinition_result();
        try {
          result.success = iface.addColumnDefinition(args.table, args.columnDefinition);
          result.setSuccessIsSet(true);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class tableList<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, tableList_args> {
      public tableList() {
        super("tableList");
      }

      public tableList_args getEmptyArgsInstance() {
        return new tableList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableList_result getResult(I iface, tableList_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        tableList_result result = new tableList_result();
        try {
          result.success = iface.tableList();
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class tableListByCluster<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, tableListByCluster_args> {
      public tableListByCluster() {
        super("tableListByCluster");
      }

      public tableListByCluster_args getEmptyArgsInstance() {
        return new tableListByCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableListByCluster_result getResult(I iface, tableListByCluster_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        tableListByCluster_result result = new tableListByCluster_result();
        try {
          result.success = iface.tableListByCluster(args.cluster);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class describe<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, describe_args> {
      public describe() {
        super("describe");
      }

      public describe_args getEmptyArgsInstance() {
        return new describe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public describe_result getResult(I iface, describe_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        describe_result result = new describe_result();
        try {
          result.success = iface.describe(args.table);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class schema<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, schema_args> {
      public schema() {
        super("schema");
      }

      public schema_args getEmptyArgsInstance() {
        return new schema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public schema_result getResult(I iface, schema_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        schema_result result = new schema_result();
        try {
          result.success = iface.schema(args.table);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class parseQuery<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, parseQuery_args> {
      public parseQuery() {
        super("parseQuery");
      }

      public parseQuery_args getEmptyArgsInstance() {
        return new parseQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public parseQuery_result getResult(I iface, parseQuery_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        parseQuery_result result = new parseQuery_result();
        try {
          result.success = iface.parseQuery(args.table, args.query);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class tableStats<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, tableStats_args> {
      public tableStats() {
        super("tableStats");
      }

      public tableStats_args getEmptyArgsInstance() {
        return new tableStats_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableStats_result getResult(I iface, tableStats_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        tableStats_result result = new tableStats_result();
        try {
          result.success = iface.tableStats(args.table);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class optimize<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, optimize_args> {
      public optimize() {
        super("optimize");
      }

      public optimize_args getEmptyArgsInstance() {
        return new optimize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public optimize_result getResult(I iface, optimize_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        optimize_result result = new optimize_result();
        try {
          iface.optimize(args.table, args.numberOfSegmentsPerShard);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class createSnapshot<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, createSnapshot_args> {
      public createSnapshot() {
        super("createSnapshot");
      }

      public createSnapshot_args getEmptyArgsInstance() {
        return new createSnapshot_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createSnapshot_result getResult(I iface, createSnapshot_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        createSnapshot_result result = new createSnapshot_result();
        try {
          iface.createSnapshot(args.table, args.name);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class removeSnapshot<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, removeSnapshot_args> {
      public removeSnapshot() {
        super("removeSnapshot");
      }

      public removeSnapshot_args getEmptyArgsInstance() {
        return new removeSnapshot_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeSnapshot_result getResult(I iface, removeSnapshot_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        removeSnapshot_result result = new removeSnapshot_result();
        try {
          iface.removeSnapshot(args.table, args.name);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class listSnapshots<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, listSnapshots_args> {
      public listSnapshots() {
        super("listSnapshots");
      }

      public listSnapshots_args getEmptyArgsInstance() {
        return new listSnapshots_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listSnapshots_result getResult(I iface, listSnapshots_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        listSnapshots_result result = new listSnapshots_result();
        try {
          result.success = iface.listSnapshots(args.table);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class setUser<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, setUser_args> {
      public setUser() {
        super("setUser");
      }

      public setUser_args getEmptyArgsInstance() {
        return new setUser_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.blur.thirdparty.thrift_0_9_0.TBase getResult(I iface, setUser_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        iface.setUser(args.user);
        return null;
      }
    }

    public static class query<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, query_args> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_result getResult(I iface, query_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        query_result result = new query_result();
        try {
          result.success = iface.query(args.table, args.blurQuery);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class fetchRow<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, fetchRow_args> {
      public fetchRow() {
        super("fetchRow");
      }

      public fetchRow_args getEmptyArgsInstance() {
        return new fetchRow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetchRow_result getResult(I iface, fetchRow_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        fetchRow_result result = new fetchRow_result();
        try {
          result.success = iface.fetchRow(args.table, args.selector);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class fetchRowBatch<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, fetchRowBatch_args> {
      public fetchRowBatch() {
        super("fetchRowBatch");
      }

      public fetchRowBatch_args getEmptyArgsInstance() {
        return new fetchRowBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetchRowBatch_result getResult(I iface, fetchRowBatch_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        fetchRowBatch_result result = new fetchRowBatch_result();
        try {
          result.success = iface.fetchRowBatch(args.table, args.selectors);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class mutate<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, mutate_args> {
      public mutate() {
        super("mutate");
      }

      public mutate_args getEmptyArgsInstance() {
        return new mutate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mutate_result getResult(I iface, mutate_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        mutate_result result = new mutate_result();
        try {
          iface.mutate(args.mutation);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class enqueueMutate<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, enqueueMutate_args> {
      public enqueueMutate() {
        super("enqueueMutate");
      }

      public enqueueMutate_args getEmptyArgsInstance() {
        return new enqueueMutate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enqueueMutate_result getResult(I iface, enqueueMutate_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        enqueueMutate_result result = new enqueueMutate_result();
        try {
          iface.enqueueMutate(args.mutation);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class mutateBatch<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, mutateBatch_args> {
      public mutateBatch() {
        super("mutateBatch");
      }

      public mutateBatch_args getEmptyArgsInstance() {
        return new mutateBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mutateBatch_result getResult(I iface, mutateBatch_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        mutateBatch_result result = new mutateBatch_result();
        try {
          iface.mutateBatch(args.mutations);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class enqueueMutateBatch<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, enqueueMutateBatch_args> {
      public enqueueMutateBatch() {
        super("enqueueMutateBatch");
      }

      public enqueueMutateBatch_args getEmptyArgsInstance() {
        return new enqueueMutateBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enqueueMutateBatch_result getResult(I iface, enqueueMutateBatch_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        enqueueMutateBatch_result result = new enqueueMutateBatch_result();
        try {
          iface.enqueueMutateBatch(args.mutations);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class cancelQuery<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, cancelQuery_args> {
      public cancelQuery() {
        super("cancelQuery");
      }

      public cancelQuery_args getEmptyArgsInstance() {
        return new cancelQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelQuery_result getResult(I iface, cancelQuery_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        cancelQuery_result result = new cancelQuery_result();
        try {
          iface.cancelQuery(args.table, args.uuid);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class queryStatusIdList<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, queryStatusIdList_args> {
      public queryStatusIdList() {
        super("queryStatusIdList");
      }

      public queryStatusIdList_args getEmptyArgsInstance() {
        return new queryStatusIdList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryStatusIdList_result getResult(I iface, queryStatusIdList_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        queryStatusIdList_result result = new queryStatusIdList_result();
        try {
          result.success = iface.queryStatusIdList(args.table);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class queryStatusById<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, queryStatusById_args> {
      public queryStatusById() {
        super("queryStatusById");
      }

      public queryStatusById_args getEmptyArgsInstance() {
        return new queryStatusById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryStatusById_result getResult(I iface, queryStatusById_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        queryStatusById_result result = new queryStatusById_result();
        try {
          result.success = iface.queryStatusById(args.table, args.uuid);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class terms<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, terms_args> {
      public terms() {
        super("terms");
      }

      public terms_args getEmptyArgsInstance() {
        return new terms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public terms_result getResult(I iface, terms_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        terms_result result = new terms_result();
        try {
          result.success = iface.terms(args.table, args.columnFamily, args.columnName, args.startWith, args.size);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class recordFrequency<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, recordFrequency_args> {
      public recordFrequency() {
        super("recordFrequency");
      }

      public recordFrequency_args getEmptyArgsInstance() {
        return new recordFrequency_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public recordFrequency_result getResult(I iface, recordFrequency_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        recordFrequency_result result = new recordFrequency_result();
        try {
          result.success = iface.recordFrequency(args.table, args.columnFamily, args.columnName, args.value);
          result.setSuccessIsSet(true);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class shardClusterList<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, shardClusterList_args> {
      public shardClusterList() {
        super("shardClusterList");
      }

      public shardClusterList_args getEmptyArgsInstance() {
        return new shardClusterList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public shardClusterList_result getResult(I iface, shardClusterList_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        shardClusterList_result result = new shardClusterList_result();
        try {
          result.success = iface.shardClusterList();
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class shardServerList<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, shardServerList_args> {
      public shardServerList() {
        super("shardServerList");
      }

      public shardServerList_args getEmptyArgsInstance() {
        return new shardServerList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public shardServerList_result getResult(I iface, shardServerList_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        shardServerList_result result = new shardServerList_result();
        try {
          result.success = iface.shardServerList(args.cluster);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class controllerServerList<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, controllerServerList_args> {
      public controllerServerList() {
        super("controllerServerList");
      }

      public controllerServerList_args getEmptyArgsInstance() {
        return new controllerServerList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public controllerServerList_result getResult(I iface, controllerServerList_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        controllerServerList_result result = new controllerServerList_result();
        try {
          result.success = iface.controllerServerList();
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class shardServerLayout<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, shardServerLayout_args> {
      public shardServerLayout() {
        super("shardServerLayout");
      }

      public shardServerLayout_args getEmptyArgsInstance() {
        return new shardServerLayout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public shardServerLayout_result getResult(I iface, shardServerLayout_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        shardServerLayout_result result = new shardServerLayout_result();
        try {
          result.success = iface.shardServerLayout(args.table);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class shardServerLayoutState<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, shardServerLayoutState_args> {
      public shardServerLayoutState() {
        super("shardServerLayoutState");
      }

      public shardServerLayoutState_args getEmptyArgsInstance() {
        return new shardServerLayoutState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public shardServerLayoutState_result getResult(I iface, shardServerLayoutState_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        shardServerLayoutState_result result = new shardServerLayoutState_result();
        try {
          result.success = iface.shardServerLayoutState(args.table);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class isInSafeMode<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, isInSafeMode_args> {
      public isInSafeMode() {
        super("isInSafeMode");
      }

      public isInSafeMode_args getEmptyArgsInstance() {
        return new isInSafeMode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isInSafeMode_result getResult(I iface, isInSafeMode_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        isInSafeMode_result result = new isInSafeMode_result();
        try {
          result.success = iface.isInSafeMode(args.cluster);
          result.setSuccessIsSet(true);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class configuration<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, configuration_args> {
      public configuration() {
        super("configuration");
      }

      public configuration_args getEmptyArgsInstance() {
        return new configuration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public configuration_result getResult(I iface, configuration_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        configuration_result result = new configuration_result();
        try {
          result.success = iface.configuration();
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class metrics<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, metrics_args> {
      public metrics() {
        super("metrics");
      }

      public metrics_args getEmptyArgsInstance() {
        return new metrics_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public metrics_result getResult(I iface, metrics_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        metrics_result result = new metrics_result();
        try {
          result.success = iface.metrics(args.metrics);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class startTrace<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, startTrace_args> {
      public startTrace() {
        super("startTrace");
      }

      public startTrace_args getEmptyArgsInstance() {
        return new startTrace_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.blur.thirdparty.thrift_0_9_0.TBase getResult(I iface, startTrace_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        iface.startTrace(args.traceId, args.requestId);
        return null;
      }
    }

    public static class traceList<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, traceList_args> {
      public traceList() {
        super("traceList");
      }

      public traceList_args getEmptyArgsInstance() {
        return new traceList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public traceList_result getResult(I iface, traceList_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        traceList_result result = new traceList_result();
        try {
          result.success = iface.traceList();
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class traceRequestList<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, traceRequestList_args> {
      public traceRequestList() {
        super("traceRequestList");
      }

      public traceRequestList_args getEmptyArgsInstance() {
        return new traceRequestList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public traceRequestList_result getResult(I iface, traceRequestList_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        traceRequestList_result result = new traceRequestList_result();
        try {
          result.success = iface.traceRequestList(args.traceId);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class traceRequestFetch<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, traceRequestFetch_args> {
      public traceRequestFetch() {
        super("traceRequestFetch");
      }

      public traceRequestFetch_args getEmptyArgsInstance() {
        return new traceRequestFetch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public traceRequestFetch_result getResult(I iface, traceRequestFetch_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        traceRequestFetch_result result = new traceRequestFetch_result();
        try {
          result.success = iface.traceRequestFetch(args.traceId, args.requestId);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class traceRemove<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, traceRemove_args> {
      public traceRemove() {
        super("traceRemove");
      }

      public traceRemove_args getEmptyArgsInstance() {
        return new traceRemove_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public traceRemove_result getResult(I iface, traceRemove_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        traceRemove_result result = new traceRemove_result();
        try {
          iface.traceRemove(args.traceId);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class ping<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

    public static class logging<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, logging_args> {
      public logging() {
        super("logging");
      }

      public logging_args getEmptyArgsInstance() {
        return new logging_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public logging_result getResult(I iface, logging_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        logging_result result = new logging_result();
        try {
          iface.logging(args.classNameOrLoggerName, args.level);
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class resetLogging<I extends Iface> extends org.apache.blur.thirdparty.thrift_0_9_0.ProcessFunction<I, resetLogging_args> {
      public resetLogging() {
        super("resetLogging");
      }

      public resetLogging_args getEmptyArgsInstance() {
        return new resetLogging_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resetLogging_result getResult(I iface, resetLogging_args args) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        resetLogging_result result = new resetLogging_result();
        try {
          iface.resetLogging();
        } catch (BlurException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class createTable_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<createTable_args, createTable_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("createTable_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_DESCRIPTOR_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("tableDescriptor", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createTable_argsTupleSchemeFactory());
    }

    /**
     * the TableDescriptor.
     */
    public TableDescriptor tableDescriptor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the TableDescriptor.
       */
      TABLE_DESCRIPTOR((short)1, "tableDescriptor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE_DESCRIPTOR
            return TABLE_DESCRIPTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE_DESCRIPTOR, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("tableDescriptor", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, TableDescriptor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(createTable_args.class, metaDataMap);
    }

    public createTable_args() {
    }

    public createTable_args(
      TableDescriptor tableDescriptor)
    {
      this();
      this.tableDescriptor = tableDescriptor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTable_args(createTable_args other) {
      if (other.isSetTableDescriptor()) {
        this.tableDescriptor = new TableDescriptor(other.tableDescriptor);
      }
    }

    public createTable_args deepCopy() {
      return new createTable_args(this);
    }

    @Override
    public void clear() {
      this.tableDescriptor = null;
    }

    /**
     * the TableDescriptor.
     */
    public TableDescriptor getTableDescriptor() {
      return this.tableDescriptor;
    }

    /**
     * the TableDescriptor.
     */
    public createTable_args setTableDescriptor(TableDescriptor tableDescriptor) {
      this.tableDescriptor = tableDescriptor;
      return this;
    }

    public void unsetTableDescriptor() {
      this.tableDescriptor = null;
    }

    /** Returns true if field tableDescriptor is set (has been assigned a value) and false otherwise */
    public boolean isSetTableDescriptor() {
      return this.tableDescriptor != null;
    }

    public void setTableDescriptorIsSet(boolean value) {
      if (!value) {
        this.tableDescriptor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE_DESCRIPTOR:
        if (value == null) {
          unsetTableDescriptor();
        } else {
          setTableDescriptor((TableDescriptor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE_DESCRIPTOR:
        return getTableDescriptor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE_DESCRIPTOR:
        return isSetTableDescriptor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTable_args)
        return this.equals((createTable_args)that);
      return false;
    }

    public boolean equals(createTable_args that) {
      if (that == null)
        return false;

      boolean this_present_tableDescriptor = true && this.isSetTableDescriptor();
      boolean that_present_tableDescriptor = true && that.isSetTableDescriptor();
      if (this_present_tableDescriptor || that_present_tableDescriptor) {
        if (!(this_present_tableDescriptor && that_present_tableDescriptor))
          return false;
        if (!this.tableDescriptor.equals(that.tableDescriptor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createTable_args typedOther = (createTable_args)other;

      lastComparison = Boolean.valueOf(isSetTableDescriptor()).compareTo(typedOther.isSetTableDescriptor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableDescriptor()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.tableDescriptor, typedOther.tableDescriptor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createTable_args(");
      boolean first = true;

      sb.append("tableDescriptor:");
      if (this.tableDescriptor == null) {
        sb.append("null");
      } else {
        sb.append(this.tableDescriptor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (tableDescriptor != null) {
        tableDescriptor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createTable_argsStandardSchemeFactory implements SchemeFactory {
      public createTable_argsStandardScheme getScheme() {
        return new createTable_argsStandardScheme();
      }
    }

    private static class createTable_argsStandardScheme extends StandardScheme<createTable_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, createTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE_DESCRIPTOR
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.tableDescriptor = new TableDescriptor();
                struct.tableDescriptor.read(iprot);
                struct.setTableDescriptorIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, createTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tableDescriptor != null) {
          oprot.writeFieldBegin(TABLE_DESCRIPTOR_FIELD_DESC);
          struct.tableDescriptor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createTable_argsTupleSchemeFactory implements SchemeFactory {
      public createTable_argsTupleScheme getScheme() {
        return new createTable_argsTupleScheme();
      }
    }

    private static class createTable_argsTupleScheme extends TupleScheme<createTable_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, createTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTableDescriptor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTableDescriptor()) {
          struct.tableDescriptor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, createTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tableDescriptor = new TableDescriptor();
          struct.tableDescriptor.read(iprot);
          struct.setTableDescriptorIsSet(true);
        }
      }
    }

  }

  public static class createTable_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<createTable_result, createTable_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("createTable_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createTable_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(createTable_result.class, metaDataMap);
    }

    public createTable_result() {
    }

    public createTable_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTable_result(createTable_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public createTable_result deepCopy() {
      return new createTable_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public createTable_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTable_result)
        return this.equals((createTable_result)that);
      return false;
    }

    public boolean equals(createTable_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createTable_result typedOther = (createTable_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createTable_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createTable_resultStandardSchemeFactory implements SchemeFactory {
      public createTable_resultStandardScheme getScheme() {
        return new createTable_resultStandardScheme();
      }
    }

    private static class createTable_resultStandardScheme extends StandardScheme<createTable_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, createTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, createTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createTable_resultTupleSchemeFactory implements SchemeFactory {
      public createTable_resultTupleScheme getScheme() {
        return new createTable_resultTupleScheme();
      }
    }

    private static class createTable_resultTupleScheme extends TupleScheme<createTable_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, createTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, createTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class enableTable_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<enableTable_args, enableTable_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("enableTable_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enableTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enableTable_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(enableTable_args.class, metaDataMap);
    }

    public enableTable_args() {
    }

    public enableTable_args(
      String table)
    {
      this();
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enableTable_args(enableTable_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public enableTable_args deepCopy() {
      return new enableTable_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public enableTable_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enableTable_args)
        return this.equals((enableTable_args)that);
      return false;
    }

    public boolean equals(enableTable_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(enableTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      enableTable_args typedOther = (enableTable_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enableTable_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enableTable_argsStandardSchemeFactory implements SchemeFactory {
      public enableTable_argsStandardScheme getScheme() {
        return new enableTable_argsStandardScheme();
      }
    }

    private static class enableTable_argsStandardScheme extends StandardScheme<enableTable_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, enableTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, enableTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enableTable_argsTupleSchemeFactory implements SchemeFactory {
      public enableTable_argsTupleScheme getScheme() {
        return new enableTable_argsTupleScheme();
      }
    }

    private static class enableTable_argsTupleScheme extends TupleScheme<enableTable_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enableTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enableTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }

  }

  public static class enableTable_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<enableTable_result, enableTable_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("enableTable_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enableTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enableTable_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(enableTable_result.class, metaDataMap);
    }

    public enableTable_result() {
    }

    public enableTable_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enableTable_result(enableTable_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public enableTable_result deepCopy() {
      return new enableTable_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public enableTable_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enableTable_result)
        return this.equals((enableTable_result)that);
      return false;
    }

    public boolean equals(enableTable_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(enableTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      enableTable_result typedOther = (enableTable_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enableTable_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enableTable_resultStandardSchemeFactory implements SchemeFactory {
      public enableTable_resultStandardScheme getScheme() {
        return new enableTable_resultStandardScheme();
      }
    }

    private static class enableTable_resultStandardScheme extends StandardScheme<enableTable_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, enableTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, enableTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enableTable_resultTupleSchemeFactory implements SchemeFactory {
      public enableTable_resultTupleScheme getScheme() {
        return new enableTable_resultTupleScheme();
      }
    }

    private static class enableTable_resultTupleScheme extends TupleScheme<enableTable_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enableTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enableTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class disableTable_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<disableTable_args, disableTable_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("disableTable_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disableTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disableTable_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(disableTable_args.class, metaDataMap);
    }

    public disableTable_args() {
    }

    public disableTable_args(
      String table)
    {
      this();
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disableTable_args(disableTable_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public disableTable_args deepCopy() {
      return new disableTable_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public disableTable_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disableTable_args)
        return this.equals((disableTable_args)that);
      return false;
    }

    public boolean equals(disableTable_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(disableTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      disableTable_args typedOther = (disableTable_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disableTable_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disableTable_argsStandardSchemeFactory implements SchemeFactory {
      public disableTable_argsStandardScheme getScheme() {
        return new disableTable_argsStandardScheme();
      }
    }

    private static class disableTable_argsStandardScheme extends StandardScheme<disableTable_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, disableTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, disableTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disableTable_argsTupleSchemeFactory implements SchemeFactory {
      public disableTable_argsTupleScheme getScheme() {
        return new disableTable_argsTupleScheme();
      }
    }

    private static class disableTable_argsTupleScheme extends TupleScheme<disableTable_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, disableTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, disableTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }

  }

  public static class disableTable_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<disableTable_result, disableTable_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("disableTable_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disableTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disableTable_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(disableTable_result.class, metaDataMap);
    }

    public disableTable_result() {
    }

    public disableTable_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disableTable_result(disableTable_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public disableTable_result deepCopy() {
      return new disableTable_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public disableTable_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disableTable_result)
        return this.equals((disableTable_result)that);
      return false;
    }

    public boolean equals(disableTable_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(disableTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      disableTable_result typedOther = (disableTable_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disableTable_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disableTable_resultStandardSchemeFactory implements SchemeFactory {
      public disableTable_resultStandardScheme getScheme() {
        return new disableTable_resultStandardScheme();
      }
    }

    private static class disableTable_resultStandardScheme extends StandardScheme<disableTable_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, disableTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, disableTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disableTable_resultTupleSchemeFactory implements SchemeFactory {
      public disableTable_resultTupleScheme getScheme() {
        return new disableTable_resultTupleScheme();
      }
    }

    private static class disableTable_resultTupleScheme extends TupleScheme<disableTable_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, disableTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, disableTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class removeTable_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<removeTable_args, removeTable_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("removeTable_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField DELETE_INDEX_FILES_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("deleteIndexFiles", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeTable_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required
    /**
     * true to remove the index storage and false if to preserve.
     */
    public boolean deleteIndexFiles; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table"),
      /**
       * true to remove the index storage and false if to preserve.
       */
      DELETE_INDEX_FILES((short)2, "deleteIndexFiles");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // DELETE_INDEX_FILES
            return DELETE_INDEX_FILES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DELETEINDEXFILES_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.DELETE_INDEX_FILES, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("deleteIndexFiles", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(removeTable_args.class, metaDataMap);
    }

    public removeTable_args() {
    }

    public removeTable_args(
      String table,
      boolean deleteIndexFiles)
    {
      this();
      this.table = table;
      this.deleteIndexFiles = deleteIndexFiles;
      setDeleteIndexFilesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTable_args(removeTable_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.deleteIndexFiles = other.deleteIndexFiles;
    }

    public removeTable_args deepCopy() {
      return new removeTable_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      setDeleteIndexFilesIsSet(false);
      this.deleteIndexFiles = false;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public removeTable_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * true to remove the index storage and false if to preserve.
     */
    public boolean isDeleteIndexFiles() {
      return this.deleteIndexFiles;
    }

    /**
     * true to remove the index storage and false if to preserve.
     */
    public removeTable_args setDeleteIndexFiles(boolean deleteIndexFiles) {
      this.deleteIndexFiles = deleteIndexFiles;
      setDeleteIndexFilesIsSet(true);
      return this;
    }

    public void unsetDeleteIndexFiles() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETEINDEXFILES_ISSET_ID);
    }

    /** Returns true if field deleteIndexFiles is set (has been assigned a value) and false otherwise */
    public boolean isSetDeleteIndexFiles() {
      return EncodingUtils.testBit(__isset_bitfield, __DELETEINDEXFILES_ISSET_ID);
    }

    public void setDeleteIndexFilesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETEINDEXFILES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case DELETE_INDEX_FILES:
        if (value == null) {
          unsetDeleteIndexFiles();
        } else {
          setDeleteIndexFiles((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case DELETE_INDEX_FILES:
        return Boolean.valueOf(isDeleteIndexFiles());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case DELETE_INDEX_FILES:
        return isSetDeleteIndexFiles();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTable_args)
        return this.equals((removeTable_args)that);
      return false;
    }

    public boolean equals(removeTable_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_deleteIndexFiles = true;
      boolean that_present_deleteIndexFiles = true;
      if (this_present_deleteIndexFiles || that_present_deleteIndexFiles) {
        if (!(this_present_deleteIndexFiles && that_present_deleteIndexFiles))
          return false;
        if (this.deleteIndexFiles != that.deleteIndexFiles)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeTable_args typedOther = (removeTable_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeleteIndexFiles()).compareTo(typedOther.isSetDeleteIndexFiles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeleteIndexFiles()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.deleteIndexFiles, typedOther.deleteIndexFiles);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTable_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deleteIndexFiles:");
      sb.append(this.deleteIndexFiles);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeTable_argsStandardSchemeFactory implements SchemeFactory {
      public removeTable_argsStandardScheme getScheme() {
        return new removeTable_argsStandardScheme();
      }
    }

    private static class removeTable_argsStandardScheme extends StandardScheme<removeTable_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, removeTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DELETE_INDEX_FILES
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL) {
                struct.deleteIndexFiles = iprot.readBool();
                struct.setDeleteIndexFilesIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, removeTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DELETE_INDEX_FILES_FIELD_DESC);
        oprot.writeBool(struct.deleteIndexFiles);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeTable_argsTupleSchemeFactory implements SchemeFactory {
      public removeTable_argsTupleScheme getScheme() {
        return new removeTable_argsTupleScheme();
      }
    }

    private static class removeTable_argsTupleScheme extends TupleScheme<removeTable_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, removeTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetDeleteIndexFiles()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetDeleteIndexFiles()) {
          oprot.writeBool(struct.deleteIndexFiles);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, removeTable_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deleteIndexFiles = iprot.readBool();
          struct.setDeleteIndexFilesIsSet(true);
        }
      }
    }

  }

  public static class removeTable_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<removeTable_result, removeTable_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("removeTable_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeTable_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(removeTable_result.class, metaDataMap);
    }

    public removeTable_result() {
    }

    public removeTable_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTable_result(removeTable_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public removeTable_result deepCopy() {
      return new removeTable_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public removeTable_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTable_result)
        return this.equals((removeTable_result)that);
      return false;
    }

    public boolean equals(removeTable_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeTable_result typedOther = (removeTable_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTable_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeTable_resultStandardSchemeFactory implements SchemeFactory {
      public removeTable_resultStandardScheme getScheme() {
        return new removeTable_resultStandardScheme();
      }
    }

    private static class removeTable_resultStandardScheme extends StandardScheme<removeTable_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, removeTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, removeTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeTable_resultTupleSchemeFactory implements SchemeFactory {
      public removeTable_resultTupleScheme getScheme() {
        return new removeTable_resultTupleScheme();
      }
    }

    private static class removeTable_resultTupleScheme extends TupleScheme<removeTable_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, removeTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, removeTable_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class addColumnDefinition_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<addColumnDefinition_args, addColumnDefinition_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("addColumnDefinition_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField COLUMN_DEFINITION_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("columnDefinition", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addColumnDefinition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addColumnDefinition_argsTupleSchemeFactory());
    }

    /**
     * the name of the table.
     */
    public String table; // required
    /**
     * the ColumnDefinition.
     */
    public ColumnDefinition columnDefinition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the name of the table.
       */
      TABLE((short)1, "table"),
      /**
       * the ColumnDefinition.
       */
      COLUMN_DEFINITION((short)2, "columnDefinition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // COLUMN_DEFINITION
            return COLUMN_DEFINITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN_DEFINITION, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("columnDefinition", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, ColumnDefinition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(addColumnDefinition_args.class, metaDataMap);
    }

    public addColumnDefinition_args() {
    }

    public addColumnDefinition_args(
      String table,
      ColumnDefinition columnDefinition)
    {
      this();
      this.table = table;
      this.columnDefinition = columnDefinition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addColumnDefinition_args(addColumnDefinition_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetColumnDefinition()) {
        this.columnDefinition = new ColumnDefinition(other.columnDefinition);
      }
    }

    public addColumnDefinition_args deepCopy() {
      return new addColumnDefinition_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.columnDefinition = null;
    }

    /**
     * the name of the table.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the name of the table.
     */
    public addColumnDefinition_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the ColumnDefinition.
     */
    public ColumnDefinition getColumnDefinition() {
      return this.columnDefinition;
    }

    /**
     * the ColumnDefinition.
     */
    public addColumnDefinition_args setColumnDefinition(ColumnDefinition columnDefinition) {
      this.columnDefinition = columnDefinition;
      return this;
    }

    public void unsetColumnDefinition() {
      this.columnDefinition = null;
    }

    /** Returns true if field columnDefinition is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnDefinition() {
      return this.columnDefinition != null;
    }

    public void setColumnDefinitionIsSet(boolean value) {
      if (!value) {
        this.columnDefinition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case COLUMN_DEFINITION:
        if (value == null) {
          unsetColumnDefinition();
        } else {
          setColumnDefinition((ColumnDefinition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case COLUMN_DEFINITION:
        return getColumnDefinition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case COLUMN_DEFINITION:
        return isSetColumnDefinition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addColumnDefinition_args)
        return this.equals((addColumnDefinition_args)that);
      return false;
    }

    public boolean equals(addColumnDefinition_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_columnDefinition = true && this.isSetColumnDefinition();
      boolean that_present_columnDefinition = true && that.isSetColumnDefinition();
      if (this_present_columnDefinition || that_present_columnDefinition) {
        if (!(this_present_columnDefinition && that_present_columnDefinition))
          return false;
        if (!this.columnDefinition.equals(that.columnDefinition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addColumnDefinition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addColumnDefinition_args typedOther = (addColumnDefinition_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnDefinition()).compareTo(typedOther.isSetColumnDefinition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnDefinition()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.columnDefinition, typedOther.columnDefinition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addColumnDefinition_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnDefinition:");
      if (this.columnDefinition == null) {
        sb.append("null");
      } else {
        sb.append(this.columnDefinition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (columnDefinition != null) {
        columnDefinition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addColumnDefinition_argsStandardSchemeFactory implements SchemeFactory {
      public addColumnDefinition_argsStandardScheme getScheme() {
        return new addColumnDefinition_argsStandardScheme();
      }
    }

    private static class addColumnDefinition_argsStandardScheme extends StandardScheme<addColumnDefinition_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, addColumnDefinition_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN_DEFINITION
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.columnDefinition = new ColumnDefinition();
                struct.columnDefinition.read(iprot);
                struct.setColumnDefinitionIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, addColumnDefinition_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.columnDefinition != null) {
          oprot.writeFieldBegin(COLUMN_DEFINITION_FIELD_DESC);
          struct.columnDefinition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addColumnDefinition_argsTupleSchemeFactory implements SchemeFactory {
      public addColumnDefinition_argsTupleScheme getScheme() {
        return new addColumnDefinition_argsTupleScheme();
      }
    }

    private static class addColumnDefinition_argsTupleScheme extends TupleScheme<addColumnDefinition_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, addColumnDefinition_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetColumnDefinition()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetColumnDefinition()) {
          struct.columnDefinition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, addColumnDefinition_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.columnDefinition = new ColumnDefinition();
          struct.columnDefinition.read(iprot);
          struct.setColumnDefinitionIsSet(true);
        }
      }
    }

  }

  public static class addColumnDefinition_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<addColumnDefinition_result, addColumnDefinition_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("addColumnDefinition_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addColumnDefinition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addColumnDefinition_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(addColumnDefinition_result.class, metaDataMap);
    }

    public addColumnDefinition_result() {
    }

    public addColumnDefinition_result(
      boolean success,
      BlurException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addColumnDefinition_result(addColumnDefinition_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public addColumnDefinition_result deepCopy() {
      return new addColumnDefinition_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addColumnDefinition_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public BlurException getEx() {
      return this.ex;
    }

    public addColumnDefinition_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addColumnDefinition_result)
        return this.equals((addColumnDefinition_result)that);
      return false;
    }

    public boolean equals(addColumnDefinition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addColumnDefinition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addColumnDefinition_result typedOther = (addColumnDefinition_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addColumnDefinition_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addColumnDefinition_resultStandardSchemeFactory implements SchemeFactory {
      public addColumnDefinition_resultStandardScheme getScheme() {
        return new addColumnDefinition_resultStandardScheme();
      }
    }

    private static class addColumnDefinition_resultStandardScheme extends StandardScheme<addColumnDefinition_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, addColumnDefinition_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, addColumnDefinition_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addColumnDefinition_resultTupleSchemeFactory implements SchemeFactory {
      public addColumnDefinition_resultTupleScheme getScheme() {
        return new addColumnDefinition_resultTupleScheme();
      }
    }

    private static class addColumnDefinition_resultTupleScheme extends TupleScheme<addColumnDefinition_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, addColumnDefinition_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, addColumnDefinition_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class tableList_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<tableList_args, tableList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("tableList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(tableList_args.class, metaDataMap);
    }

    public tableList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableList_args(tableList_args other) {
    }

    public tableList_args deepCopy() {
      return new tableList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableList_args)
        return this.equals((tableList_args)that);
      return false;
    }

    public boolean equals(tableList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableList_args typedOther = (tableList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableList_argsStandardSchemeFactory implements SchemeFactory {
      public tableList_argsStandardScheme getScheme() {
        return new tableList_argsStandardScheme();
      }
    }

    private static class tableList_argsStandardScheme extends StandardScheme<tableList_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, tableList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, tableList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableList_argsTupleSchemeFactory implements SchemeFactory {
      public tableList_argsTupleScheme getScheme() {
        return new tableList_argsTupleScheme();
      }
    }

    private static class tableList_argsTupleScheme extends TupleScheme<tableList_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, tableList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, tableList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class tableList_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<tableList_result, tableList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("tableList_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableList_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(tableList_result.class, metaDataMap);
    }

    public tableList_result() {
    }

    public tableList_result(
      List<String> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableList_result(tableList_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public tableList_result deepCopy() {
      return new tableList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public tableList_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public tableList_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableList_result)
        return this.equals((tableList_result)that);
      return false;
    }

    public boolean equals(tableList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableList_result typedOther = (tableList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableList_resultStandardSchemeFactory implements SchemeFactory {
      public tableList_resultStandardScheme getScheme() {
        return new tableList_resultStandardScheme();
      }
    }

    private static class tableList_resultStandardScheme extends StandardScheme<tableList_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, tableList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list266 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list266.size);
                  for (int _i267 = 0; _i267 < _list266.size; ++_i267)
                  {
                    String _elem268; // required
                    _elem268 = iprot.readString();
                    struct.success.add(_elem268);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, tableList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.success.size()));
            for (String _iter269 : struct.success)
            {
              oprot.writeString(_iter269);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableList_resultTupleSchemeFactory implements SchemeFactory {
      public tableList_resultTupleScheme getScheme() {
        return new tableList_resultTupleScheme();
      }
    }

    private static class tableList_resultTupleScheme extends TupleScheme<tableList_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, tableList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter270 : struct.success)
            {
              oprot.writeString(_iter270);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, tableList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list271 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list271.size);
            for (int _i272 = 0; _i272 < _list271.size; ++_i272)
            {
              String _elem273; // required
              _elem273 = iprot.readString();
              struct.success.add(_elem273);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class tableListByCluster_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<tableListByCluster_args, tableListByCluster_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("tableListByCluster_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField CLUSTER_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("cluster", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableListByCluster_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableListByCluster_argsTupleSchemeFactory());
    }

    /**
     * the cluster name.
     */
    public String cluster; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the cluster name.
       */
      CLUSTER((short)1, "cluster");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER
            return CLUSTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("cluster", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(tableListByCluster_args.class, metaDataMap);
    }

    public tableListByCluster_args() {
    }

    public tableListByCluster_args(
      String cluster)
    {
      this();
      this.cluster = cluster;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableListByCluster_args(tableListByCluster_args other) {
      if (other.isSetCluster()) {
        this.cluster = other.cluster;
      }
    }

    public tableListByCluster_args deepCopy() {
      return new tableListByCluster_args(this);
    }

    @Override
    public void clear() {
      this.cluster = null;
    }

    /**
     * the cluster name.
     */
    public String getCluster() {
      return this.cluster;
    }

    /**
     * the cluster name.
     */
    public tableListByCluster_args setCluster(String cluster) {
      this.cluster = cluster;
      return this;
    }

    public void unsetCluster() {
      this.cluster = null;
    }

    /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
    public boolean isSetCluster() {
      return this.cluster != null;
    }

    public void setClusterIsSet(boolean value) {
      if (!value) {
        this.cluster = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTER:
        if (value == null) {
          unsetCluster();
        } else {
          setCluster((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER:
        return getCluster();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER:
        return isSetCluster();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableListByCluster_args)
        return this.equals((tableListByCluster_args)that);
      return false;
    }

    public boolean equals(tableListByCluster_args that) {
      if (that == null)
        return false;

      boolean this_present_cluster = true && this.isSetCluster();
      boolean that_present_cluster = true && that.isSetCluster();
      if (this_present_cluster || that_present_cluster) {
        if (!(this_present_cluster && that_present_cluster))
          return false;
        if (!this.cluster.equals(that.cluster))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableListByCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableListByCluster_args typedOther = (tableListByCluster_args)other;

      lastComparison = Boolean.valueOf(isSetCluster()).compareTo(typedOther.isSetCluster());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCluster()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.cluster, typedOther.cluster);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableListByCluster_args(");
      boolean first = true;

      sb.append("cluster:");
      if (this.cluster == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableListByCluster_argsStandardSchemeFactory implements SchemeFactory {
      public tableListByCluster_argsStandardScheme getScheme() {
        return new tableListByCluster_argsStandardScheme();
      }
    }

    private static class tableListByCluster_argsStandardScheme extends StandardScheme<tableListByCluster_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, tableListByCluster_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.cluster = iprot.readString();
                struct.setClusterIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, tableListByCluster_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cluster != null) {
          oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
          oprot.writeString(struct.cluster);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableListByCluster_argsTupleSchemeFactory implements SchemeFactory {
      public tableListByCluster_argsTupleScheme getScheme() {
        return new tableListByCluster_argsTupleScheme();
      }
    }

    private static class tableListByCluster_argsTupleScheme extends TupleScheme<tableListByCluster_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, tableListByCluster_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCluster()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCluster()) {
          oprot.writeString(struct.cluster);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, tableListByCluster_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cluster = iprot.readString();
          struct.setClusterIsSet(true);
        }
      }
    }

  }

  public static class tableListByCluster_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<tableListByCluster_result, tableListByCluster_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("tableListByCluster_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableListByCluster_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableListByCluster_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(tableListByCluster_result.class, metaDataMap);
    }

    public tableListByCluster_result() {
    }

    public tableListByCluster_result(
      List<String> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableListByCluster_result(tableListByCluster_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public tableListByCluster_result deepCopy() {
      return new tableListByCluster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public tableListByCluster_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public tableListByCluster_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableListByCluster_result)
        return this.equals((tableListByCluster_result)that);
      return false;
    }

    public boolean equals(tableListByCluster_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableListByCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableListByCluster_result typedOther = (tableListByCluster_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableListByCluster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableListByCluster_resultStandardSchemeFactory implements SchemeFactory {
      public tableListByCluster_resultStandardScheme getScheme() {
        return new tableListByCluster_resultStandardScheme();
      }
    }

    private static class tableListByCluster_resultStandardScheme extends StandardScheme<tableListByCluster_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, tableListByCluster_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list274 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list274.size);
                  for (int _i275 = 0; _i275 < _list274.size; ++_i275)
                  {
                    String _elem276; // required
                    _elem276 = iprot.readString();
                    struct.success.add(_elem276);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, tableListByCluster_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.success.size()));
            for (String _iter277 : struct.success)
            {
              oprot.writeString(_iter277);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableListByCluster_resultTupleSchemeFactory implements SchemeFactory {
      public tableListByCluster_resultTupleScheme getScheme() {
        return new tableListByCluster_resultTupleScheme();
      }
    }

    private static class tableListByCluster_resultTupleScheme extends TupleScheme<tableListByCluster_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, tableListByCluster_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter278 : struct.success)
            {
              oprot.writeString(_iter278);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, tableListByCluster_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list279 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list279.size);
            for (int _i280 = 0; _i280 < _list279.size; ++_i280)
            {
              String _elem281; // required
              _elem281 = iprot.readString();
              struct.success.add(_elem281);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class describe_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<describe_args, describe_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("describe_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new describe_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new describe_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(describe_args.class, metaDataMap);
    }

    public describe_args() {
    }

    public describe_args(
      String table)
    {
      this();
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public describe_args(describe_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public describe_args deepCopy() {
      return new describe_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public describe_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof describe_args)
        return this.equals((describe_args)that);
      return false;
    }

    public boolean equals(describe_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(describe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      describe_args typedOther = (describe_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("describe_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class describe_argsStandardSchemeFactory implements SchemeFactory {
      public describe_argsStandardScheme getScheme() {
        return new describe_argsStandardScheme();
      }
    }

    private static class describe_argsStandardScheme extends StandardScheme<describe_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, describe_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, describe_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class describe_argsTupleSchemeFactory implements SchemeFactory {
      public describe_argsTupleScheme getScheme() {
        return new describe_argsTupleScheme();
      }
    }

    private static class describe_argsTupleScheme extends TupleScheme<describe_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, describe_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, describe_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }

  }

  public static class describe_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<describe_result, describe_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("describe_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new describe_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new describe_resultTupleSchemeFactory());
    }

    public TableDescriptor success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, TableDescriptor.class)));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(describe_result.class, metaDataMap);
    }

    public describe_result() {
    }

    public describe_result(
      TableDescriptor success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public describe_result(describe_result other) {
      if (other.isSetSuccess()) {
        this.success = new TableDescriptor(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public describe_result deepCopy() {
      return new describe_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public TableDescriptor getSuccess() {
      return this.success;
    }

    public describe_result setSuccess(TableDescriptor success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public describe_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TableDescriptor)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof describe_result)
        return this.equals((describe_result)that);
      return false;
    }

    public boolean equals(describe_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(describe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      describe_result typedOther = (describe_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("describe_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class describe_resultStandardSchemeFactory implements SchemeFactory {
      public describe_resultStandardScheme getScheme() {
        return new describe_resultStandardScheme();
      }
    }

    private static class describe_resultStandardScheme extends StandardScheme<describe_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, describe_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.success = new TableDescriptor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, describe_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class describe_resultTupleSchemeFactory implements SchemeFactory {
      public describe_resultTupleScheme getScheme() {
        return new describe_resultTupleScheme();
      }
    }

    private static class describe_resultTupleScheme extends TupleScheme<describe_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, describe_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, describe_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TableDescriptor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class schema_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<schema_args, schema_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("schema_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new schema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new schema_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(schema_args.class, metaDataMap);
    }

    public schema_args() {
    }

    public schema_args(
      String table)
    {
      this();
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public schema_args(schema_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public schema_args deepCopy() {
      return new schema_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public schema_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof schema_args)
        return this.equals((schema_args)that);
      return false;
    }

    public boolean equals(schema_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(schema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      schema_args typedOther = (schema_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("schema_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class schema_argsStandardSchemeFactory implements SchemeFactory {
      public schema_argsStandardScheme getScheme() {
        return new schema_argsStandardScheme();
      }
    }

    private static class schema_argsStandardScheme extends StandardScheme<schema_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, schema_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, schema_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class schema_argsTupleSchemeFactory implements SchemeFactory {
      public schema_argsTupleScheme getScheme() {
        return new schema_argsTupleScheme();
      }
    }

    private static class schema_argsTupleScheme extends TupleScheme<schema_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, schema_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, schema_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }

  }

  public static class schema_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<schema_result, schema_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("schema_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new schema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new schema_resultTupleSchemeFactory());
    }

    public Schema success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, Schema.class)));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(schema_result.class, metaDataMap);
    }

    public schema_result() {
    }

    public schema_result(
      Schema success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public schema_result(schema_result other) {
      if (other.isSetSuccess()) {
        this.success = new Schema(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public schema_result deepCopy() {
      return new schema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public Schema getSuccess() {
      return this.success;
    }

    public schema_result setSuccess(Schema success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public schema_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Schema)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof schema_result)
        return this.equals((schema_result)that);
      return false;
    }

    public boolean equals(schema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(schema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      schema_result typedOther = (schema_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("schema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class schema_resultStandardSchemeFactory implements SchemeFactory {
      public schema_resultStandardScheme getScheme() {
        return new schema_resultStandardScheme();
      }
    }

    private static class schema_resultStandardScheme extends StandardScheme<schema_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, schema_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.success = new Schema();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, schema_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class schema_resultTupleSchemeFactory implements SchemeFactory {
      public schema_resultTupleScheme getScheme() {
        return new schema_resultTupleScheme();
      }
    }

    private static class schema_resultTupleScheme extends TupleScheme<schema_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, schema_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, schema_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Schema();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class parseQuery_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<parseQuery_args, parseQuery_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("parseQuery_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField QUERY_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("query", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parseQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parseQuery_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required
    /**
     * the query to parse.
     */
    public Query query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table"),
      /**
       * the query to parse.
       */
      QUERY((short)2, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUERY, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("query", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, Query.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(parseQuery_args.class, metaDataMap);
    }

    public parseQuery_args() {
    }

    public parseQuery_args(
      String table,
      Query query)
    {
      this();
      this.table = table;
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseQuery_args(parseQuery_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetQuery()) {
        this.query = new Query(other.query);
      }
    }

    public parseQuery_args deepCopy() {
      return new parseQuery_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.query = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public parseQuery_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the query to parse.
     */
    public Query getQuery() {
      return this.query;
    }

    /**
     * the query to parse.
     */
    public parseQuery_args setQuery(Query query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((Query)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parseQuery_args)
        return this.equals((parseQuery_args)that);
      return false;
    }

    public boolean equals(parseQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(parseQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      parseQuery_args typedOther = (parseQuery_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.query, typedOther.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parseQuery_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseQuery_argsStandardSchemeFactory implements SchemeFactory {
      public parseQuery_argsStandardScheme getScheme() {
        return new parseQuery_argsStandardScheme();
      }
    }

    private static class parseQuery_argsStandardScheme extends StandardScheme<parseQuery_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, parseQuery_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.query = new Query();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, parseQuery_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseQuery_argsTupleSchemeFactory implements SchemeFactory {
      public parseQuery_argsTupleScheme getScheme() {
        return new parseQuery_argsTupleScheme();
      }
    }

    private static class parseQuery_argsTupleScheme extends TupleScheme<parseQuery_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, parseQuery_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, parseQuery_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = new Query();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class parseQuery_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<parseQuery_result, parseQuery_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("parseQuery_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parseQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parseQuery_resultTupleSchemeFactory());
    }

    public String success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(parseQuery_result.class, metaDataMap);
    }

    public parseQuery_result() {
    }

    public parseQuery_result(
      String success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseQuery_result(parseQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public parseQuery_result deepCopy() {
      return new parseQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public parseQuery_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public parseQuery_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parseQuery_result)
        return this.equals((parseQuery_result)that);
      return false;
    }

    public boolean equals(parseQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(parseQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      parseQuery_result typedOther = (parseQuery_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parseQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseQuery_resultStandardSchemeFactory implements SchemeFactory {
      public parseQuery_resultStandardScheme getScheme() {
        return new parseQuery_resultStandardScheme();
      }
    }

    private static class parseQuery_resultStandardScheme extends StandardScheme<parseQuery_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, parseQuery_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, parseQuery_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseQuery_resultTupleSchemeFactory implements SchemeFactory {
      public parseQuery_resultTupleScheme getScheme() {
        return new parseQuery_resultTupleScheme();
      }
    }

    private static class parseQuery_resultTupleScheme extends TupleScheme<parseQuery_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, parseQuery_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, parseQuery_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class tableStats_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<tableStats_args, tableStats_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("tableStats_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableStats_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableStats_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(tableStats_args.class, metaDataMap);
    }

    public tableStats_args() {
    }

    public tableStats_args(
      String table)
    {
      this();
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableStats_args(tableStats_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public tableStats_args deepCopy() {
      return new tableStats_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public tableStats_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableStats_args)
        return this.equals((tableStats_args)that);
      return false;
    }

    public boolean equals(tableStats_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableStats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableStats_args typedOther = (tableStats_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableStats_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableStats_argsStandardSchemeFactory implements SchemeFactory {
      public tableStats_argsStandardScheme getScheme() {
        return new tableStats_argsStandardScheme();
      }
    }

    private static class tableStats_argsStandardScheme extends StandardScheme<tableStats_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, tableStats_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, tableStats_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableStats_argsTupleSchemeFactory implements SchemeFactory {
      public tableStats_argsTupleScheme getScheme() {
        return new tableStats_argsTupleScheme();
      }
    }

    private static class tableStats_argsTupleScheme extends TupleScheme<tableStats_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, tableStats_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, tableStats_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }

  }

  public static class tableStats_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<tableStats_result, tableStats_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("tableStats_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableStats_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableStats_resultTupleSchemeFactory());
    }

    public TableStats success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, TableStats.class)));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(tableStats_result.class, metaDataMap);
    }

    public tableStats_result() {
    }

    public tableStats_result(
      TableStats success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableStats_result(tableStats_result other) {
      if (other.isSetSuccess()) {
        this.success = new TableStats(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public tableStats_result deepCopy() {
      return new tableStats_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public TableStats getSuccess() {
      return this.success;
    }

    public tableStats_result setSuccess(TableStats success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public tableStats_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TableStats)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableStats_result)
        return this.equals((tableStats_result)that);
      return false;
    }

    public boolean equals(tableStats_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableStats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableStats_result typedOther = (tableStats_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableStats_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableStats_resultStandardSchemeFactory implements SchemeFactory {
      public tableStats_resultStandardScheme getScheme() {
        return new tableStats_resultStandardScheme();
      }
    }

    private static class tableStats_resultStandardScheme extends StandardScheme<tableStats_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, tableStats_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.success = new TableStats();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, tableStats_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableStats_resultTupleSchemeFactory implements SchemeFactory {
      public tableStats_resultTupleScheme getScheme() {
        return new tableStats_resultTupleScheme();
      }
    }

    private static class tableStats_resultTupleScheme extends TupleScheme<tableStats_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, tableStats_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, tableStats_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TableStats();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class optimize_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<optimize_args, optimize_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("optimize_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField NUMBER_OF_SEGMENTS_PER_SHARD_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("numberOfSegmentsPerShard", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new optimize_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new optimize_argsTupleSchemeFactory());
    }

    /**
     * table the name of the table.
     */
    public String table; // required
    /**
     * the maximum of segments per shard index after the operation is completed.
     */
    public int numberOfSegmentsPerShard; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * table the name of the table.
       */
      TABLE((short)1, "table"),
      /**
       * the maximum of segments per shard index after the operation is completed.
       */
      NUMBER_OF_SEGMENTS_PER_SHARD((short)2, "numberOfSegmentsPerShard");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // NUMBER_OF_SEGMENTS_PER_SHARD
            return NUMBER_OF_SEGMENTS_PER_SHARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMBEROFSEGMENTSPERSHARD_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUMBER_OF_SEGMENTS_PER_SHARD, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("numberOfSegmentsPerShard", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(optimize_args.class, metaDataMap);
    }

    public optimize_args() {
    }

    public optimize_args(
      String table,
      int numberOfSegmentsPerShard)
    {
      this();
      this.table = table;
      this.numberOfSegmentsPerShard = numberOfSegmentsPerShard;
      setNumberOfSegmentsPerShardIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public optimize_args(optimize_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.numberOfSegmentsPerShard = other.numberOfSegmentsPerShard;
    }

    public optimize_args deepCopy() {
      return new optimize_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      setNumberOfSegmentsPerShardIsSet(false);
      this.numberOfSegmentsPerShard = 0;
    }

    /**
     * table the name of the table.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * table the name of the table.
     */
    public optimize_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the maximum of segments per shard index after the operation is completed.
     */
    public int getNumberOfSegmentsPerShard() {
      return this.numberOfSegmentsPerShard;
    }

    /**
     * the maximum of segments per shard index after the operation is completed.
     */
    public optimize_args setNumberOfSegmentsPerShard(int numberOfSegmentsPerShard) {
      this.numberOfSegmentsPerShard = numberOfSegmentsPerShard;
      setNumberOfSegmentsPerShardIsSet(true);
      return this;
    }

    public void unsetNumberOfSegmentsPerShard() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFSEGMENTSPERSHARD_ISSET_ID);
    }

    /** Returns true if field numberOfSegmentsPerShard is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberOfSegmentsPerShard() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFSEGMENTSPERSHARD_ISSET_ID);
    }

    public void setNumberOfSegmentsPerShardIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFSEGMENTSPERSHARD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case NUMBER_OF_SEGMENTS_PER_SHARD:
        if (value == null) {
          unsetNumberOfSegmentsPerShard();
        } else {
          setNumberOfSegmentsPerShard((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case NUMBER_OF_SEGMENTS_PER_SHARD:
        return Integer.valueOf(getNumberOfSegmentsPerShard());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case NUMBER_OF_SEGMENTS_PER_SHARD:
        return isSetNumberOfSegmentsPerShard();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof optimize_args)
        return this.equals((optimize_args)that);
      return false;
    }

    public boolean equals(optimize_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_numberOfSegmentsPerShard = true;
      boolean that_present_numberOfSegmentsPerShard = true;
      if (this_present_numberOfSegmentsPerShard || that_present_numberOfSegmentsPerShard) {
        if (!(this_present_numberOfSegmentsPerShard && that_present_numberOfSegmentsPerShard))
          return false;
        if (this.numberOfSegmentsPerShard != that.numberOfSegmentsPerShard)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(optimize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      optimize_args typedOther = (optimize_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumberOfSegmentsPerShard()).compareTo(typedOther.isSetNumberOfSegmentsPerShard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberOfSegmentsPerShard()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.numberOfSegmentsPerShard, typedOther.numberOfSegmentsPerShard);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("optimize_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numberOfSegmentsPerShard:");
      sb.append(this.numberOfSegmentsPerShard);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class optimize_argsStandardSchemeFactory implements SchemeFactory {
      public optimize_argsStandardScheme getScheme() {
        return new optimize_argsStandardScheme();
      }
    }

    private static class optimize_argsStandardScheme extends StandardScheme<optimize_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, optimize_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUMBER_OF_SEGMENTS_PER_SHARD
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32) {
                struct.numberOfSegmentsPerShard = iprot.readI32();
                struct.setNumberOfSegmentsPerShardIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, optimize_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUMBER_OF_SEGMENTS_PER_SHARD_FIELD_DESC);
        oprot.writeI32(struct.numberOfSegmentsPerShard);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class optimize_argsTupleSchemeFactory implements SchemeFactory {
      public optimize_argsTupleScheme getScheme() {
        return new optimize_argsTupleScheme();
      }
    }

    private static class optimize_argsTupleScheme extends TupleScheme<optimize_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, optimize_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetNumberOfSegmentsPerShard()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetNumberOfSegmentsPerShard()) {
          oprot.writeI32(struct.numberOfSegmentsPerShard);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, optimize_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.numberOfSegmentsPerShard = iprot.readI32();
          struct.setNumberOfSegmentsPerShardIsSet(true);
        }
      }
    }

  }

  public static class optimize_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<optimize_result, optimize_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("optimize_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new optimize_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new optimize_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(optimize_result.class, metaDataMap);
    }

    public optimize_result() {
    }

    public optimize_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public optimize_result(optimize_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public optimize_result deepCopy() {
      return new optimize_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public optimize_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof optimize_result)
        return this.equals((optimize_result)that);
      return false;
    }

    public boolean equals(optimize_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(optimize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      optimize_result typedOther = (optimize_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("optimize_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class optimize_resultStandardSchemeFactory implements SchemeFactory {
      public optimize_resultStandardScheme getScheme() {
        return new optimize_resultStandardScheme();
      }
    }

    private static class optimize_resultStandardScheme extends StandardScheme<optimize_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, optimize_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, optimize_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class optimize_resultTupleSchemeFactory implements SchemeFactory {
      public optimize_resultTupleScheme getScheme() {
        return new optimize_resultTupleScheme();
      }
    }

    private static class optimize_resultTupleScheme extends TupleScheme<optimize_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, optimize_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, optimize_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class createSnapshot_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<createSnapshot_args, createSnapshot_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("createSnapshot_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField NAME_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("name", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createSnapshot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createSnapshot_argsTupleSchemeFactory());
    }

    public String table; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      TABLE((short)1, "table"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("name", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(createSnapshot_args.class, metaDataMap);
    }

    public createSnapshot_args() {
    }

    public createSnapshot_args(
      String table,
      String name)
    {
      this();
      this.table = table;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSnapshot_args(createSnapshot_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public createSnapshot_args deepCopy() {
      return new createSnapshot_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.name = null;
    }

    public String getTable() {
      return this.table;
    }

    public createSnapshot_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public createSnapshot_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSnapshot_args)
        return this.equals((createSnapshot_args)that);
      return false;
    }

    public boolean equals(createSnapshot_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createSnapshot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createSnapshot_args typedOther = (createSnapshot_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createSnapshot_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSnapshot_argsStandardSchemeFactory implements SchemeFactory {
      public createSnapshot_argsStandardScheme getScheme() {
        return new createSnapshot_argsStandardScheme();
      }
    }

    private static class createSnapshot_argsStandardScheme extends StandardScheme<createSnapshot_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, createSnapshot_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, createSnapshot_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSnapshot_argsTupleSchemeFactory implements SchemeFactory {
      public createSnapshot_argsTupleScheme getScheme() {
        return new createSnapshot_argsTupleScheme();
      }
    }

    private static class createSnapshot_argsTupleScheme extends TupleScheme<createSnapshot_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, createSnapshot_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, createSnapshot_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class createSnapshot_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<createSnapshot_result, createSnapshot_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("createSnapshot_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createSnapshot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createSnapshot_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(createSnapshot_result.class, metaDataMap);
    }

    public createSnapshot_result() {
    }

    public createSnapshot_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSnapshot_result(createSnapshot_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public createSnapshot_result deepCopy() {
      return new createSnapshot_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public createSnapshot_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSnapshot_result)
        return this.equals((createSnapshot_result)that);
      return false;
    }

    public boolean equals(createSnapshot_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createSnapshot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createSnapshot_result typedOther = (createSnapshot_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createSnapshot_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSnapshot_resultStandardSchemeFactory implements SchemeFactory {
      public createSnapshot_resultStandardScheme getScheme() {
        return new createSnapshot_resultStandardScheme();
      }
    }

    private static class createSnapshot_resultStandardScheme extends StandardScheme<createSnapshot_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, createSnapshot_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, createSnapshot_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSnapshot_resultTupleSchemeFactory implements SchemeFactory {
      public createSnapshot_resultTupleScheme getScheme() {
        return new createSnapshot_resultTupleScheme();
      }
    }

    private static class createSnapshot_resultTupleScheme extends TupleScheme<createSnapshot_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, createSnapshot_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, createSnapshot_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class removeSnapshot_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<removeSnapshot_args, removeSnapshot_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("removeSnapshot_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField NAME_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("name", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeSnapshot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeSnapshot_argsTupleSchemeFactory());
    }

    public String table; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      TABLE((short)1, "table"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("name", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(removeSnapshot_args.class, metaDataMap);
    }

    public removeSnapshot_args() {
    }

    public removeSnapshot_args(
      String table,
      String name)
    {
      this();
      this.table = table;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSnapshot_args(removeSnapshot_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public removeSnapshot_args deepCopy() {
      return new removeSnapshot_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.name = null;
    }

    public String getTable() {
      return this.table;
    }

    public removeSnapshot_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public removeSnapshot_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSnapshot_args)
        return this.equals((removeSnapshot_args)that);
      return false;
    }

    public boolean equals(removeSnapshot_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeSnapshot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeSnapshot_args typedOther = (removeSnapshot_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSnapshot_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSnapshot_argsStandardSchemeFactory implements SchemeFactory {
      public removeSnapshot_argsStandardScheme getScheme() {
        return new removeSnapshot_argsStandardScheme();
      }
    }

    private static class removeSnapshot_argsStandardScheme extends StandardScheme<removeSnapshot_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, removeSnapshot_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, removeSnapshot_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSnapshot_argsTupleSchemeFactory implements SchemeFactory {
      public removeSnapshot_argsTupleScheme getScheme() {
        return new removeSnapshot_argsTupleScheme();
      }
    }

    private static class removeSnapshot_argsTupleScheme extends TupleScheme<removeSnapshot_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, removeSnapshot_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, removeSnapshot_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class removeSnapshot_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<removeSnapshot_result, removeSnapshot_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("removeSnapshot_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeSnapshot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeSnapshot_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(removeSnapshot_result.class, metaDataMap);
    }

    public removeSnapshot_result() {
    }

    public removeSnapshot_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSnapshot_result(removeSnapshot_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public removeSnapshot_result deepCopy() {
      return new removeSnapshot_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public removeSnapshot_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSnapshot_result)
        return this.equals((removeSnapshot_result)that);
      return false;
    }

    public boolean equals(removeSnapshot_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeSnapshot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeSnapshot_result typedOther = (removeSnapshot_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSnapshot_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSnapshot_resultStandardSchemeFactory implements SchemeFactory {
      public removeSnapshot_resultStandardScheme getScheme() {
        return new removeSnapshot_resultStandardScheme();
      }
    }

    private static class removeSnapshot_resultStandardScheme extends StandardScheme<removeSnapshot_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, removeSnapshot_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, removeSnapshot_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSnapshot_resultTupleSchemeFactory implements SchemeFactory {
      public removeSnapshot_resultTupleScheme getScheme() {
        return new removeSnapshot_resultTupleScheme();
      }
    }

    private static class removeSnapshot_resultTupleScheme extends TupleScheme<removeSnapshot_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, removeSnapshot_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, removeSnapshot_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class listSnapshots_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<listSnapshots_args, listSnapshots_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("listSnapshots_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listSnapshots_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listSnapshots_argsTupleSchemeFactory());
    }

    public String table; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      TABLE((short)1, "table");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(listSnapshots_args.class, metaDataMap);
    }

    public listSnapshots_args() {
    }

    public listSnapshots_args(
      String table)
    {
      this();
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSnapshots_args(listSnapshots_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public listSnapshots_args deepCopy() {
      return new listSnapshots_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
    }

    public String getTable() {
      return this.table;
    }

    public listSnapshots_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSnapshots_args)
        return this.equals((listSnapshots_args)that);
      return false;
    }

    public boolean equals(listSnapshots_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listSnapshots_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listSnapshots_args typedOther = (listSnapshots_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listSnapshots_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listSnapshots_argsStandardSchemeFactory implements SchemeFactory {
      public listSnapshots_argsStandardScheme getScheme() {
        return new listSnapshots_argsStandardScheme();
      }
    }

    private static class listSnapshots_argsStandardScheme extends StandardScheme<listSnapshots_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, listSnapshots_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, listSnapshots_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listSnapshots_argsTupleSchemeFactory implements SchemeFactory {
      public listSnapshots_argsTupleScheme getScheme() {
        return new listSnapshots_argsTupleScheme();
      }
    }

    private static class listSnapshots_argsTupleScheme extends TupleScheme<listSnapshots_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, listSnapshots_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, listSnapshots_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }

  }

  public static class listSnapshots_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<listSnapshots_result, listSnapshots_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("listSnapshots_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listSnapshots_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listSnapshots_resultTupleSchemeFactory());
    }

    public Map<String,List<String>> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.MapMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING), 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
                  new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(listSnapshots_result.class, metaDataMap);
    }

    public listSnapshots_result() {
    }

    public listSnapshots_result(
      Map<String,List<String>> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSnapshots_result(listSnapshots_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<String>> __this__success = new HashMap<String,List<String>>();
        for (Map.Entry<String, List<String>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<String> __this__success_copy_value = new ArrayList<String>();
          for (String other_element_value_element : other_element_value) {
            __this__success_copy_value.add(other_element_value_element);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public listSnapshots_result deepCopy() {
      return new listSnapshots_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<String> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<String>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<String>> getSuccess() {
      return this.success;
    }

    public listSnapshots_result setSuccess(Map<String,List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public listSnapshots_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<String>>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSnapshots_result)
        return this.equals((listSnapshots_result)that);
      return false;
    }

    public boolean equals(listSnapshots_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listSnapshots_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listSnapshots_result typedOther = (listSnapshots_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listSnapshots_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listSnapshots_resultStandardSchemeFactory implements SchemeFactory {
      public listSnapshots_resultStandardScheme getScheme() {
        return new listSnapshots_resultStandardScheme();
      }
    }

    private static class listSnapshots_resultStandardScheme extends StandardScheme<listSnapshots_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, listSnapshots_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map282 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<String>>(2*_map282.size);
                  for (int _i283 = 0; _i283 < _map282.size; ++_i283)
                  {
                    String _key284; // optional
                    List<String> _val285; // required
                    _key284 = iprot.readString();
                    {
                      org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list286 = iprot.readListBegin();
                      _val285 = new ArrayList<String>(_list286.size);
                      for (int _i287 = 0; _i287 < _list286.size; ++_i287)
                      {
                        String _elem288; // required
                        _elem288 = iprot.readString();
                        _val285.add(_elem288);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key284, _val285);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, listSnapshots_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<String>> _iter289 : struct.success.entrySet())
            {
              oprot.writeString(_iter289.getKey());
              {
                oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, _iter289.getValue().size()));
                for (String _iter290 : _iter289.getValue())
                {
                  oprot.writeString(_iter290);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listSnapshots_resultTupleSchemeFactory implements SchemeFactory {
      public listSnapshots_resultTupleScheme getScheme() {
        return new listSnapshots_resultTupleScheme();
      }
    }

    private static class listSnapshots_resultTupleScheme extends TupleScheme<listSnapshots_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, listSnapshots_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<String>> _iter291 : struct.success.entrySet())
            {
              oprot.writeString(_iter291.getKey());
              {
                oprot.writeI32(_iter291.getValue().size());
                for (String _iter292 : _iter291.getValue())
                {
                  oprot.writeString(_iter292);
                }
              }
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, listSnapshots_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map293 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<String>>(2*_map293.size);
            for (int _i294 = 0; _i294 < _map293.size; ++_i294)
            {
              String _key295; // optional
              List<String> _val296; // required
              _key295 = iprot.readString();
              {
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list297 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
                _val296 = new ArrayList<String>(_list297.size);
                for (int _i298 = 0; _i298 < _list297.size; ++_i298)
                {
                  String _elem299; // required
                  _elem299 = iprot.readString();
                  _val296.add(_elem299);
                }
              }
              struct.success.put(_key295, _val296);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class setUser_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<setUser_args, setUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("setUser_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField USER_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("user", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUser_argsTupleSchemeFactory());
    }

    /**
     * the User object.
     */
    public User user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the User object.
       */
      USER((short)1, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("user", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, User.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(setUser_args.class, metaDataMap);
    }

    public setUser_args() {
    }

    public setUser_args(
      User user)
    {
      this();
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUser_args(setUser_args other) {
      if (other.isSetUser()) {
        this.user = new User(other.user);
      }
    }

    public setUser_args deepCopy() {
      return new setUser_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
    }

    /**
     * the User object.
     */
    public User getUser() {
      return this.user;
    }

    /**
     * the User object.
     */
    public setUser_args setUser(User user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((User)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUser_args)
        return this.equals((setUser_args)that);
      return false;
    }

    public boolean equals(setUser_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setUser_args typedOther = (setUser_args)other;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUser_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUser_argsStandardSchemeFactory implements SchemeFactory {
      public setUser_argsStandardScheme getScheme() {
        return new setUser_argsStandardScheme();
      }
    }

    private static class setUser_argsStandardScheme extends StandardScheme<setUser_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, setUser_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.user = new User();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, setUser_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUser_argsTupleSchemeFactory implements SchemeFactory {
      public setUser_argsTupleScheme getScheme() {
        return new setUser_argsTupleScheme();
      }
    }

    private static class setUser_argsTupleScheme extends TupleScheme<setUser_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, setUser_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, setUser_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user = new User();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class query_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("query_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField BLUR_QUERY_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("blurQuery", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required
    /**
     * the query to execute.
     */
    public BlurQuery blurQuery; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table"),
      /**
       * the query to execute.
       */
      BLUR_QUERY((short)2, "blurQuery");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // BLUR_QUERY
            return BLUR_QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.BLUR_QUERY, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("blurQuery", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, BlurQuery.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
    }

    public query_args() {
    }

    public query_args(
      String table,
      BlurQuery blurQuery)
    {
      this();
      this.table = table;
      this.blurQuery = blurQuery;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_args(query_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetBlurQuery()) {
        this.blurQuery = new BlurQuery(other.blurQuery);
      }
    }

    public query_args deepCopy() {
      return new query_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.blurQuery = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public query_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the query to execute.
     */
    public BlurQuery getBlurQuery() {
      return this.blurQuery;
    }

    /**
     * the query to execute.
     */
    public query_args setBlurQuery(BlurQuery blurQuery) {
      this.blurQuery = blurQuery;
      return this;
    }

    public void unsetBlurQuery() {
      this.blurQuery = null;
    }

    /** Returns true if field blurQuery is set (has been assigned a value) and false otherwise */
    public boolean isSetBlurQuery() {
      return this.blurQuery != null;
    }

    public void setBlurQueryIsSet(boolean value) {
      if (!value) {
        this.blurQuery = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case BLUR_QUERY:
        if (value == null) {
          unsetBlurQuery();
        } else {
          setBlurQuery((BlurQuery)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case BLUR_QUERY:
        return getBlurQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case BLUR_QUERY:
        return isSetBlurQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_args)
        return this.equals((query_args)that);
      return false;
    }

    public boolean equals(query_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_blurQuery = true && this.isSetBlurQuery();
      boolean that_present_blurQuery = true && that.isSetBlurQuery();
      if (this_present_blurQuery || that_present_blurQuery) {
        if (!(this_present_blurQuery && that_present_blurQuery))
          return false;
        if (!this.blurQuery.equals(that.blurQuery))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      query_args typedOther = (query_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBlurQuery()).compareTo(typedOther.isSetBlurQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlurQuery()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.blurQuery, typedOther.blurQuery);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("blurQuery:");
      if (this.blurQuery == null) {
        sb.append("null");
      } else {
        sb.append(this.blurQuery);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (blurQuery != null) {
        blurQuery.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_argsStandardSchemeFactory implements SchemeFactory {
      public query_argsStandardScheme getScheme() {
        return new query_argsStandardScheme();
      }
    }

    private static class query_argsStandardScheme extends StandardScheme<query_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, query_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BLUR_QUERY
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.blurQuery = new BlurQuery();
                struct.blurQuery.read(iprot);
                struct.setBlurQueryIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, query_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.blurQuery != null) {
          oprot.writeFieldBegin(BLUR_QUERY_FIELD_DESC);
          struct.blurQuery.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_argsTupleSchemeFactory implements SchemeFactory {
      public query_argsTupleScheme getScheme() {
        return new query_argsTupleScheme();
      }
    }

    private static class query_argsTupleScheme extends TupleScheme<query_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, query_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetBlurQuery()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetBlurQuery()) {
          struct.blurQuery.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, query_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.blurQuery = new BlurQuery();
          struct.blurQuery.read(iprot);
          struct.setBlurQueryIsSet(true);
        }
      }
    }

  }

  public static class query_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("query_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_resultTupleSchemeFactory());
    }

    public BlurResults success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, BlurResults.class)));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
    }

    public query_result() {
    }

    public query_result(
      BlurResults success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_result(query_result other) {
      if (other.isSetSuccess()) {
        this.success = new BlurResults(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public query_result deepCopy() {
      return new query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public BlurResults getSuccess() {
      return this.success;
    }

    public query_result setSuccess(BlurResults success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public query_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BlurResults)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_result)
        return this.equals((query_result)that);
      return false;
    }

    public boolean equals(query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      query_result typedOther = (query_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_resultStandardSchemeFactory implements SchemeFactory {
      public query_resultStandardScheme getScheme() {
        return new query_resultStandardScheme();
      }
    }

    private static class query_resultStandardScheme extends StandardScheme<query_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, query_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.success = new BlurResults();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, query_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_resultTupleSchemeFactory implements SchemeFactory {
      public query_resultTupleScheme getScheme() {
        return new query_resultTupleScheme();
      }
    }

    private static class query_resultTupleScheme extends TupleScheme<query_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, query_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, query_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BlurResults();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class fetchRow_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<fetchRow_args, fetchRow_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("fetchRow_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SELECTOR_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("selector", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchRow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchRow_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required
    /**
     * the Selector to use to fetch the Row or Record.
     */
    public Selector selector; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table"),
      /**
       * the Selector to use to fetch the Row or Record.
       */
      SELECTOR((short)2, "selector");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // SELECTOR
            return SELECTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.SELECTOR, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("selector", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, Selector.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(fetchRow_args.class, metaDataMap);
    }

    public fetchRow_args() {
    }

    public fetchRow_args(
      String table,
      Selector selector)
    {
      this();
      this.table = table;
      this.selector = selector;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchRow_args(fetchRow_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetSelector()) {
        this.selector = new Selector(other.selector);
      }
    }

    public fetchRow_args deepCopy() {
      return new fetchRow_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.selector = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public fetchRow_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the Selector to use to fetch the Row or Record.
     */
    public Selector getSelector() {
      return this.selector;
    }

    /**
     * the Selector to use to fetch the Row or Record.
     */
    public fetchRow_args setSelector(Selector selector) {
      this.selector = selector;
      return this;
    }

    public void unsetSelector() {
      this.selector = null;
    }

    /** Returns true if field selector is set (has been assigned a value) and false otherwise */
    public boolean isSetSelector() {
      return this.selector != null;
    }

    public void setSelectorIsSet(boolean value) {
      if (!value) {
        this.selector = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case SELECTOR:
        if (value == null) {
          unsetSelector();
        } else {
          setSelector((Selector)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case SELECTOR:
        return getSelector();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case SELECTOR:
        return isSetSelector();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchRow_args)
        return this.equals((fetchRow_args)that);
      return false;
    }

    public boolean equals(fetchRow_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_selector = true && this.isSetSelector();
      boolean that_present_selector = true && that.isSetSelector();
      if (this_present_selector || that_present_selector) {
        if (!(this_present_selector && that_present_selector))
          return false;
        if (!this.selector.equals(that.selector))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchRow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchRow_args typedOther = (fetchRow_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSelector()).compareTo(typedOther.isSetSelector());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelector()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.selector, typedOther.selector);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchRow_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("selector:");
      if (this.selector == null) {
        sb.append("null");
      } else {
        sb.append(this.selector);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (selector != null) {
        selector.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchRow_argsStandardSchemeFactory implements SchemeFactory {
      public fetchRow_argsStandardScheme getScheme() {
        return new fetchRow_argsStandardScheme();
      }
    }

    private static class fetchRow_argsStandardScheme extends StandardScheme<fetchRow_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, fetchRow_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SELECTOR
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.selector = new Selector();
                struct.selector.read(iprot);
                struct.setSelectorIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, fetchRow_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.selector != null) {
          oprot.writeFieldBegin(SELECTOR_FIELD_DESC);
          struct.selector.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchRow_argsTupleSchemeFactory implements SchemeFactory {
      public fetchRow_argsTupleScheme getScheme() {
        return new fetchRow_argsTupleScheme();
      }
    }

    private static class fetchRow_argsTupleScheme extends TupleScheme<fetchRow_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, fetchRow_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetSelector()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetSelector()) {
          struct.selector.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, fetchRow_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.selector = new Selector();
          struct.selector.read(iprot);
          struct.setSelectorIsSet(true);
        }
      }
    }

  }

  public static class fetchRow_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<fetchRow_result, fetchRow_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("fetchRow_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchRow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchRow_resultTupleSchemeFactory());
    }

    public FetchResult success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, FetchResult.class)));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(fetchRow_result.class, metaDataMap);
    }

    public fetchRow_result() {
    }

    public fetchRow_result(
      FetchResult success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchRow_result(fetchRow_result other) {
      if (other.isSetSuccess()) {
        this.success = new FetchResult(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public fetchRow_result deepCopy() {
      return new fetchRow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public FetchResult getSuccess() {
      return this.success;
    }

    public fetchRow_result setSuccess(FetchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public fetchRow_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FetchResult)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchRow_result)
        return this.equals((fetchRow_result)that);
      return false;
    }

    public boolean equals(fetchRow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchRow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchRow_result typedOther = (fetchRow_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchRow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchRow_resultStandardSchemeFactory implements SchemeFactory {
      public fetchRow_resultStandardScheme getScheme() {
        return new fetchRow_resultStandardScheme();
      }
    }

    private static class fetchRow_resultStandardScheme extends StandardScheme<fetchRow_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, fetchRow_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.success = new FetchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, fetchRow_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchRow_resultTupleSchemeFactory implements SchemeFactory {
      public fetchRow_resultTupleScheme getScheme() {
        return new fetchRow_resultTupleScheme();
      }
    }

    private static class fetchRow_resultTupleScheme extends TupleScheme<fetchRow_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, fetchRow_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, fetchRow_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new FetchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class fetchRowBatch_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<fetchRowBatch_args, fetchRowBatch_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("fetchRowBatch_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SELECTORS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("selectors", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchRowBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchRowBatch_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required
    /**
     * the Selector to use to fetch the Row or Record.
     */
    public List<Selector> selectors; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table"),
      /**
       * the Selector to use to fetch the Row or Record.
       */
      SELECTORS((short)2, "selectors");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // SELECTORS
            return SELECTORS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.SELECTORS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("selectors", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, Selector.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(fetchRowBatch_args.class, metaDataMap);
    }

    public fetchRowBatch_args() {
    }

    public fetchRowBatch_args(
      String table,
      List<Selector> selectors)
    {
      this();
      this.table = table;
      this.selectors = selectors;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchRowBatch_args(fetchRowBatch_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetSelectors()) {
        List<Selector> __this__selectors = new ArrayList<Selector>();
        for (Selector other_element : other.selectors) {
          __this__selectors.add(new Selector(other_element));
        }
        this.selectors = __this__selectors;
      }
    }

    public fetchRowBatch_args deepCopy() {
      return new fetchRowBatch_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.selectors = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public fetchRowBatch_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getSelectorsSize() {
      return (this.selectors == null) ? 0 : this.selectors.size();
    }

    public java.util.Iterator<Selector> getSelectorsIterator() {
      return (this.selectors == null) ? null : this.selectors.iterator();
    }

    public void addToSelectors(Selector elem) {
      if (this.selectors == null) {
        this.selectors = new ArrayList<Selector>();
      }
      this.selectors.add(elem);
    }

    /**
     * the Selector to use to fetch the Row or Record.
     */
    public List<Selector> getSelectors() {
      return this.selectors;
    }

    /**
     * the Selector to use to fetch the Row or Record.
     */
    public fetchRowBatch_args setSelectors(List<Selector> selectors) {
      this.selectors = selectors;
      return this;
    }

    public void unsetSelectors() {
      this.selectors = null;
    }

    /** Returns true if field selectors is set (has been assigned a value) and false otherwise */
    public boolean isSetSelectors() {
      return this.selectors != null;
    }

    public void setSelectorsIsSet(boolean value) {
      if (!value) {
        this.selectors = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case SELECTORS:
        if (value == null) {
          unsetSelectors();
        } else {
          setSelectors((List<Selector>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case SELECTORS:
        return getSelectors();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case SELECTORS:
        return isSetSelectors();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchRowBatch_args)
        return this.equals((fetchRowBatch_args)that);
      return false;
    }

    public boolean equals(fetchRowBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_selectors = true && this.isSetSelectors();
      boolean that_present_selectors = true && that.isSetSelectors();
      if (this_present_selectors || that_present_selectors) {
        if (!(this_present_selectors && that_present_selectors))
          return false;
        if (!this.selectors.equals(that.selectors))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchRowBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchRowBatch_args typedOther = (fetchRowBatch_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSelectors()).compareTo(typedOther.isSetSelectors());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelectors()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.selectors, typedOther.selectors);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchRowBatch_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("selectors:");
      if (this.selectors == null) {
        sb.append("null");
      } else {
        sb.append(this.selectors);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchRowBatch_argsStandardSchemeFactory implements SchemeFactory {
      public fetchRowBatch_argsStandardScheme getScheme() {
        return new fetchRowBatch_argsStandardScheme();
      }
    }

    private static class fetchRowBatch_argsStandardScheme extends StandardScheme<fetchRowBatch_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, fetchRowBatch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SELECTORS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list300 = iprot.readListBegin();
                  struct.selectors = new ArrayList<Selector>(_list300.size);
                  for (int _i301 = 0; _i301 < _list300.size; ++_i301)
                  {
                    Selector _elem302; // required
                    _elem302 = new Selector();
                    _elem302.read(iprot);
                    struct.selectors.add(_elem302);
                  }
                  iprot.readListEnd();
                }
                struct.setSelectorsIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, fetchRowBatch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.selectors != null) {
          oprot.writeFieldBegin(SELECTORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, struct.selectors.size()));
            for (Selector _iter303 : struct.selectors)
            {
              _iter303.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchRowBatch_argsTupleSchemeFactory implements SchemeFactory {
      public fetchRowBatch_argsTupleScheme getScheme() {
        return new fetchRowBatch_argsTupleScheme();
      }
    }

    private static class fetchRowBatch_argsTupleScheme extends TupleScheme<fetchRowBatch_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, fetchRowBatch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetSelectors()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetSelectors()) {
          {
            oprot.writeI32(struct.selectors.size());
            for (Selector _iter304 : struct.selectors)
            {
              _iter304.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, fetchRowBatch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list305 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, iprot.readI32());
            struct.selectors = new ArrayList<Selector>(_list305.size);
            for (int _i306 = 0; _i306 < _list305.size; ++_i306)
            {
              Selector _elem307; // required
              _elem307 = new Selector();
              _elem307.read(iprot);
              struct.selectors.add(_elem307);
            }
          }
          struct.setSelectorsIsSet(true);
        }
      }
    }

  }

  public static class fetchRowBatch_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<fetchRowBatch_result, fetchRowBatch_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("fetchRowBatch_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchRowBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchRowBatch_resultTupleSchemeFactory());
    }

    public List<FetchResult> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, FetchResult.class))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(fetchRowBatch_result.class, metaDataMap);
    }

    public fetchRowBatch_result() {
    }

    public fetchRowBatch_result(
      List<FetchResult> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchRowBatch_result(fetchRowBatch_result other) {
      if (other.isSetSuccess()) {
        List<FetchResult> __this__success = new ArrayList<FetchResult>();
        for (FetchResult other_element : other.success) {
          __this__success.add(new FetchResult(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public fetchRowBatch_result deepCopy() {
      return new fetchRowBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FetchResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FetchResult elem) {
      if (this.success == null) {
        this.success = new ArrayList<FetchResult>();
      }
      this.success.add(elem);
    }

    public List<FetchResult> getSuccess() {
      return this.success;
    }

    public fetchRowBatch_result setSuccess(List<FetchResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public fetchRowBatch_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FetchResult>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchRowBatch_result)
        return this.equals((fetchRowBatch_result)that);
      return false;
    }

    public boolean equals(fetchRowBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchRowBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchRowBatch_result typedOther = (fetchRowBatch_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchRowBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchRowBatch_resultStandardSchemeFactory implements SchemeFactory {
      public fetchRowBatch_resultStandardScheme getScheme() {
        return new fetchRowBatch_resultStandardScheme();
      }
    }

    private static class fetchRowBatch_resultStandardScheme extends StandardScheme<fetchRowBatch_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, fetchRowBatch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list308 = iprot.readListBegin();
                  struct.success = new ArrayList<FetchResult>(_list308.size);
                  for (int _i309 = 0; _i309 < _list308.size; ++_i309)
                  {
                    FetchResult _elem310; // required
                    _elem310 = new FetchResult();
                    _elem310.read(iprot);
                    struct.success.add(_elem310);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, fetchRowBatch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, struct.success.size()));
            for (FetchResult _iter311 : struct.success)
            {
              _iter311.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchRowBatch_resultTupleSchemeFactory implements SchemeFactory {
      public fetchRowBatch_resultTupleScheme getScheme() {
        return new fetchRowBatch_resultTupleScheme();
      }
    }

    private static class fetchRowBatch_resultTupleScheme extends TupleScheme<fetchRowBatch_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, fetchRowBatch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FetchResult _iter312 : struct.success)
            {
              _iter312.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, fetchRowBatch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list313 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FetchResult>(_list313.size);
            for (int _i314 = 0; _i314 < _list313.size; ++_i314)
            {
              FetchResult _elem315; // required
              _elem315 = new FetchResult();
              _elem315.read(iprot);
              struct.success.add(_elem315);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class mutate_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<mutate_args, mutate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("mutate_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField MUTATION_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("mutation", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mutate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mutate_argsTupleSchemeFactory());
    }

    /**
     * the RowMutation.
     */
    public RowMutation mutation; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the RowMutation.
       */
      MUTATION((short)1, "mutation");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATION
            return MUTATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATION, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("mutation", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, RowMutation.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(mutate_args.class, metaDataMap);
    }

    public mutate_args() {
    }

    public mutate_args(
      RowMutation mutation)
    {
      this();
      this.mutation = mutation;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutate_args(mutate_args other) {
      if (other.isSetMutation()) {
        this.mutation = new RowMutation(other.mutation);
      }
    }

    public mutate_args deepCopy() {
      return new mutate_args(this);
    }

    @Override
    public void clear() {
      this.mutation = null;
    }

    /**
     * the RowMutation.
     */
    public RowMutation getMutation() {
      return this.mutation;
    }

    /**
     * the RowMutation.
     */
    public mutate_args setMutation(RowMutation mutation) {
      this.mutation = mutation;
      return this;
    }

    public void unsetMutation() {
      this.mutation = null;
    }

    /** Returns true if field mutation is set (has been assigned a value) and false otherwise */
    public boolean isSetMutation() {
      return this.mutation != null;
    }

    public void setMutationIsSet(boolean value) {
      if (!value) {
        this.mutation = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATION:
        if (value == null) {
          unsetMutation();
        } else {
          setMutation((RowMutation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATION:
        return getMutation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATION:
        return isSetMutation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutate_args)
        return this.equals((mutate_args)that);
      return false;
    }

    public boolean equals(mutate_args that) {
      if (that == null)
        return false;

      boolean this_present_mutation = true && this.isSetMutation();
      boolean that_present_mutation = true && that.isSetMutation();
      if (this_present_mutation || that_present_mutation) {
        if (!(this_present_mutation && that_present_mutation))
          return false;
        if (!this.mutation.equals(that.mutation))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutate_args typedOther = (mutate_args)other;

      lastComparison = Boolean.valueOf(isSetMutation()).compareTo(typedOther.isSetMutation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutation()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.mutation, typedOther.mutation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutate_args(");
      boolean first = true;

      sb.append("mutation:");
      if (this.mutation == null) {
        sb.append("null");
      } else {
        sb.append(this.mutation);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (mutation != null) {
        mutation.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mutate_argsStandardSchemeFactory implements SchemeFactory {
      public mutate_argsStandardScheme getScheme() {
        return new mutate_argsStandardScheme();
      }
    }

    private static class mutate_argsStandardScheme extends StandardScheme<mutate_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, mutate_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MUTATION
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.mutation = new RowMutation();
                struct.mutation.read(iprot);
                struct.setMutationIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, mutate_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mutation != null) {
          oprot.writeFieldBegin(MUTATION_FIELD_DESC);
          struct.mutation.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mutate_argsTupleSchemeFactory implements SchemeFactory {
      public mutate_argsTupleScheme getScheme() {
        return new mutate_argsTupleScheme();
      }
    }

    private static class mutate_argsTupleScheme extends TupleScheme<mutate_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, mutate_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMutation()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMutation()) {
          struct.mutation.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, mutate_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mutation = new RowMutation();
          struct.mutation.read(iprot);
          struct.setMutationIsSet(true);
        }
      }
    }

  }

  public static class mutate_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<mutate_result, mutate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("mutate_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mutate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mutate_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(mutate_result.class, metaDataMap);
    }

    public mutate_result() {
    }

    public mutate_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutate_result(mutate_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public mutate_result deepCopy() {
      return new mutate_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public mutate_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutate_result)
        return this.equals((mutate_result)that);
      return false;
    }

    public boolean equals(mutate_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutate_result typedOther = (mutate_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutate_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mutate_resultStandardSchemeFactory implements SchemeFactory {
      public mutate_resultStandardScheme getScheme() {
        return new mutate_resultStandardScheme();
      }
    }

    private static class mutate_resultStandardScheme extends StandardScheme<mutate_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, mutate_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, mutate_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mutate_resultTupleSchemeFactory implements SchemeFactory {
      public mutate_resultTupleScheme getScheme() {
        return new mutate_resultTupleScheme();
      }
    }

    private static class mutate_resultTupleScheme extends TupleScheme<mutate_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, mutate_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, mutate_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class enqueueMutate_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<enqueueMutate_args, enqueueMutate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("enqueueMutate_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField MUTATION_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("mutation", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enqueueMutate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enqueueMutate_argsTupleSchemeFactory());
    }

    /**
     * the RowMutation.
     */
    public RowMutation mutation; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the RowMutation.
       */
      MUTATION((short)1, "mutation");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATION
            return MUTATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATION, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("mutation", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, RowMutation.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(enqueueMutate_args.class, metaDataMap);
    }

    public enqueueMutate_args() {
    }

    public enqueueMutate_args(
      RowMutation mutation)
    {
      this();
      this.mutation = mutation;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enqueueMutate_args(enqueueMutate_args other) {
      if (other.isSetMutation()) {
        this.mutation = new RowMutation(other.mutation);
      }
    }

    public enqueueMutate_args deepCopy() {
      return new enqueueMutate_args(this);
    }

    @Override
    public void clear() {
      this.mutation = null;
    }

    /**
     * the RowMutation.
     */
    public RowMutation getMutation() {
      return this.mutation;
    }

    /**
     * the RowMutation.
     */
    public enqueueMutate_args setMutation(RowMutation mutation) {
      this.mutation = mutation;
      return this;
    }

    public void unsetMutation() {
      this.mutation = null;
    }

    /** Returns true if field mutation is set (has been assigned a value) and false otherwise */
    public boolean isSetMutation() {
      return this.mutation != null;
    }

    public void setMutationIsSet(boolean value) {
      if (!value) {
        this.mutation = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATION:
        if (value == null) {
          unsetMutation();
        } else {
          setMutation((RowMutation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATION:
        return getMutation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATION:
        return isSetMutation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enqueueMutate_args)
        return this.equals((enqueueMutate_args)that);
      return false;
    }

    public boolean equals(enqueueMutate_args that) {
      if (that == null)
        return false;

      boolean this_present_mutation = true && this.isSetMutation();
      boolean that_present_mutation = true && that.isSetMutation();
      if (this_present_mutation || that_present_mutation) {
        if (!(this_present_mutation && that_present_mutation))
          return false;
        if (!this.mutation.equals(that.mutation))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(enqueueMutate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      enqueueMutate_args typedOther = (enqueueMutate_args)other;

      lastComparison = Boolean.valueOf(isSetMutation()).compareTo(typedOther.isSetMutation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutation()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.mutation, typedOther.mutation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enqueueMutate_args(");
      boolean first = true;

      sb.append("mutation:");
      if (this.mutation == null) {
        sb.append("null");
      } else {
        sb.append(this.mutation);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (mutation != null) {
        mutation.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enqueueMutate_argsStandardSchemeFactory implements SchemeFactory {
      public enqueueMutate_argsStandardScheme getScheme() {
        return new enqueueMutate_argsStandardScheme();
      }
    }

    private static class enqueueMutate_argsStandardScheme extends StandardScheme<enqueueMutate_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, enqueueMutate_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MUTATION
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.mutation = new RowMutation();
                struct.mutation.read(iprot);
                struct.setMutationIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, enqueueMutate_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mutation != null) {
          oprot.writeFieldBegin(MUTATION_FIELD_DESC);
          struct.mutation.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enqueueMutate_argsTupleSchemeFactory implements SchemeFactory {
      public enqueueMutate_argsTupleScheme getScheme() {
        return new enqueueMutate_argsTupleScheme();
      }
    }

    private static class enqueueMutate_argsTupleScheme extends TupleScheme<enqueueMutate_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enqueueMutate_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMutation()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMutation()) {
          struct.mutation.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enqueueMutate_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mutation = new RowMutation();
          struct.mutation.read(iprot);
          struct.setMutationIsSet(true);
        }
      }
    }

  }

  public static class enqueueMutate_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<enqueueMutate_result, enqueueMutate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("enqueueMutate_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enqueueMutate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enqueueMutate_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(enqueueMutate_result.class, metaDataMap);
    }

    public enqueueMutate_result() {
    }

    public enqueueMutate_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enqueueMutate_result(enqueueMutate_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public enqueueMutate_result deepCopy() {
      return new enqueueMutate_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public enqueueMutate_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enqueueMutate_result)
        return this.equals((enqueueMutate_result)that);
      return false;
    }

    public boolean equals(enqueueMutate_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(enqueueMutate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      enqueueMutate_result typedOther = (enqueueMutate_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enqueueMutate_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enqueueMutate_resultStandardSchemeFactory implements SchemeFactory {
      public enqueueMutate_resultStandardScheme getScheme() {
        return new enqueueMutate_resultStandardScheme();
      }
    }

    private static class enqueueMutate_resultStandardScheme extends StandardScheme<enqueueMutate_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, enqueueMutate_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, enqueueMutate_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enqueueMutate_resultTupleSchemeFactory implements SchemeFactory {
      public enqueueMutate_resultTupleScheme getScheme() {
        return new enqueueMutate_resultTupleScheme();
      }
    }

    private static class enqueueMutate_resultTupleScheme extends TupleScheme<enqueueMutate_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enqueueMutate_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enqueueMutate_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class mutateBatch_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<mutateBatch_args, mutateBatch_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("mutateBatch_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField MUTATIONS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("mutations", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mutateBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mutateBatch_argsTupleSchemeFactory());
    }

    /**
     * the batch of RowMutations.
     */
    public List<RowMutation> mutations; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the batch of RowMutations.
       */
      MUTATIONS((short)1, "mutations");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATIONS
            return MUTATIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATIONS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("mutations", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, RowMutation.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(mutateBatch_args.class, metaDataMap);
    }

    public mutateBatch_args() {
    }

    public mutateBatch_args(
      List<RowMutation> mutations)
    {
      this();
      this.mutations = mutations;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutateBatch_args(mutateBatch_args other) {
      if (other.isSetMutations()) {
        List<RowMutation> __this__mutations = new ArrayList<RowMutation>();
        for (RowMutation other_element : other.mutations) {
          __this__mutations.add(new RowMutation(other_element));
        }
        this.mutations = __this__mutations;
      }
    }

    public mutateBatch_args deepCopy() {
      return new mutateBatch_args(this);
    }

    @Override
    public void clear() {
      this.mutations = null;
    }

    public int getMutationsSize() {
      return (this.mutations == null) ? 0 : this.mutations.size();
    }

    public java.util.Iterator<RowMutation> getMutationsIterator() {
      return (this.mutations == null) ? null : this.mutations.iterator();
    }

    public void addToMutations(RowMutation elem) {
      if (this.mutations == null) {
        this.mutations = new ArrayList<RowMutation>();
      }
      this.mutations.add(elem);
    }

    /**
     * the batch of RowMutations.
     */
    public List<RowMutation> getMutations() {
      return this.mutations;
    }

    /**
     * the batch of RowMutations.
     */
    public mutateBatch_args setMutations(List<RowMutation> mutations) {
      this.mutations = mutations;
      return this;
    }

    public void unsetMutations() {
      this.mutations = null;
    }

    /** Returns true if field mutations is set (has been assigned a value) and false otherwise */
    public boolean isSetMutations() {
      return this.mutations != null;
    }

    public void setMutationsIsSet(boolean value) {
      if (!value) {
        this.mutations = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATIONS:
        if (value == null) {
          unsetMutations();
        } else {
          setMutations((List<RowMutation>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATIONS:
        return getMutations();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATIONS:
        return isSetMutations();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutateBatch_args)
        return this.equals((mutateBatch_args)that);
      return false;
    }

    public boolean equals(mutateBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_mutations = true && this.isSetMutations();
      boolean that_present_mutations = true && that.isSetMutations();
      if (this_present_mutations || that_present_mutations) {
        if (!(this_present_mutations && that_present_mutations))
          return false;
        if (!this.mutations.equals(that.mutations))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutateBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutateBatch_args typedOther = (mutateBatch_args)other;

      lastComparison = Boolean.valueOf(isSetMutations()).compareTo(typedOther.isSetMutations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutations()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.mutations, typedOther.mutations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutateBatch_args(");
      boolean first = true;

      sb.append("mutations:");
      if (this.mutations == null) {
        sb.append("null");
      } else {
        sb.append(this.mutations);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mutateBatch_argsStandardSchemeFactory implements SchemeFactory {
      public mutateBatch_argsStandardScheme getScheme() {
        return new mutateBatch_argsStandardScheme();
      }
    }

    private static class mutateBatch_argsStandardScheme extends StandardScheme<mutateBatch_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, mutateBatch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MUTATIONS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list316 = iprot.readListBegin();
                  struct.mutations = new ArrayList<RowMutation>(_list316.size);
                  for (int _i317 = 0; _i317 < _list316.size; ++_i317)
                  {
                    RowMutation _elem318; // required
                    _elem318 = new RowMutation();
                    _elem318.read(iprot);
                    struct.mutations.add(_elem318);
                  }
                  iprot.readListEnd();
                }
                struct.setMutationsIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, mutateBatch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mutations != null) {
          oprot.writeFieldBegin(MUTATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, struct.mutations.size()));
            for (RowMutation _iter319 : struct.mutations)
            {
              _iter319.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mutateBatch_argsTupleSchemeFactory implements SchemeFactory {
      public mutateBatch_argsTupleScheme getScheme() {
        return new mutateBatch_argsTupleScheme();
      }
    }

    private static class mutateBatch_argsTupleScheme extends TupleScheme<mutateBatch_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, mutateBatch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMutations()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMutations()) {
          {
            oprot.writeI32(struct.mutations.size());
            for (RowMutation _iter320 : struct.mutations)
            {
              _iter320.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, mutateBatch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list321 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, iprot.readI32());
            struct.mutations = new ArrayList<RowMutation>(_list321.size);
            for (int _i322 = 0; _i322 < _list321.size; ++_i322)
            {
              RowMutation _elem323; // required
              _elem323 = new RowMutation();
              _elem323.read(iprot);
              struct.mutations.add(_elem323);
            }
          }
          struct.setMutationsIsSet(true);
        }
      }
    }

  }

  public static class mutateBatch_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<mutateBatch_result, mutateBatch_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("mutateBatch_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mutateBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mutateBatch_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(mutateBatch_result.class, metaDataMap);
    }

    public mutateBatch_result() {
    }

    public mutateBatch_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutateBatch_result(mutateBatch_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public mutateBatch_result deepCopy() {
      return new mutateBatch_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public mutateBatch_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutateBatch_result)
        return this.equals((mutateBatch_result)that);
      return false;
    }

    public boolean equals(mutateBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutateBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutateBatch_result typedOther = (mutateBatch_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutateBatch_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mutateBatch_resultStandardSchemeFactory implements SchemeFactory {
      public mutateBatch_resultStandardScheme getScheme() {
        return new mutateBatch_resultStandardScheme();
      }
    }

    private static class mutateBatch_resultStandardScheme extends StandardScheme<mutateBatch_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, mutateBatch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, mutateBatch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mutateBatch_resultTupleSchemeFactory implements SchemeFactory {
      public mutateBatch_resultTupleScheme getScheme() {
        return new mutateBatch_resultTupleScheme();
      }
    }

    private static class mutateBatch_resultTupleScheme extends TupleScheme<mutateBatch_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, mutateBatch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, mutateBatch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class enqueueMutateBatch_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<enqueueMutateBatch_args, enqueueMutateBatch_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("enqueueMutateBatch_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField MUTATIONS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("mutations", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enqueueMutateBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enqueueMutateBatch_argsTupleSchemeFactory());
    }

    /**
     * the batch of RowMutations.
     */
    public List<RowMutation> mutations; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the batch of RowMutations.
       */
      MUTATIONS((short)1, "mutations");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATIONS
            return MUTATIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATIONS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("mutations", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, RowMutation.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(enqueueMutateBatch_args.class, metaDataMap);
    }

    public enqueueMutateBatch_args() {
    }

    public enqueueMutateBatch_args(
      List<RowMutation> mutations)
    {
      this();
      this.mutations = mutations;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enqueueMutateBatch_args(enqueueMutateBatch_args other) {
      if (other.isSetMutations()) {
        List<RowMutation> __this__mutations = new ArrayList<RowMutation>();
        for (RowMutation other_element : other.mutations) {
          __this__mutations.add(new RowMutation(other_element));
        }
        this.mutations = __this__mutations;
      }
    }

    public enqueueMutateBatch_args deepCopy() {
      return new enqueueMutateBatch_args(this);
    }

    @Override
    public void clear() {
      this.mutations = null;
    }

    public int getMutationsSize() {
      return (this.mutations == null) ? 0 : this.mutations.size();
    }

    public java.util.Iterator<RowMutation> getMutationsIterator() {
      return (this.mutations == null) ? null : this.mutations.iterator();
    }

    public void addToMutations(RowMutation elem) {
      if (this.mutations == null) {
        this.mutations = new ArrayList<RowMutation>();
      }
      this.mutations.add(elem);
    }

    /**
     * the batch of RowMutations.
     */
    public List<RowMutation> getMutations() {
      return this.mutations;
    }

    /**
     * the batch of RowMutations.
     */
    public enqueueMutateBatch_args setMutations(List<RowMutation> mutations) {
      this.mutations = mutations;
      return this;
    }

    public void unsetMutations() {
      this.mutations = null;
    }

    /** Returns true if field mutations is set (has been assigned a value) and false otherwise */
    public boolean isSetMutations() {
      return this.mutations != null;
    }

    public void setMutationsIsSet(boolean value) {
      if (!value) {
        this.mutations = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATIONS:
        if (value == null) {
          unsetMutations();
        } else {
          setMutations((List<RowMutation>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATIONS:
        return getMutations();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATIONS:
        return isSetMutations();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enqueueMutateBatch_args)
        return this.equals((enqueueMutateBatch_args)that);
      return false;
    }

    public boolean equals(enqueueMutateBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_mutations = true && this.isSetMutations();
      boolean that_present_mutations = true && that.isSetMutations();
      if (this_present_mutations || that_present_mutations) {
        if (!(this_present_mutations && that_present_mutations))
          return false;
        if (!this.mutations.equals(that.mutations))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(enqueueMutateBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      enqueueMutateBatch_args typedOther = (enqueueMutateBatch_args)other;

      lastComparison = Boolean.valueOf(isSetMutations()).compareTo(typedOther.isSetMutations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutations()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.mutations, typedOther.mutations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enqueueMutateBatch_args(");
      boolean first = true;

      sb.append("mutations:");
      if (this.mutations == null) {
        sb.append("null");
      } else {
        sb.append(this.mutations);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enqueueMutateBatch_argsStandardSchemeFactory implements SchemeFactory {
      public enqueueMutateBatch_argsStandardScheme getScheme() {
        return new enqueueMutateBatch_argsStandardScheme();
      }
    }

    private static class enqueueMutateBatch_argsStandardScheme extends StandardScheme<enqueueMutateBatch_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, enqueueMutateBatch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MUTATIONS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list324 = iprot.readListBegin();
                  struct.mutations = new ArrayList<RowMutation>(_list324.size);
                  for (int _i325 = 0; _i325 < _list324.size; ++_i325)
                  {
                    RowMutation _elem326; // required
                    _elem326 = new RowMutation();
                    _elem326.read(iprot);
                    struct.mutations.add(_elem326);
                  }
                  iprot.readListEnd();
                }
                struct.setMutationsIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, enqueueMutateBatch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mutations != null) {
          oprot.writeFieldBegin(MUTATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, struct.mutations.size()));
            for (RowMutation _iter327 : struct.mutations)
            {
              _iter327.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enqueueMutateBatch_argsTupleSchemeFactory implements SchemeFactory {
      public enqueueMutateBatch_argsTupleScheme getScheme() {
        return new enqueueMutateBatch_argsTupleScheme();
      }
    }

    private static class enqueueMutateBatch_argsTupleScheme extends TupleScheme<enqueueMutateBatch_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enqueueMutateBatch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMutations()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMutations()) {
          {
            oprot.writeI32(struct.mutations.size());
            for (RowMutation _iter328 : struct.mutations)
            {
              _iter328.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enqueueMutateBatch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list329 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, iprot.readI32());
            struct.mutations = new ArrayList<RowMutation>(_list329.size);
            for (int _i330 = 0; _i330 < _list329.size; ++_i330)
            {
              RowMutation _elem331; // required
              _elem331 = new RowMutation();
              _elem331.read(iprot);
              struct.mutations.add(_elem331);
            }
          }
          struct.setMutationsIsSet(true);
        }
      }
    }

  }

  public static class enqueueMutateBatch_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<enqueueMutateBatch_result, enqueueMutateBatch_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("enqueueMutateBatch_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enqueueMutateBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enqueueMutateBatch_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(enqueueMutateBatch_result.class, metaDataMap);
    }

    public enqueueMutateBatch_result() {
    }

    public enqueueMutateBatch_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enqueueMutateBatch_result(enqueueMutateBatch_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public enqueueMutateBatch_result deepCopy() {
      return new enqueueMutateBatch_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public enqueueMutateBatch_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enqueueMutateBatch_result)
        return this.equals((enqueueMutateBatch_result)that);
      return false;
    }

    public boolean equals(enqueueMutateBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(enqueueMutateBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      enqueueMutateBatch_result typedOther = (enqueueMutateBatch_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enqueueMutateBatch_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enqueueMutateBatch_resultStandardSchemeFactory implements SchemeFactory {
      public enqueueMutateBatch_resultStandardScheme getScheme() {
        return new enqueueMutateBatch_resultStandardScheme();
      }
    }

    private static class enqueueMutateBatch_resultStandardScheme extends StandardScheme<enqueueMutateBatch_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, enqueueMutateBatch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, enqueueMutateBatch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enqueueMutateBatch_resultTupleSchemeFactory implements SchemeFactory {
      public enqueueMutateBatch_resultTupleScheme getScheme() {
        return new enqueueMutateBatch_resultTupleScheme();
      }
    }

    private static class enqueueMutateBatch_resultTupleScheme extends TupleScheme<enqueueMutateBatch_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enqueueMutateBatch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enqueueMutateBatch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class cancelQuery_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<cancelQuery_args, cancelQuery_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("cancelQuery_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField UUID_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("uuid", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelQuery_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required
    /**
     * the uuid of the query.
     */
    public String uuid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table"),
      /**
       * the uuid of the query.
       */
      UUID((short)2, "uuid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // UUID
            return UUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.UUID, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("uuid", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(cancelQuery_args.class, metaDataMap);
    }

    public cancelQuery_args() {
    }

    public cancelQuery_args(
      String table,
      String uuid)
    {
      this();
      this.table = table;
      this.uuid = uuid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelQuery_args(cancelQuery_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetUuid()) {
        this.uuid = other.uuid;
      }
    }

    public cancelQuery_args deepCopy() {
      return new cancelQuery_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.uuid = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public cancelQuery_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the uuid of the query.
     */
    public String getUuid() {
      return this.uuid;
    }

    /**
     * the uuid of the query.
     */
    public cancelQuery_args setUuid(String uuid) {
      this.uuid = uuid;
      return this;
    }

    public void unsetUuid() {
      this.uuid = null;
    }

    /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetUuid() {
      return this.uuid != null;
    }

    public void setUuidIsSet(boolean value) {
      if (!value) {
        this.uuid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case UUID:
        if (value == null) {
          unsetUuid();
        } else {
          setUuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case UUID:
        return getUuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case UUID:
        return isSetUuid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelQuery_args)
        return this.equals((cancelQuery_args)that);
      return false;
    }

    public boolean equals(cancelQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_uuid = true && this.isSetUuid();
      boolean that_present_uuid = true && that.isSetUuid();
      if (this_present_uuid || that_present_uuid) {
        if (!(this_present_uuid && that_present_uuid))
          return false;
        if (!this.uuid.equals(that.uuid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cancelQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cancelQuery_args typedOther = (cancelQuery_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUuid()).compareTo(typedOther.isSetUuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUuid()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.uuid, typedOther.uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelQuery_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelQuery_argsStandardSchemeFactory implements SchemeFactory {
      public cancelQuery_argsStandardScheme getScheme() {
        return new cancelQuery_argsStandardScheme();
      }
    }

    private static class cancelQuery_argsStandardScheme extends StandardScheme<cancelQuery_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, cancelQuery_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UUID
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.uuid = iprot.readString();
                struct.setUuidIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, cancelQuery_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.uuid != null) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelQuery_argsTupleSchemeFactory implements SchemeFactory {
      public cancelQuery_argsTupleScheme getScheme() {
        return new cancelQuery_argsTupleScheme();
      }
    }

    private static class cancelQuery_argsTupleScheme extends TupleScheme<cancelQuery_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, cancelQuery_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetUuid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetUuid()) {
          oprot.writeString(struct.uuid);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, cancelQuery_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uuid = iprot.readString();
          struct.setUuidIsSet(true);
        }
      }
    }

  }

  public static class cancelQuery_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<cancelQuery_result, cancelQuery_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("cancelQuery_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelQuery_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(cancelQuery_result.class, metaDataMap);
    }

    public cancelQuery_result() {
    }

    public cancelQuery_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelQuery_result(cancelQuery_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public cancelQuery_result deepCopy() {
      return new cancelQuery_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public cancelQuery_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelQuery_result)
        return this.equals((cancelQuery_result)that);
      return false;
    }

    public boolean equals(cancelQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cancelQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cancelQuery_result typedOther = (cancelQuery_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelQuery_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelQuery_resultStandardSchemeFactory implements SchemeFactory {
      public cancelQuery_resultStandardScheme getScheme() {
        return new cancelQuery_resultStandardScheme();
      }
    }

    private static class cancelQuery_resultStandardScheme extends StandardScheme<cancelQuery_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, cancelQuery_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, cancelQuery_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelQuery_resultTupleSchemeFactory implements SchemeFactory {
      public cancelQuery_resultTupleScheme getScheme() {
        return new cancelQuery_resultTupleScheme();
      }
    }

    private static class cancelQuery_resultTupleScheme extends TupleScheme<cancelQuery_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, cancelQuery_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, cancelQuery_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class queryStatusIdList_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<queryStatusIdList_args, queryStatusIdList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("queryStatusIdList_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStatusIdList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStatusIdList_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(queryStatusIdList_args.class, metaDataMap);
    }

    public queryStatusIdList_args() {
    }

    public queryStatusIdList_args(
      String table)
    {
      this();
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStatusIdList_args(queryStatusIdList_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public queryStatusIdList_args deepCopy() {
      return new queryStatusIdList_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public queryStatusIdList_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStatusIdList_args)
        return this.equals((queryStatusIdList_args)that);
      return false;
    }

    public boolean equals(queryStatusIdList_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryStatusIdList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryStatusIdList_args typedOther = (queryStatusIdList_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStatusIdList_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStatusIdList_argsStandardSchemeFactory implements SchemeFactory {
      public queryStatusIdList_argsStandardScheme getScheme() {
        return new queryStatusIdList_argsStandardScheme();
      }
    }

    private static class queryStatusIdList_argsStandardScheme extends StandardScheme<queryStatusIdList_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, queryStatusIdList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, queryStatusIdList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStatusIdList_argsTupleSchemeFactory implements SchemeFactory {
      public queryStatusIdList_argsTupleScheme getScheme() {
        return new queryStatusIdList_argsTupleScheme();
      }
    }

    private static class queryStatusIdList_argsTupleScheme extends TupleScheme<queryStatusIdList_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, queryStatusIdList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, queryStatusIdList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }

  }

  public static class queryStatusIdList_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<queryStatusIdList_result, queryStatusIdList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("queryStatusIdList_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStatusIdList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStatusIdList_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(queryStatusIdList_result.class, metaDataMap);
    }

    public queryStatusIdList_result() {
    }

    public queryStatusIdList_result(
      List<String> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStatusIdList_result(queryStatusIdList_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public queryStatusIdList_result deepCopy() {
      return new queryStatusIdList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public queryStatusIdList_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public queryStatusIdList_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStatusIdList_result)
        return this.equals((queryStatusIdList_result)that);
      return false;
    }

    public boolean equals(queryStatusIdList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryStatusIdList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryStatusIdList_result typedOther = (queryStatusIdList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStatusIdList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStatusIdList_resultStandardSchemeFactory implements SchemeFactory {
      public queryStatusIdList_resultStandardScheme getScheme() {
        return new queryStatusIdList_resultStandardScheme();
      }
    }

    private static class queryStatusIdList_resultStandardScheme extends StandardScheme<queryStatusIdList_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, queryStatusIdList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list332 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list332.size);
                  for (int _i333 = 0; _i333 < _list332.size; ++_i333)
                  {
                    String _elem334; // required
                    _elem334 = iprot.readString();
                    struct.success.add(_elem334);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, queryStatusIdList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.success.size()));
            for (String _iter335 : struct.success)
            {
              oprot.writeString(_iter335);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStatusIdList_resultTupleSchemeFactory implements SchemeFactory {
      public queryStatusIdList_resultTupleScheme getScheme() {
        return new queryStatusIdList_resultTupleScheme();
      }
    }

    private static class queryStatusIdList_resultTupleScheme extends TupleScheme<queryStatusIdList_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, queryStatusIdList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter336 : struct.success)
            {
              oprot.writeString(_iter336);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, queryStatusIdList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list337 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list337.size);
            for (int _i338 = 0; _i338 < _list337.size; ++_i338)
            {
              String _elem339; // required
              _elem339 = iprot.readString();
              struct.success.add(_elem339);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class queryStatusById_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<queryStatusById_args, queryStatusById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("queryStatusById_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField UUID_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("uuid", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStatusById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStatusById_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required
    /**
     * the uuid of the query.
     */
    public String uuid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table"),
      /**
       * the uuid of the query.
       */
      UUID((short)2, "uuid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // UUID
            return UUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.UUID, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("uuid", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(queryStatusById_args.class, metaDataMap);
    }

    public queryStatusById_args() {
    }

    public queryStatusById_args(
      String table,
      String uuid)
    {
      this();
      this.table = table;
      this.uuid = uuid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStatusById_args(queryStatusById_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetUuid()) {
        this.uuid = other.uuid;
      }
    }

    public queryStatusById_args deepCopy() {
      return new queryStatusById_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.uuid = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public queryStatusById_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the uuid of the query.
     */
    public String getUuid() {
      return this.uuid;
    }

    /**
     * the uuid of the query.
     */
    public queryStatusById_args setUuid(String uuid) {
      this.uuid = uuid;
      return this;
    }

    public void unsetUuid() {
      this.uuid = null;
    }

    /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetUuid() {
      return this.uuid != null;
    }

    public void setUuidIsSet(boolean value) {
      if (!value) {
        this.uuid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case UUID:
        if (value == null) {
          unsetUuid();
        } else {
          setUuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case UUID:
        return getUuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case UUID:
        return isSetUuid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStatusById_args)
        return this.equals((queryStatusById_args)that);
      return false;
    }

    public boolean equals(queryStatusById_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_uuid = true && this.isSetUuid();
      boolean that_present_uuid = true && that.isSetUuid();
      if (this_present_uuid || that_present_uuid) {
        if (!(this_present_uuid && that_present_uuid))
          return false;
        if (!this.uuid.equals(that.uuid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryStatusById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryStatusById_args typedOther = (queryStatusById_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUuid()).compareTo(typedOther.isSetUuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUuid()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.uuid, typedOther.uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStatusById_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStatusById_argsStandardSchemeFactory implements SchemeFactory {
      public queryStatusById_argsStandardScheme getScheme() {
        return new queryStatusById_argsStandardScheme();
      }
    }

    private static class queryStatusById_argsStandardScheme extends StandardScheme<queryStatusById_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, queryStatusById_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UUID
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.uuid = iprot.readString();
                struct.setUuidIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, queryStatusById_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.uuid != null) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStatusById_argsTupleSchemeFactory implements SchemeFactory {
      public queryStatusById_argsTupleScheme getScheme() {
        return new queryStatusById_argsTupleScheme();
      }
    }

    private static class queryStatusById_argsTupleScheme extends TupleScheme<queryStatusById_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, queryStatusById_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetUuid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetUuid()) {
          oprot.writeString(struct.uuid);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, queryStatusById_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uuid = iprot.readString();
          struct.setUuidIsSet(true);
        }
      }
    }

  }

  public static class queryStatusById_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<queryStatusById_result, queryStatusById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("queryStatusById_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStatusById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStatusById_resultTupleSchemeFactory());
    }

    public BlurQueryStatus success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, BlurQueryStatus.class)));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(queryStatusById_result.class, metaDataMap);
    }

    public queryStatusById_result() {
    }

    public queryStatusById_result(
      BlurQueryStatus success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStatusById_result(queryStatusById_result other) {
      if (other.isSetSuccess()) {
        this.success = new BlurQueryStatus(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public queryStatusById_result deepCopy() {
      return new queryStatusById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public BlurQueryStatus getSuccess() {
      return this.success;
    }

    public queryStatusById_result setSuccess(BlurQueryStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public queryStatusById_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BlurQueryStatus)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStatusById_result)
        return this.equals((queryStatusById_result)that);
      return false;
    }

    public boolean equals(queryStatusById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryStatusById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryStatusById_result typedOther = (queryStatusById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStatusById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStatusById_resultStandardSchemeFactory implements SchemeFactory {
      public queryStatusById_resultStandardScheme getScheme() {
        return new queryStatusById_resultStandardScheme();
      }
    }

    private static class queryStatusById_resultStandardScheme extends StandardScheme<queryStatusById_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, queryStatusById_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.success = new BlurQueryStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, queryStatusById_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStatusById_resultTupleSchemeFactory implements SchemeFactory {
      public queryStatusById_resultTupleScheme getScheme() {
        return new queryStatusById_resultTupleScheme();
      }
    }

    private static class queryStatusById_resultTupleScheme extends TupleScheme<queryStatusById_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, queryStatusById_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, queryStatusById_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BlurQueryStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class terms_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<terms_args, terms_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("terms_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField COLUMN_FAMILY_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("columnFamily", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)2);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("columnName", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)3);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField START_WITH_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("startWith", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)4);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SIZE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("size", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I16, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new terms_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new terms_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required
    /**
     * the column family. If the frequency requested is a system field like "rowid", "recordid", "family", etc then columnFamily can be null.
     */
    public String columnFamily; // required
    /**
     * the column name.
     */
    public String columnName; // required
    /**
     * the term to start with assuming that you are paging through the term list.
     */
    public String startWith; // required
    /**
     * the number to fetch at once.
     */
    public short size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table"),
      /**
       * the column family. If the frequency requested is a system field like "rowid", "recordid", "family", etc then columnFamily can be null.
       */
      COLUMN_FAMILY((short)2, "columnFamily"),
      /**
       * the column name.
       */
      COLUMN_NAME((short)3, "columnName"),
      /**
       * the term to start with assuming that you are paging through the term list.
       */
      START_WITH((short)4, "startWith"),
      /**
       * the number to fetch at once.
       */
      SIZE((short)5, "size");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // COLUMN_FAMILY
            return COLUMN_FAMILY;
          case 3: // COLUMN_NAME
            return COLUMN_NAME;
          case 4: // START_WITH
            return START_WITH;
          case 5: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SIZE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN_FAMILY, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("columnFamily", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN_NAME, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("columnName", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_WITH, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("startWith", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.SIZE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("size", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(terms_args.class, metaDataMap);
    }

    public terms_args() {
    }

    public terms_args(
      String table,
      String columnFamily,
      String columnName,
      String startWith,
      short size)
    {
      this();
      this.table = table;
      this.columnFamily = columnFamily;
      this.columnName = columnName;
      this.startWith = startWith;
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terms_args(terms_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetColumnFamily()) {
        this.columnFamily = other.columnFamily;
      }
      if (other.isSetColumnName()) {
        this.columnName = other.columnName;
      }
      if (other.isSetStartWith()) {
        this.startWith = other.startWith;
      }
      this.size = other.size;
    }

    public terms_args deepCopy() {
      return new terms_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.columnFamily = null;
      this.columnName = null;
      this.startWith = null;
      setSizeIsSet(false);
      this.size = 0;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public terms_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the column family. If the frequency requested is a system field like "rowid", "recordid", "family", etc then columnFamily can be null.
     */
    public String getColumnFamily() {
      return this.columnFamily;
    }

    /**
     * the column family. If the frequency requested is a system field like "rowid", "recordid", "family", etc then columnFamily can be null.
     */
    public terms_args setColumnFamily(String columnFamily) {
      this.columnFamily = columnFamily;
      return this;
    }

    public void unsetColumnFamily() {
      this.columnFamily = null;
    }

    /** Returns true if field columnFamily is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnFamily() {
      return this.columnFamily != null;
    }

    public void setColumnFamilyIsSet(boolean value) {
      if (!value) {
        this.columnFamily = null;
      }
    }

    /**
     * the column name.
     */
    public String getColumnName() {
      return this.columnName;
    }

    /**
     * the column name.
     */
    public terms_args setColumnName(String columnName) {
      this.columnName = columnName;
      return this;
    }

    public void unsetColumnName() {
      this.columnName = null;
    }

    /** Returns true if field columnName is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnName() {
      return this.columnName != null;
    }

    public void setColumnNameIsSet(boolean value) {
      if (!value) {
        this.columnName = null;
      }
    }

    /**
     * the term to start with assuming that you are paging through the term list.
     */
    public String getStartWith() {
      return this.startWith;
    }

    /**
     * the term to start with assuming that you are paging through the term list.
     */
    public terms_args setStartWith(String startWith) {
      this.startWith = startWith;
      return this;
    }

    public void unsetStartWith() {
      this.startWith = null;
    }

    /** Returns true if field startWith is set (has been assigned a value) and false otherwise */
    public boolean isSetStartWith() {
      return this.startWith != null;
    }

    public void setStartWithIsSet(boolean value) {
      if (!value) {
        this.startWith = null;
      }
    }

    /**
     * the number to fetch at once.
     */
    public short getSize() {
      return this.size;
    }

    /**
     * the number to fetch at once.
     */
    public terms_args setSize(short size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case COLUMN_FAMILY:
        if (value == null) {
          unsetColumnFamily();
        } else {
          setColumnFamily((String)value);
        }
        break;

      case COLUMN_NAME:
        if (value == null) {
          unsetColumnName();
        } else {
          setColumnName((String)value);
        }
        break;

      case START_WITH:
        if (value == null) {
          unsetStartWith();
        } else {
          setStartWith((String)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case COLUMN_FAMILY:
        return getColumnFamily();

      case COLUMN_NAME:
        return getColumnName();

      case START_WITH:
        return getStartWith();

      case SIZE:
        return Short.valueOf(getSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case COLUMN_FAMILY:
        return isSetColumnFamily();
      case COLUMN_NAME:
        return isSetColumnName();
      case START_WITH:
        return isSetStartWith();
      case SIZE:
        return isSetSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terms_args)
        return this.equals((terms_args)that);
      return false;
    }

    public boolean equals(terms_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_columnFamily = true && this.isSetColumnFamily();
      boolean that_present_columnFamily = true && that.isSetColumnFamily();
      if (this_present_columnFamily || that_present_columnFamily) {
        if (!(this_present_columnFamily && that_present_columnFamily))
          return false;
        if (!this.columnFamily.equals(that.columnFamily))
          return false;
      }

      boolean this_present_columnName = true && this.isSetColumnName();
      boolean that_present_columnName = true && that.isSetColumnName();
      if (this_present_columnName || that_present_columnName) {
        if (!(this_present_columnName && that_present_columnName))
          return false;
        if (!this.columnName.equals(that.columnName))
          return false;
      }

      boolean this_present_startWith = true && this.isSetStartWith();
      boolean that_present_startWith = true && that.isSetStartWith();
      if (this_present_startWith || that_present_startWith) {
        if (!(this_present_startWith && that_present_startWith))
          return false;
        if (!this.startWith.equals(that.startWith))
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(terms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      terms_args typedOther = (terms_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnFamily()).compareTo(typedOther.isSetColumnFamily());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnFamily()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.columnFamily, typedOther.columnFamily);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnName()).compareTo(typedOther.isSetColumnName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnName()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.columnName, typedOther.columnName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartWith()).compareTo(typedOther.isSetStartWith());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartWith()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.startWith, typedOther.startWith);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.size, typedOther.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("terms_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnFamily:");
      if (this.columnFamily == null) {
        sb.append("null");
      } else {
        sb.append(this.columnFamily);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnName:");
      if (this.columnName == null) {
        sb.append("null");
      } else {
        sb.append(this.columnName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startWith:");
      if (this.startWith == null) {
        sb.append("null");
      } else {
        sb.append(this.startWith);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terms_argsStandardSchemeFactory implements SchemeFactory {
      public terms_argsStandardScheme getScheme() {
        return new terms_argsStandardScheme();
      }
    }

    private static class terms_argsStandardScheme extends StandardScheme<terms_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, terms_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN_FAMILY
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.columnFamily = iprot.readString();
                struct.setColumnFamilyIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_NAME
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.columnName = iprot.readString();
                struct.setColumnNameIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_WITH
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.startWith = iprot.readString();
                struct.setStartWithIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SIZE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I16) {
                struct.size = iprot.readI16();
                struct.setSizeIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, terms_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.columnFamily != null) {
          oprot.writeFieldBegin(COLUMN_FAMILY_FIELD_DESC);
          oprot.writeString(struct.columnFamily);
          oprot.writeFieldEnd();
        }
        if (struct.columnName != null) {
          oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
          oprot.writeString(struct.columnName);
          oprot.writeFieldEnd();
        }
        if (struct.startWith != null) {
          oprot.writeFieldBegin(START_WITH_FIELD_DESC);
          oprot.writeString(struct.startWith);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI16(struct.size);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terms_argsTupleSchemeFactory implements SchemeFactory {
      public terms_argsTupleScheme getScheme() {
        return new terms_argsTupleScheme();
      }
    }

    private static class terms_argsTupleScheme extends TupleScheme<terms_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, terms_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetColumnFamily()) {
          optionals.set(1);
        }
        if (struct.isSetColumnName()) {
          optionals.set(2);
        }
        if (struct.isSetStartWith()) {
          optionals.set(3);
        }
        if (struct.isSetSize()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetColumnFamily()) {
          oprot.writeString(struct.columnFamily);
        }
        if (struct.isSetColumnName()) {
          oprot.writeString(struct.columnName);
        }
        if (struct.isSetStartWith()) {
          oprot.writeString(struct.startWith);
        }
        if (struct.isSetSize()) {
          oprot.writeI16(struct.size);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, terms_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.columnFamily = iprot.readString();
          struct.setColumnFamilyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.columnName = iprot.readString();
          struct.setColumnNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.startWith = iprot.readString();
          struct.setStartWithIsSet(true);
        }
        if (incoming.get(4)) {
          struct.size = iprot.readI16();
          struct.setSizeIsSet(true);
        }
      }
    }

  }

  public static class terms_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<terms_result, terms_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("terms_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new terms_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new terms_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(terms_result.class, metaDataMap);
    }

    public terms_result() {
    }

    public terms_result(
      List<String> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terms_result(terms_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public terms_result deepCopy() {
      return new terms_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public terms_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public terms_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terms_result)
        return this.equals((terms_result)that);
      return false;
    }

    public boolean equals(terms_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(terms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      terms_result typedOther = (terms_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("terms_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terms_resultStandardSchemeFactory implements SchemeFactory {
      public terms_resultStandardScheme getScheme() {
        return new terms_resultStandardScheme();
      }
    }

    private static class terms_resultStandardScheme extends StandardScheme<terms_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, terms_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list340 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list340.size);
                  for (int _i341 = 0; _i341 < _list340.size; ++_i341)
                  {
                    String _elem342; // required
                    _elem342 = iprot.readString();
                    struct.success.add(_elem342);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, terms_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.success.size()));
            for (String _iter343 : struct.success)
            {
              oprot.writeString(_iter343);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terms_resultTupleSchemeFactory implements SchemeFactory {
      public terms_resultTupleScheme getScheme() {
        return new terms_resultTupleScheme();
      }
    }

    private static class terms_resultTupleScheme extends TupleScheme<terms_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, terms_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter344 : struct.success)
            {
              oprot.writeString(_iter344);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, terms_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list345 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list345.size);
            for (int _i346 = 0; _i346 < _list345.size; ++_i346)
            {
              String _elem347; // required
              _elem347 = iprot.readString();
              struct.success.add(_elem347);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class recordFrequency_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<recordFrequency_args, recordFrequency_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("recordFrequency_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField COLUMN_FAMILY_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("columnFamily", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)2);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("columnName", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)3);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField VALUE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("value", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recordFrequency_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recordFrequency_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required
    /**
     * the column family. If the frequency requested is a system field like "rowid", "recordid", "family", etc then columnFamily can be null.
     */
    public String columnFamily; // required
    /**
     * the column name.
     */
    public String columnName; // required
    /**
     * the value.
     */
    public String value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table"),
      /**
       * the column family. If the frequency requested is a system field like "rowid", "recordid", "family", etc then columnFamily can be null.
       */
      COLUMN_FAMILY((short)2, "columnFamily"),
      /**
       * the column name.
       */
      COLUMN_NAME((short)3, "columnName"),
      /**
       * the value.
       */
      VALUE((short)4, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // COLUMN_FAMILY
            return COLUMN_FAMILY;
          case 3: // COLUMN_NAME
            return COLUMN_NAME;
          case 4: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN_FAMILY, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("columnFamily", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN_NAME, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("columnName", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("value", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(recordFrequency_args.class, metaDataMap);
    }

    public recordFrequency_args() {
    }

    public recordFrequency_args(
      String table,
      String columnFamily,
      String columnName,
      String value)
    {
      this();
      this.table = table;
      this.columnFamily = columnFamily;
      this.columnName = columnName;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recordFrequency_args(recordFrequency_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetColumnFamily()) {
        this.columnFamily = other.columnFamily;
      }
      if (other.isSetColumnName()) {
        this.columnName = other.columnName;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public recordFrequency_args deepCopy() {
      return new recordFrequency_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.columnFamily = null;
      this.columnName = null;
      this.value = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public recordFrequency_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * the column family. If the frequency requested is a system field like "rowid", "recordid", "family", etc then columnFamily can be null.
     */
    public String getColumnFamily() {
      return this.columnFamily;
    }

    /**
     * the column family. If the frequency requested is a system field like "rowid", "recordid", "family", etc then columnFamily can be null.
     */
    public recordFrequency_args setColumnFamily(String columnFamily) {
      this.columnFamily = columnFamily;
      return this;
    }

    public void unsetColumnFamily() {
      this.columnFamily = null;
    }

    /** Returns true if field columnFamily is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnFamily() {
      return this.columnFamily != null;
    }

    public void setColumnFamilyIsSet(boolean value) {
      if (!value) {
        this.columnFamily = null;
      }
    }

    /**
     * the column name.
     */
    public String getColumnName() {
      return this.columnName;
    }

    /**
     * the column name.
     */
    public recordFrequency_args setColumnName(String columnName) {
      this.columnName = columnName;
      return this;
    }

    public void unsetColumnName() {
      this.columnName = null;
    }

    /** Returns true if field columnName is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnName() {
      return this.columnName != null;
    }

    public void setColumnNameIsSet(boolean value) {
      if (!value) {
        this.columnName = null;
      }
    }

    /**
     * the value.
     */
    public String getValue() {
      return this.value;
    }

    /**
     * the value.
     */
    public recordFrequency_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case COLUMN_FAMILY:
        if (value == null) {
          unsetColumnFamily();
        } else {
          setColumnFamily((String)value);
        }
        break;

      case COLUMN_NAME:
        if (value == null) {
          unsetColumnName();
        } else {
          setColumnName((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case COLUMN_FAMILY:
        return getColumnFamily();

      case COLUMN_NAME:
        return getColumnName();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case COLUMN_FAMILY:
        return isSetColumnFamily();
      case COLUMN_NAME:
        return isSetColumnName();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recordFrequency_args)
        return this.equals((recordFrequency_args)that);
      return false;
    }

    public boolean equals(recordFrequency_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_columnFamily = true && this.isSetColumnFamily();
      boolean that_present_columnFamily = true && that.isSetColumnFamily();
      if (this_present_columnFamily || that_present_columnFamily) {
        if (!(this_present_columnFamily && that_present_columnFamily))
          return false;
        if (!this.columnFamily.equals(that.columnFamily))
          return false;
      }

      boolean this_present_columnName = true && this.isSetColumnName();
      boolean that_present_columnName = true && that.isSetColumnName();
      if (this_present_columnName || that_present_columnName) {
        if (!(this_present_columnName && that_present_columnName))
          return false;
        if (!this.columnName.equals(that.columnName))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(recordFrequency_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      recordFrequency_args typedOther = (recordFrequency_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnFamily()).compareTo(typedOther.isSetColumnFamily());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnFamily()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.columnFamily, typedOther.columnFamily);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnName()).compareTo(typedOther.isSetColumnName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnName()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.columnName, typedOther.columnName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recordFrequency_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnFamily:");
      if (this.columnFamily == null) {
        sb.append("null");
      } else {
        sb.append(this.columnFamily);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnName:");
      if (this.columnName == null) {
        sb.append("null");
      } else {
        sb.append(this.columnName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recordFrequency_argsStandardSchemeFactory implements SchemeFactory {
      public recordFrequency_argsStandardScheme getScheme() {
        return new recordFrequency_argsStandardScheme();
      }
    }

    private static class recordFrequency_argsStandardScheme extends StandardScheme<recordFrequency_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, recordFrequency_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN_FAMILY
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.columnFamily = iprot.readString();
                struct.setColumnFamilyIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_NAME
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.columnName = iprot.readString();
                struct.setColumnNameIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VALUE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, recordFrequency_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.columnFamily != null) {
          oprot.writeFieldBegin(COLUMN_FAMILY_FIELD_DESC);
          oprot.writeString(struct.columnFamily);
          oprot.writeFieldEnd();
        }
        if (struct.columnName != null) {
          oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
          oprot.writeString(struct.columnName);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recordFrequency_argsTupleSchemeFactory implements SchemeFactory {
      public recordFrequency_argsTupleScheme getScheme() {
        return new recordFrequency_argsTupleScheme();
      }
    }

    private static class recordFrequency_argsTupleScheme extends TupleScheme<recordFrequency_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, recordFrequency_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetColumnFamily()) {
          optionals.set(1);
        }
        if (struct.isSetColumnName()) {
          optionals.set(2);
        }
        if (struct.isSetValue()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetColumnFamily()) {
          oprot.writeString(struct.columnFamily);
        }
        if (struct.isSetColumnName()) {
          oprot.writeString(struct.columnName);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, recordFrequency_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.columnFamily = iprot.readString();
          struct.setColumnFamilyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.columnName = iprot.readString();
          struct.setColumnNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class recordFrequency_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<recordFrequency_result, recordFrequency_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("recordFrequency_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I64, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recordFrequency_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recordFrequency_resultTupleSchemeFactory());
    }

    public long success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I64)));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(recordFrequency_result.class, metaDataMap);
    }

    public recordFrequency_result() {
    }

    public recordFrequency_result(
      long success,
      BlurException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recordFrequency_result(recordFrequency_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public recordFrequency_result deepCopy() {
      return new recordFrequency_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public recordFrequency_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public BlurException getEx() {
      return this.ex;
    }

    public recordFrequency_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recordFrequency_result)
        return this.equals((recordFrequency_result)that);
      return false;
    }

    public boolean equals(recordFrequency_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(recordFrequency_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      recordFrequency_result typedOther = (recordFrequency_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recordFrequency_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recordFrequency_resultStandardSchemeFactory implements SchemeFactory {
      public recordFrequency_resultStandardScheme getScheme() {
        return new recordFrequency_resultStandardScheme();
      }
    }

    private static class recordFrequency_resultStandardScheme extends StandardScheme<recordFrequency_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, recordFrequency_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, recordFrequency_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recordFrequency_resultTupleSchemeFactory implements SchemeFactory {
      public recordFrequency_resultTupleScheme getScheme() {
        return new recordFrequency_resultTupleScheme();
      }
    }

    private static class recordFrequency_resultTupleScheme extends TupleScheme<recordFrequency_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, recordFrequency_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, recordFrequency_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class shardClusterList_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<shardClusterList_args, shardClusterList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("shardClusterList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shardClusterList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shardClusterList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(shardClusterList_args.class, metaDataMap);
    }

    public shardClusterList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shardClusterList_args(shardClusterList_args other) {
    }

    public shardClusterList_args deepCopy() {
      return new shardClusterList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shardClusterList_args)
        return this.equals((shardClusterList_args)that);
      return false;
    }

    public boolean equals(shardClusterList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shardClusterList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shardClusterList_args typedOther = (shardClusterList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shardClusterList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shardClusterList_argsStandardSchemeFactory implements SchemeFactory {
      public shardClusterList_argsStandardScheme getScheme() {
        return new shardClusterList_argsStandardScheme();
      }
    }

    private static class shardClusterList_argsStandardScheme extends StandardScheme<shardClusterList_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, shardClusterList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, shardClusterList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shardClusterList_argsTupleSchemeFactory implements SchemeFactory {
      public shardClusterList_argsTupleScheme getScheme() {
        return new shardClusterList_argsTupleScheme();
      }
    }

    private static class shardClusterList_argsTupleScheme extends TupleScheme<shardClusterList_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardClusterList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardClusterList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class shardClusterList_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<shardClusterList_result, shardClusterList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("shardClusterList_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shardClusterList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shardClusterList_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(shardClusterList_result.class, metaDataMap);
    }

    public shardClusterList_result() {
    }

    public shardClusterList_result(
      List<String> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shardClusterList_result(shardClusterList_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public shardClusterList_result deepCopy() {
      return new shardClusterList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public shardClusterList_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public shardClusterList_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shardClusterList_result)
        return this.equals((shardClusterList_result)that);
      return false;
    }

    public boolean equals(shardClusterList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shardClusterList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shardClusterList_result typedOther = (shardClusterList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shardClusterList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shardClusterList_resultStandardSchemeFactory implements SchemeFactory {
      public shardClusterList_resultStandardScheme getScheme() {
        return new shardClusterList_resultStandardScheme();
      }
    }

    private static class shardClusterList_resultStandardScheme extends StandardScheme<shardClusterList_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, shardClusterList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list348 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list348.size);
                  for (int _i349 = 0; _i349 < _list348.size; ++_i349)
                  {
                    String _elem350; // required
                    _elem350 = iprot.readString();
                    struct.success.add(_elem350);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, shardClusterList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.success.size()));
            for (String _iter351 : struct.success)
            {
              oprot.writeString(_iter351);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shardClusterList_resultTupleSchemeFactory implements SchemeFactory {
      public shardClusterList_resultTupleScheme getScheme() {
        return new shardClusterList_resultTupleScheme();
      }
    }

    private static class shardClusterList_resultTupleScheme extends TupleScheme<shardClusterList_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardClusterList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter352 : struct.success)
            {
              oprot.writeString(_iter352);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardClusterList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list353 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list353.size);
            for (int _i354 = 0; _i354 < _list353.size; ++_i354)
            {
              String _elem355; // required
              _elem355 = iprot.readString();
              struct.success.add(_elem355);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class shardServerList_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<shardServerList_args, shardServerList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("shardServerList_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField CLUSTER_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("cluster", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shardServerList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shardServerList_argsTupleSchemeFactory());
    }

    /**
     * the cluster name.
     */
    public String cluster; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the cluster name.
       */
      CLUSTER((short)1, "cluster");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER
            return CLUSTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("cluster", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(shardServerList_args.class, metaDataMap);
    }

    public shardServerList_args() {
    }

    public shardServerList_args(
      String cluster)
    {
      this();
      this.cluster = cluster;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shardServerList_args(shardServerList_args other) {
      if (other.isSetCluster()) {
        this.cluster = other.cluster;
      }
    }

    public shardServerList_args deepCopy() {
      return new shardServerList_args(this);
    }

    @Override
    public void clear() {
      this.cluster = null;
    }

    /**
     * the cluster name.
     */
    public String getCluster() {
      return this.cluster;
    }

    /**
     * the cluster name.
     */
    public shardServerList_args setCluster(String cluster) {
      this.cluster = cluster;
      return this;
    }

    public void unsetCluster() {
      this.cluster = null;
    }

    /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
    public boolean isSetCluster() {
      return this.cluster != null;
    }

    public void setClusterIsSet(boolean value) {
      if (!value) {
        this.cluster = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTER:
        if (value == null) {
          unsetCluster();
        } else {
          setCluster((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER:
        return getCluster();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER:
        return isSetCluster();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shardServerList_args)
        return this.equals((shardServerList_args)that);
      return false;
    }

    public boolean equals(shardServerList_args that) {
      if (that == null)
        return false;

      boolean this_present_cluster = true && this.isSetCluster();
      boolean that_present_cluster = true && that.isSetCluster();
      if (this_present_cluster || that_present_cluster) {
        if (!(this_present_cluster && that_present_cluster))
          return false;
        if (!this.cluster.equals(that.cluster))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shardServerList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shardServerList_args typedOther = (shardServerList_args)other;

      lastComparison = Boolean.valueOf(isSetCluster()).compareTo(typedOther.isSetCluster());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCluster()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.cluster, typedOther.cluster);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shardServerList_args(");
      boolean first = true;

      sb.append("cluster:");
      if (this.cluster == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shardServerList_argsStandardSchemeFactory implements SchemeFactory {
      public shardServerList_argsStandardScheme getScheme() {
        return new shardServerList_argsStandardScheme();
      }
    }

    private static class shardServerList_argsStandardScheme extends StandardScheme<shardServerList_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, shardServerList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.cluster = iprot.readString();
                struct.setClusterIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, shardServerList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cluster != null) {
          oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
          oprot.writeString(struct.cluster);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shardServerList_argsTupleSchemeFactory implements SchemeFactory {
      public shardServerList_argsTupleScheme getScheme() {
        return new shardServerList_argsTupleScheme();
      }
    }

    private static class shardServerList_argsTupleScheme extends TupleScheme<shardServerList_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardServerList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCluster()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCluster()) {
          oprot.writeString(struct.cluster);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardServerList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cluster = iprot.readString();
          struct.setClusterIsSet(true);
        }
      }
    }

  }

  public static class shardServerList_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<shardServerList_result, shardServerList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("shardServerList_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shardServerList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shardServerList_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(shardServerList_result.class, metaDataMap);
    }

    public shardServerList_result() {
    }

    public shardServerList_result(
      List<String> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shardServerList_result(shardServerList_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public shardServerList_result deepCopy() {
      return new shardServerList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public shardServerList_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public shardServerList_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shardServerList_result)
        return this.equals((shardServerList_result)that);
      return false;
    }

    public boolean equals(shardServerList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shardServerList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shardServerList_result typedOther = (shardServerList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shardServerList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shardServerList_resultStandardSchemeFactory implements SchemeFactory {
      public shardServerList_resultStandardScheme getScheme() {
        return new shardServerList_resultStandardScheme();
      }
    }

    private static class shardServerList_resultStandardScheme extends StandardScheme<shardServerList_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, shardServerList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list356 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list356.size);
                  for (int _i357 = 0; _i357 < _list356.size; ++_i357)
                  {
                    String _elem358; // required
                    _elem358 = iprot.readString();
                    struct.success.add(_elem358);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, shardServerList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.success.size()));
            for (String _iter359 : struct.success)
            {
              oprot.writeString(_iter359);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shardServerList_resultTupleSchemeFactory implements SchemeFactory {
      public shardServerList_resultTupleScheme getScheme() {
        return new shardServerList_resultTupleScheme();
      }
    }

    private static class shardServerList_resultTupleScheme extends TupleScheme<shardServerList_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardServerList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter360 : struct.success)
            {
              oprot.writeString(_iter360);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardServerList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list361 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list361.size);
            for (int _i362 = 0; _i362 < _list361.size; ++_i362)
            {
              String _elem363; // required
              _elem363 = iprot.readString();
              struct.success.add(_elem363);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class controllerServerList_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<controllerServerList_args, controllerServerList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("controllerServerList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new controllerServerList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new controllerServerList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(controllerServerList_args.class, metaDataMap);
    }

    public controllerServerList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public controllerServerList_args(controllerServerList_args other) {
    }

    public controllerServerList_args deepCopy() {
      return new controllerServerList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof controllerServerList_args)
        return this.equals((controllerServerList_args)that);
      return false;
    }

    public boolean equals(controllerServerList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(controllerServerList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      controllerServerList_args typedOther = (controllerServerList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("controllerServerList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class controllerServerList_argsStandardSchemeFactory implements SchemeFactory {
      public controllerServerList_argsStandardScheme getScheme() {
        return new controllerServerList_argsStandardScheme();
      }
    }

    private static class controllerServerList_argsStandardScheme extends StandardScheme<controllerServerList_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, controllerServerList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, controllerServerList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class controllerServerList_argsTupleSchemeFactory implements SchemeFactory {
      public controllerServerList_argsTupleScheme getScheme() {
        return new controllerServerList_argsTupleScheme();
      }
    }

    private static class controllerServerList_argsTupleScheme extends TupleScheme<controllerServerList_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, controllerServerList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, controllerServerList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class controllerServerList_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<controllerServerList_result, controllerServerList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("controllerServerList_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new controllerServerList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new controllerServerList_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(controllerServerList_result.class, metaDataMap);
    }

    public controllerServerList_result() {
    }

    public controllerServerList_result(
      List<String> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public controllerServerList_result(controllerServerList_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public controllerServerList_result deepCopy() {
      return new controllerServerList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public controllerServerList_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public controllerServerList_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof controllerServerList_result)
        return this.equals((controllerServerList_result)that);
      return false;
    }

    public boolean equals(controllerServerList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(controllerServerList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      controllerServerList_result typedOther = (controllerServerList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("controllerServerList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class controllerServerList_resultStandardSchemeFactory implements SchemeFactory {
      public controllerServerList_resultStandardScheme getScheme() {
        return new controllerServerList_resultStandardScheme();
      }
    }

    private static class controllerServerList_resultStandardScheme extends StandardScheme<controllerServerList_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, controllerServerList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list364 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list364.size);
                  for (int _i365 = 0; _i365 < _list364.size; ++_i365)
                  {
                    String _elem366; // required
                    _elem366 = iprot.readString();
                    struct.success.add(_elem366);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, controllerServerList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.success.size()));
            for (String _iter367 : struct.success)
            {
              oprot.writeString(_iter367);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class controllerServerList_resultTupleSchemeFactory implements SchemeFactory {
      public controllerServerList_resultTupleScheme getScheme() {
        return new controllerServerList_resultTupleScheme();
      }
    }

    private static class controllerServerList_resultTupleScheme extends TupleScheme<controllerServerList_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, controllerServerList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter368 : struct.success)
            {
              oprot.writeString(_iter368);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, controllerServerList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list369 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list369.size);
            for (int _i370 = 0; _i370 < _list369.size; ++_i370)
            {
              String _elem371; // required
              _elem371 = iprot.readString();
              struct.success.add(_elem371);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class shardServerLayout_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<shardServerLayout_args, shardServerLayout_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("shardServerLayout_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shardServerLayout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shardServerLayout_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(shardServerLayout_args.class, metaDataMap);
    }

    public shardServerLayout_args() {
    }

    public shardServerLayout_args(
      String table)
    {
      this();
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shardServerLayout_args(shardServerLayout_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public shardServerLayout_args deepCopy() {
      return new shardServerLayout_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public shardServerLayout_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shardServerLayout_args)
        return this.equals((shardServerLayout_args)that);
      return false;
    }

    public boolean equals(shardServerLayout_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shardServerLayout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shardServerLayout_args typedOther = (shardServerLayout_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shardServerLayout_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shardServerLayout_argsStandardSchemeFactory implements SchemeFactory {
      public shardServerLayout_argsStandardScheme getScheme() {
        return new shardServerLayout_argsStandardScheme();
      }
    }

    private static class shardServerLayout_argsStandardScheme extends StandardScheme<shardServerLayout_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, shardServerLayout_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, shardServerLayout_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shardServerLayout_argsTupleSchemeFactory implements SchemeFactory {
      public shardServerLayout_argsTupleScheme getScheme() {
        return new shardServerLayout_argsTupleScheme();
      }
    }

    private static class shardServerLayout_argsTupleScheme extends TupleScheme<shardServerLayout_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardServerLayout_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardServerLayout_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }

  }

  public static class shardServerLayout_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<shardServerLayout_result, shardServerLayout_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("shardServerLayout_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shardServerLayout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shardServerLayout_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.MapMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING), 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(shardServerLayout_result.class, metaDataMap);
    }

    public shardServerLayout_result() {
    }

    public shardServerLayout_result(
      Map<String,String> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shardServerLayout_result(shardServerLayout_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public shardServerLayout_result deepCopy() {
      return new shardServerLayout_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public shardServerLayout_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public shardServerLayout_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shardServerLayout_result)
        return this.equals((shardServerLayout_result)that);
      return false;
    }

    public boolean equals(shardServerLayout_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shardServerLayout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shardServerLayout_result typedOther = (shardServerLayout_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shardServerLayout_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shardServerLayout_resultStandardSchemeFactory implements SchemeFactory {
      public shardServerLayout_resultStandardScheme getScheme() {
        return new shardServerLayout_resultStandardScheme();
      }
    }

    private static class shardServerLayout_resultStandardScheme extends StandardScheme<shardServerLayout_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, shardServerLayout_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map372 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map372.size);
                  for (int _i373 = 0; _i373 < _map372.size; ++_i373)
                  {
                    String _key374; // optional
                    String _val375; // required
                    _key374 = iprot.readString();
                    _val375 = iprot.readString();
                    struct.success.put(_key374, _val375);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, shardServerLayout_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter376 : struct.success.entrySet())
            {
              oprot.writeString(_iter376.getKey());
              oprot.writeString(_iter376.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shardServerLayout_resultTupleSchemeFactory implements SchemeFactory {
      public shardServerLayout_resultTupleScheme getScheme() {
        return new shardServerLayout_resultTupleScheme();
      }
    }

    private static class shardServerLayout_resultTupleScheme extends TupleScheme<shardServerLayout_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardServerLayout_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter377 : struct.success.entrySet())
            {
              oprot.writeString(_iter377.getKey());
              oprot.writeString(_iter377.getValue());
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardServerLayout_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map378 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map378.size);
            for (int _i379 = 0; _i379 < _map378.size; ++_i379)
            {
              String _key380; // optional
              String _val381; // required
              _key380 = iprot.readString();
              _val381 = iprot.readString();
              struct.success.put(_key380, _val381);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class shardServerLayoutState_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<shardServerLayoutState_args, shardServerLayoutState_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("shardServerLayoutState_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shardServerLayoutState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shardServerLayoutState_argsTupleSchemeFactory());
    }

    /**
     * the table name.
     */
    public String table; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the table name.
       */
      TABLE((short)1, "table");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(shardServerLayoutState_args.class, metaDataMap);
    }

    public shardServerLayoutState_args() {
    }

    public shardServerLayoutState_args(
      String table)
    {
      this();
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shardServerLayoutState_args(shardServerLayoutState_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public shardServerLayoutState_args deepCopy() {
      return new shardServerLayoutState_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
    }

    /**
     * the table name.
     */
    public String getTable() {
      return this.table;
    }

    /**
     * the table name.
     */
    public shardServerLayoutState_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shardServerLayoutState_args)
        return this.equals((shardServerLayoutState_args)that);
      return false;
    }

    public boolean equals(shardServerLayoutState_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shardServerLayoutState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shardServerLayoutState_args typedOther = (shardServerLayoutState_args)other;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shardServerLayoutState_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shardServerLayoutState_argsStandardSchemeFactory implements SchemeFactory {
      public shardServerLayoutState_argsStandardScheme getScheme() {
        return new shardServerLayoutState_argsStandardScheme();
      }
    }

    private static class shardServerLayoutState_argsStandardScheme extends StandardScheme<shardServerLayoutState_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, shardServerLayoutState_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, shardServerLayoutState_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shardServerLayoutState_argsTupleSchemeFactory implements SchemeFactory {
      public shardServerLayoutState_argsTupleScheme getScheme() {
        return new shardServerLayoutState_argsTupleScheme();
      }
    }

    private static class shardServerLayoutState_argsTupleScheme extends TupleScheme<shardServerLayoutState_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardServerLayoutState_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardServerLayoutState_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }

  }

  public static class shardServerLayoutState_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<shardServerLayoutState_result, shardServerLayoutState_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("shardServerLayoutState_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shardServerLayoutState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shardServerLayoutState_resultTupleSchemeFactory());
    }

    public Map<String,Map<String,ShardState>> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.MapMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING), 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.MapMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, 
                  new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING), 
                  new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.EnumMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.ENUM, ShardState.class)))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(shardServerLayoutState_result.class, metaDataMap);
    }

    public shardServerLayoutState_result() {
    }

    public shardServerLayoutState_result(
      Map<String,Map<String,ShardState>> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shardServerLayoutState_result(shardServerLayoutState_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<String,ShardState>> __this__success = new HashMap<String,Map<String,ShardState>>();
        for (Map.Entry<String, Map<String,ShardState>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<String,ShardState> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<String,ShardState> __this__success_copy_value = new HashMap<String,ShardState>();
          for (Map.Entry<String, ShardState> other_element_value_element : other_element_value.entrySet()) {

            String other_element_value_element_key = other_element_value_element.getKey();
            ShardState other_element_value_element_value = other_element_value_element.getValue();

            String __this__success_copy_value_copy_key = other_element_value_element_key;

            ShardState __this__success_copy_value_copy_value = other_element_value_element_value;

            __this__success_copy_value.put(__this__success_copy_value_copy_key, __this__success_copy_value_copy_value);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public shardServerLayoutState_result deepCopy() {
      return new shardServerLayoutState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<String,ShardState> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Map<String,ShardState>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<String,ShardState>> getSuccess() {
      return this.success;
    }

    public shardServerLayoutState_result setSuccess(Map<String,Map<String,ShardState>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public shardServerLayoutState_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<String,ShardState>>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shardServerLayoutState_result)
        return this.equals((shardServerLayoutState_result)that);
      return false;
    }

    public boolean equals(shardServerLayoutState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shardServerLayoutState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shardServerLayoutState_result typedOther = (shardServerLayoutState_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shardServerLayoutState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shardServerLayoutState_resultStandardSchemeFactory implements SchemeFactory {
      public shardServerLayoutState_resultStandardScheme getScheme() {
        return new shardServerLayoutState_resultStandardScheme();
      }
    }

    private static class shardServerLayoutState_resultStandardScheme extends StandardScheme<shardServerLayoutState_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, shardServerLayoutState_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map382 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Map<String,ShardState>>(2*_map382.size);
                  for (int _i383 = 0; _i383 < _map382.size; ++_i383)
                  {
                    String _key384; // optional
                    Map<String,ShardState> _val385; // required
                    _key384 = iprot.readString();
                    {
                      org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map386 = iprot.readMapBegin();
                      _val385 = new HashMap<String,ShardState>(2*_map386.size);
                      for (int _i387 = 0; _i387 < _map386.size; ++_i387)
                      {
                        String _key388; // optional
                        ShardState _val389; // required
                        _key388 = iprot.readString();
                        _val389 = ShardState.findByValue(iprot.readI32());
                        _val385.put(_key388, _val389);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key384, _val385);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, shardServerLayoutState_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<String,ShardState>> _iter390 : struct.success.entrySet())
            {
              oprot.writeString(_iter390.getKey());
              {
                oprot.writeMapBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32, _iter390.getValue().size()));
                for (Map.Entry<String, ShardState> _iter391 : _iter390.getValue().entrySet())
                {
                  oprot.writeString(_iter391.getKey());
                  oprot.writeI32(_iter391.getValue().getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shardServerLayoutState_resultTupleSchemeFactory implements SchemeFactory {
      public shardServerLayoutState_resultTupleScheme getScheme() {
        return new shardServerLayoutState_resultTupleScheme();
      }
    }

    private static class shardServerLayoutState_resultTupleScheme extends TupleScheme<shardServerLayoutState_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardServerLayoutState_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Map<String,ShardState>> _iter392 : struct.success.entrySet())
            {
              oprot.writeString(_iter392.getKey());
              {
                oprot.writeI32(_iter392.getValue().size());
                for (Map.Entry<String, ShardState> _iter393 : _iter392.getValue().entrySet())
                {
                  oprot.writeString(_iter393.getKey());
                  oprot.writeI32(_iter393.getValue().getValue());
                }
              }
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, shardServerLayoutState_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map394 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<String,Map<String,ShardState>>(2*_map394.size);
            for (int _i395 = 0; _i395 < _map394.size; ++_i395)
            {
              String _key396; // optional
              Map<String,ShardState> _val397; // required
              _key396 = iprot.readString();
              {
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map398 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32, iprot.readI32());
                _val397 = new HashMap<String,ShardState>(2*_map398.size);
                for (int _i399 = 0; _i399 < _map398.size; ++_i399)
                {
                  String _key400; // optional
                  ShardState _val401; // required
                  _key400 = iprot.readString();
                  _val401 = ShardState.findByValue(iprot.readI32());
                  _val397.put(_key400, _val401);
                }
              }
              struct.success.put(_key396, _val397);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class isInSafeMode_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<isInSafeMode_args, isInSafeMode_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("isInSafeMode_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField CLUSTER_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("cluster", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isInSafeMode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isInSafeMode_argsTupleSchemeFactory());
    }

    /**
     * the name of the cluster.
     */
    public String cluster; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the name of the cluster.
       */
      CLUSTER((short)1, "cluster");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER
            return CLUSTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("cluster", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(isInSafeMode_args.class, metaDataMap);
    }

    public isInSafeMode_args() {
    }

    public isInSafeMode_args(
      String cluster)
    {
      this();
      this.cluster = cluster;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isInSafeMode_args(isInSafeMode_args other) {
      if (other.isSetCluster()) {
        this.cluster = other.cluster;
      }
    }

    public isInSafeMode_args deepCopy() {
      return new isInSafeMode_args(this);
    }

    @Override
    public void clear() {
      this.cluster = null;
    }

    /**
     * the name of the cluster.
     */
    public String getCluster() {
      return this.cluster;
    }

    /**
     * the name of the cluster.
     */
    public isInSafeMode_args setCluster(String cluster) {
      this.cluster = cluster;
      return this;
    }

    public void unsetCluster() {
      this.cluster = null;
    }

    /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
    public boolean isSetCluster() {
      return this.cluster != null;
    }

    public void setClusterIsSet(boolean value) {
      if (!value) {
        this.cluster = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTER:
        if (value == null) {
          unsetCluster();
        } else {
          setCluster((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER:
        return getCluster();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER:
        return isSetCluster();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isInSafeMode_args)
        return this.equals((isInSafeMode_args)that);
      return false;
    }

    public boolean equals(isInSafeMode_args that) {
      if (that == null)
        return false;

      boolean this_present_cluster = true && this.isSetCluster();
      boolean that_present_cluster = true && that.isSetCluster();
      if (this_present_cluster || that_present_cluster) {
        if (!(this_present_cluster && that_present_cluster))
          return false;
        if (!this.cluster.equals(that.cluster))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(isInSafeMode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isInSafeMode_args typedOther = (isInSafeMode_args)other;

      lastComparison = Boolean.valueOf(isSetCluster()).compareTo(typedOther.isSetCluster());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCluster()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.cluster, typedOther.cluster);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isInSafeMode_args(");
      boolean first = true;

      sb.append("cluster:");
      if (this.cluster == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isInSafeMode_argsStandardSchemeFactory implements SchemeFactory {
      public isInSafeMode_argsStandardScheme getScheme() {
        return new isInSafeMode_argsStandardScheme();
      }
    }

    private static class isInSafeMode_argsStandardScheme extends StandardScheme<isInSafeMode_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, isInSafeMode_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.cluster = iprot.readString();
                struct.setClusterIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, isInSafeMode_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cluster != null) {
          oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
          oprot.writeString(struct.cluster);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isInSafeMode_argsTupleSchemeFactory implements SchemeFactory {
      public isInSafeMode_argsTupleScheme getScheme() {
        return new isInSafeMode_argsTupleScheme();
      }
    }

    private static class isInSafeMode_argsTupleScheme extends TupleScheme<isInSafeMode_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, isInSafeMode_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCluster()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCluster()) {
          oprot.writeString(struct.cluster);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, isInSafeMode_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cluster = iprot.readString();
          struct.setClusterIsSet(true);
        }
      }
    }

  }

  public static class isInSafeMode_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<isInSafeMode_result, isInSafeMode_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("isInSafeMode_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isInSafeMode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isInSafeMode_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(isInSafeMode_result.class, metaDataMap);
    }

    public isInSafeMode_result() {
    }

    public isInSafeMode_result(
      boolean success,
      BlurException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isInSafeMode_result(isInSafeMode_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public isInSafeMode_result deepCopy() {
      return new isInSafeMode_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isInSafeMode_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public BlurException getEx() {
      return this.ex;
    }

    public isInSafeMode_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isInSafeMode_result)
        return this.equals((isInSafeMode_result)that);
      return false;
    }

    public boolean equals(isInSafeMode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(isInSafeMode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isInSafeMode_result typedOther = (isInSafeMode_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isInSafeMode_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isInSafeMode_resultStandardSchemeFactory implements SchemeFactory {
      public isInSafeMode_resultStandardScheme getScheme() {
        return new isInSafeMode_resultStandardScheme();
      }
    }

    private static class isInSafeMode_resultStandardScheme extends StandardScheme<isInSafeMode_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, isInSafeMode_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, isInSafeMode_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isInSafeMode_resultTupleSchemeFactory implements SchemeFactory {
      public isInSafeMode_resultTupleScheme getScheme() {
        return new isInSafeMode_resultTupleScheme();
      }
    }

    private static class isInSafeMode_resultTupleScheme extends TupleScheme<isInSafeMode_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, isInSafeMode_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, isInSafeMode_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class configuration_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<configuration_args, configuration_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("configuration_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new configuration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new configuration_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(configuration_args.class, metaDataMap);
    }

    public configuration_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configuration_args(configuration_args other) {
    }

    public configuration_args deepCopy() {
      return new configuration_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configuration_args)
        return this.equals((configuration_args)that);
      return false;
    }

    public boolean equals(configuration_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(configuration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      configuration_args typedOther = (configuration_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("configuration_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configuration_argsStandardSchemeFactory implements SchemeFactory {
      public configuration_argsStandardScheme getScheme() {
        return new configuration_argsStandardScheme();
      }
    }

    private static class configuration_argsStandardScheme extends StandardScheme<configuration_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, configuration_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, configuration_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configuration_argsTupleSchemeFactory implements SchemeFactory {
      public configuration_argsTupleScheme getScheme() {
        return new configuration_argsTupleScheme();
      }
    }

    private static class configuration_argsTupleScheme extends TupleScheme<configuration_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, configuration_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, configuration_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class configuration_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<configuration_result, configuration_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("configuration_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new configuration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new configuration_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.MapMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING), 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(configuration_result.class, metaDataMap);
    }

    public configuration_result() {
    }

    public configuration_result(
      Map<String,String> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configuration_result(configuration_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public configuration_result deepCopy() {
      return new configuration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public configuration_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public configuration_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configuration_result)
        return this.equals((configuration_result)that);
      return false;
    }

    public boolean equals(configuration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(configuration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      configuration_result typedOther = (configuration_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("configuration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configuration_resultStandardSchemeFactory implements SchemeFactory {
      public configuration_resultStandardScheme getScheme() {
        return new configuration_resultStandardScheme();
      }
    }

    private static class configuration_resultStandardScheme extends StandardScheme<configuration_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, configuration_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map402 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map402.size);
                  for (int _i403 = 0; _i403 < _map402.size; ++_i403)
                  {
                    String _key404; // optional
                    String _val405; // required
                    _key404 = iprot.readString();
                    _val405 = iprot.readString();
                    struct.success.put(_key404, _val405);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, configuration_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter406 : struct.success.entrySet())
            {
              oprot.writeString(_iter406.getKey());
              oprot.writeString(_iter406.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configuration_resultTupleSchemeFactory implements SchemeFactory {
      public configuration_resultTupleScheme getScheme() {
        return new configuration_resultTupleScheme();
      }
    }

    private static class configuration_resultTupleScheme extends TupleScheme<configuration_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, configuration_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter407 : struct.success.entrySet())
            {
              oprot.writeString(_iter407.getKey());
              oprot.writeString(_iter407.getValue());
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, configuration_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map408 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map408.size);
            for (int _i409 = 0; _i409 < _map408.size; ++_i409)
            {
              String _key410; // optional
              String _val411; // required
              _key410 = iprot.readString();
              _val411 = iprot.readString();
              struct.success.put(_key410, _val411);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class metrics_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<metrics_args, metrics_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("metrics_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField METRICS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("metrics", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.SET, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new metrics_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new metrics_argsTupleSchemeFactory());
    }

    /**
     * the names of the metrics to return.  If null all are returned.
     */
    public Set<String> metrics; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the names of the metrics to return.  If null all are returned.
       */
      METRICS((short)1, "metrics");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METRICS
            return METRICS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METRICS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("metrics", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.SetMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.SET, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(metrics_args.class, metaDataMap);
    }

    public metrics_args() {
    }

    public metrics_args(
      Set<String> metrics)
    {
      this();
      this.metrics = metrics;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public metrics_args(metrics_args other) {
      if (other.isSetMetrics()) {
        Set<String> __this__metrics = new HashSet<String>();
        for (String other_element : other.metrics) {
          __this__metrics.add(other_element);
        }
        this.metrics = __this__metrics;
      }
    }

    public metrics_args deepCopy() {
      return new metrics_args(this);
    }

    @Override
    public void clear() {
      this.metrics = null;
    }

    public int getMetricsSize() {
      return (this.metrics == null) ? 0 : this.metrics.size();
    }

    public java.util.Iterator<String> getMetricsIterator() {
      return (this.metrics == null) ? null : this.metrics.iterator();
    }

    public void addToMetrics(String elem) {
      if (this.metrics == null) {
        this.metrics = new HashSet<String>();
      }
      this.metrics.add(elem);
    }

    /**
     * the names of the metrics to return.  If null all are returned.
     */
    public Set<String> getMetrics() {
      return this.metrics;
    }

    /**
     * the names of the metrics to return.  If null all are returned.
     */
    public metrics_args setMetrics(Set<String> metrics) {
      this.metrics = metrics;
      return this;
    }

    public void unsetMetrics() {
      this.metrics = null;
    }

    /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
    public boolean isSetMetrics() {
      return this.metrics != null;
    }

    public void setMetricsIsSet(boolean value) {
      if (!value) {
        this.metrics = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case METRICS:
        if (value == null) {
          unsetMetrics();
        } else {
          setMetrics((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case METRICS:
        return getMetrics();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case METRICS:
        return isSetMetrics();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof metrics_args)
        return this.equals((metrics_args)that);
      return false;
    }

    public boolean equals(metrics_args that) {
      if (that == null)
        return false;

      boolean this_present_metrics = true && this.isSetMetrics();
      boolean that_present_metrics = true && that.isSetMetrics();
      if (this_present_metrics || that_present_metrics) {
        if (!(this_present_metrics && that_present_metrics))
          return false;
        if (!this.metrics.equals(that.metrics))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(metrics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      metrics_args typedOther = (metrics_args)other;

      lastComparison = Boolean.valueOf(isSetMetrics()).compareTo(typedOther.isSetMetrics());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetrics()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.metrics, typedOther.metrics);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("metrics_args(");
      boolean first = true;

      sb.append("metrics:");
      if (this.metrics == null) {
        sb.append("null");
      } else {
        sb.append(this.metrics);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class metrics_argsStandardSchemeFactory implements SchemeFactory {
      public metrics_argsStandardScheme getScheme() {
        return new metrics_argsStandardScheme();
      }
    }

    private static class metrics_argsStandardScheme extends StandardScheme<metrics_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, metrics_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METRICS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.SET) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet _set412 = iprot.readSetBegin();
                  struct.metrics = new HashSet<String>(2*_set412.size);
                  for (int _i413 = 0; _i413 < _set412.size; ++_i413)
                  {
                    String _elem414; // required
                    _elem414 = iprot.readString();
                    struct.metrics.add(_elem414);
                  }
                  iprot.readSetEnd();
                }
                struct.setMetricsIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, metrics_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metrics != null) {
          oprot.writeFieldBegin(METRICS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.metrics.size()));
            for (String _iter415 : struct.metrics)
            {
              oprot.writeString(_iter415);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class metrics_argsTupleSchemeFactory implements SchemeFactory {
      public metrics_argsTupleScheme getScheme() {
        return new metrics_argsTupleScheme();
      }
    }

    private static class metrics_argsTupleScheme extends TupleScheme<metrics_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, metrics_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMetrics()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMetrics()) {
          {
            oprot.writeI32(struct.metrics.size());
            for (String _iter416 : struct.metrics)
            {
              oprot.writeString(_iter416);
            }
          }
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, metrics_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet _set417 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.metrics = new HashSet<String>(2*_set417.size);
            for (int _i418 = 0; _i418 < _set417.size; ++_i418)
            {
              String _elem419; // required
              _elem419 = iprot.readString();
              struct.metrics.add(_elem419);
            }
          }
          struct.setMetricsIsSet(true);
        }
      }
    }

  }

  public static class metrics_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<metrics_result, metrics_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("metrics_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new metrics_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new metrics_resultTupleSchemeFactory());
    }

    public Map<String,Metric> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.MapMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING), 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, Metric.class))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(metrics_result.class, metaDataMap);
    }

    public metrics_result() {
    }

    public metrics_result(
      Map<String,Metric> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public metrics_result(metrics_result other) {
      if (other.isSetSuccess()) {
        Map<String,Metric> __this__success = new HashMap<String,Metric>();
        for (Map.Entry<String, Metric> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Metric other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Metric __this__success_copy_value = new Metric(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public metrics_result deepCopy() {
      return new metrics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Metric val) {
      if (this.success == null) {
        this.success = new HashMap<String,Metric>();
      }
      this.success.put(key, val);
    }

    public Map<String,Metric> getSuccess() {
      return this.success;
    }

    public metrics_result setSuccess(Map<String,Metric> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public metrics_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Metric>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof metrics_result)
        return this.equals((metrics_result)that);
      return false;
    }

    public boolean equals(metrics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(metrics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      metrics_result typedOther = (metrics_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("metrics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class metrics_resultStandardSchemeFactory implements SchemeFactory {
      public metrics_resultStandardScheme getScheme() {
        return new metrics_resultStandardScheme();
      }
    }

    private static class metrics_resultStandardScheme extends StandardScheme<metrics_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, metrics_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map420 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Metric>(2*_map420.size);
                  for (int _i421 = 0; _i421 < _map420.size; ++_i421)
                  {
                    String _key422; // optional
                    Metric _val423; // required
                    _key422 = iprot.readString();
                    _val423 = new Metric();
                    _val423.read(iprot);
                    struct.success.put(_key422, _val423);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, metrics_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, Metric> _iter424 : struct.success.entrySet())
            {
              oprot.writeString(_iter424.getKey());
              _iter424.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class metrics_resultTupleSchemeFactory implements SchemeFactory {
      public metrics_resultTupleScheme getScheme() {
        return new metrics_resultTupleScheme();
      }
    }

    private static class metrics_resultTupleScheme extends TupleScheme<metrics_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, metrics_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Metric> _iter425 : struct.success.entrySet())
            {
              oprot.writeString(_iter425.getKey());
              _iter425.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, metrics_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map426 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,Metric>(2*_map426.size);
            for (int _i427 = 0; _i427 < _map426.size; ++_i427)
            {
              String _key428; // optional
              Metric _val429; // required
              _key428 = iprot.readString();
              _val429 = new Metric();
              _val429.read(iprot);
              struct.success.put(_key428, _val429);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class startTrace_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<startTrace_args, startTrace_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("startTrace_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("traceId", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("requestId", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startTrace_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startTrace_argsTupleSchemeFactory());
    }

    /**
     * the trace id.
     */
    public String traceId; // required
    /**
     * the request id, used to connected remote calls together.  Client can pass null.
     */
    public String requestId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the trace id.
       */
      TRACE_ID((short)1, "traceId"),
      /**
       * the request id, used to connected remote calls together.  Client can pass null.
       */
      REQUEST_ID((short)2, "requestId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRACE_ID
            return TRACE_ID;
          case 2: // REQUEST_ID
            return REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRACE_ID, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("traceId", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("requestId", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(startTrace_args.class, metaDataMap);
    }

    public startTrace_args() {
    }

    public startTrace_args(
      String traceId,
      String requestId)
    {
      this();
      this.traceId = traceId;
      this.requestId = requestId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startTrace_args(startTrace_args other) {
      if (other.isSetTraceId()) {
        this.traceId = other.traceId;
      }
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
    }

    public startTrace_args deepCopy() {
      return new startTrace_args(this);
    }

    @Override
    public void clear() {
      this.traceId = null;
      this.requestId = null;
    }

    /**
     * the trace id.
     */
    public String getTraceId() {
      return this.traceId;
    }

    /**
     * the trace id.
     */
    public startTrace_args setTraceId(String traceId) {
      this.traceId = traceId;
      return this;
    }

    public void unsetTraceId() {
      this.traceId = null;
    }

    /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
    public boolean isSetTraceId() {
      return this.traceId != null;
    }

    public void setTraceIdIsSet(boolean value) {
      if (!value) {
        this.traceId = null;
      }
    }

    /**
     * the request id, used to connected remote calls together.  Client can pass null.
     */
    public String getRequestId() {
      return this.requestId;
    }

    /**
     * the request id, used to connected remote calls together.  Client can pass null.
     */
    public startTrace_args setRequestId(String requestId) {
      this.requestId = requestId;
      return this;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRACE_ID:
        if (value == null) {
          unsetTraceId();
        } else {
          setTraceId((String)value);
        }
        break;

      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRACE_ID:
        return getTraceId();

      case REQUEST_ID:
        return getRequestId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRACE_ID:
        return isSetTraceId();
      case REQUEST_ID:
        return isSetRequestId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startTrace_args)
        return this.equals((startTrace_args)that);
      return false;
    }

    public boolean equals(startTrace_args that) {
      if (that == null)
        return false;

      boolean this_present_traceId = true && this.isSetTraceId();
      boolean that_present_traceId = true && that.isSetTraceId();
      if (this_present_traceId || that_present_traceId) {
        if (!(this_present_traceId && that_present_traceId))
          return false;
        if (!this.traceId.equals(that.traceId))
          return false;
      }

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startTrace_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startTrace_args typedOther = (startTrace_args)other;

      lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(typedOther.isSetTraceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTraceId()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.traceId, typedOther.traceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(typedOther.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.requestId, typedOther.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startTrace_args(");
      boolean first = true;

      sb.append("traceId:");
      if (this.traceId == null) {
        sb.append("null");
      } else {
        sb.append(this.traceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startTrace_argsStandardSchemeFactory implements SchemeFactory {
      public startTrace_argsStandardScheme getScheme() {
        return new startTrace_argsStandardScheme();
      }
    }

    private static class startTrace_argsStandardScheme extends StandardScheme<startTrace_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, startTrace_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRACE_ID
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.traceId = iprot.readString();
                struct.setTraceIdIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST_ID
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.requestId = iprot.readString();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, startTrace_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.traceId != null) {
          oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
          oprot.writeString(struct.traceId);
          oprot.writeFieldEnd();
        }
        if (struct.requestId != null) {
          oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
          oprot.writeString(struct.requestId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startTrace_argsTupleSchemeFactory implements SchemeFactory {
      public startTrace_argsTupleScheme getScheme() {
        return new startTrace_argsTupleScheme();
      }
    }

    private static class startTrace_argsTupleScheme extends TupleScheme<startTrace_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, startTrace_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTraceId()) {
          optionals.set(0);
        }
        if (struct.isSetRequestId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTraceId()) {
          oprot.writeString(struct.traceId);
        }
        if (struct.isSetRequestId()) {
          oprot.writeString(struct.requestId);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, startTrace_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.traceId = iprot.readString();
          struct.setTraceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requestId = iprot.readString();
          struct.setRequestIdIsSet(true);
        }
      }
    }

  }

  public static class traceList_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<traceList_args, traceList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("traceList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new traceList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new traceList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(traceList_args.class, metaDataMap);
    }

    public traceList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public traceList_args(traceList_args other) {
    }

    public traceList_args deepCopy() {
      return new traceList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof traceList_args)
        return this.equals((traceList_args)that);
      return false;
    }

    public boolean equals(traceList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(traceList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      traceList_args typedOther = (traceList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("traceList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class traceList_argsStandardSchemeFactory implements SchemeFactory {
      public traceList_argsStandardScheme getScheme() {
        return new traceList_argsStandardScheme();
      }
    }

    private static class traceList_argsStandardScheme extends StandardScheme<traceList_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, traceList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, traceList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class traceList_argsTupleSchemeFactory implements SchemeFactory {
      public traceList_argsTupleScheme getScheme() {
        return new traceList_argsTupleScheme();
      }
    }

    private static class traceList_argsTupleScheme extends TupleScheme<traceList_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class traceList_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<traceList_result, traceList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("traceList_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new traceList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new traceList_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(traceList_result.class, metaDataMap);
    }

    public traceList_result() {
    }

    public traceList_result(
      List<String> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public traceList_result(traceList_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public traceList_result deepCopy() {
      return new traceList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public traceList_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public traceList_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof traceList_result)
        return this.equals((traceList_result)that);
      return false;
    }

    public boolean equals(traceList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(traceList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      traceList_result typedOther = (traceList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("traceList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class traceList_resultStandardSchemeFactory implements SchemeFactory {
      public traceList_resultStandardScheme getScheme() {
        return new traceList_resultStandardScheme();
      }
    }

    private static class traceList_resultStandardScheme extends StandardScheme<traceList_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, traceList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list430 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list430.size);
                  for (int _i431 = 0; _i431 < _list430.size; ++_i431)
                  {
                    String _elem432; // required
                    _elem432 = iprot.readString();
                    struct.success.add(_elem432);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, traceList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.success.size()));
            for (String _iter433 : struct.success)
            {
              oprot.writeString(_iter433);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class traceList_resultTupleSchemeFactory implements SchemeFactory {
      public traceList_resultTupleScheme getScheme() {
        return new traceList_resultTupleScheme();
      }
    }

    private static class traceList_resultTupleScheme extends TupleScheme<traceList_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter434 : struct.success)
            {
              oprot.writeString(_iter434);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list435 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list435.size);
            for (int _i436 = 0; _i436 < _list435.size; ++_i436)
            {
              String _elem437; // required
              _elem437 = iprot.readString();
              struct.success.add(_elem437);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class traceRequestList_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<traceRequestList_args, traceRequestList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("traceRequestList_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("traceId", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new traceRequestList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new traceRequestList_argsTupleSchemeFactory());
    }

    /**
     * the trace id.
     */
    public String traceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the trace id.
       */
      TRACE_ID((short)1, "traceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRACE_ID
            return TRACE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRACE_ID, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("traceId", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(traceRequestList_args.class, metaDataMap);
    }

    public traceRequestList_args() {
    }

    public traceRequestList_args(
      String traceId)
    {
      this();
      this.traceId = traceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public traceRequestList_args(traceRequestList_args other) {
      if (other.isSetTraceId()) {
        this.traceId = other.traceId;
      }
    }

    public traceRequestList_args deepCopy() {
      return new traceRequestList_args(this);
    }

    @Override
    public void clear() {
      this.traceId = null;
    }

    /**
     * the trace id.
     */
    public String getTraceId() {
      return this.traceId;
    }

    /**
     * the trace id.
     */
    public traceRequestList_args setTraceId(String traceId) {
      this.traceId = traceId;
      return this;
    }

    public void unsetTraceId() {
      this.traceId = null;
    }

    /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
    public boolean isSetTraceId() {
      return this.traceId != null;
    }

    public void setTraceIdIsSet(boolean value) {
      if (!value) {
        this.traceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRACE_ID:
        if (value == null) {
          unsetTraceId();
        } else {
          setTraceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRACE_ID:
        return getTraceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRACE_ID:
        return isSetTraceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof traceRequestList_args)
        return this.equals((traceRequestList_args)that);
      return false;
    }

    public boolean equals(traceRequestList_args that) {
      if (that == null)
        return false;

      boolean this_present_traceId = true && this.isSetTraceId();
      boolean that_present_traceId = true && that.isSetTraceId();
      if (this_present_traceId || that_present_traceId) {
        if (!(this_present_traceId && that_present_traceId))
          return false;
        if (!this.traceId.equals(that.traceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(traceRequestList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      traceRequestList_args typedOther = (traceRequestList_args)other;

      lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(typedOther.isSetTraceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTraceId()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.traceId, typedOther.traceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("traceRequestList_args(");
      boolean first = true;

      sb.append("traceId:");
      if (this.traceId == null) {
        sb.append("null");
      } else {
        sb.append(this.traceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class traceRequestList_argsStandardSchemeFactory implements SchemeFactory {
      public traceRequestList_argsStandardScheme getScheme() {
        return new traceRequestList_argsStandardScheme();
      }
    }

    private static class traceRequestList_argsStandardScheme extends StandardScheme<traceRequestList_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, traceRequestList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRACE_ID
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.traceId = iprot.readString();
                struct.setTraceIdIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, traceRequestList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.traceId != null) {
          oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
          oprot.writeString(struct.traceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class traceRequestList_argsTupleSchemeFactory implements SchemeFactory {
      public traceRequestList_argsTupleScheme getScheme() {
        return new traceRequestList_argsTupleScheme();
      }
    }

    private static class traceRequestList_argsTupleScheme extends TupleScheme<traceRequestList_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceRequestList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTraceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTraceId()) {
          oprot.writeString(struct.traceId);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceRequestList_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.traceId = iprot.readString();
          struct.setTraceIdIsSet(true);
        }
      }
    }

  }

  public static class traceRequestList_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<traceRequestList_result, traceRequestList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("traceRequestList_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new traceRequestList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new traceRequestList_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(traceRequestList_result.class, metaDataMap);
    }

    public traceRequestList_result() {
    }

    public traceRequestList_result(
      List<String> success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public traceRequestList_result(traceRequestList_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public traceRequestList_result deepCopy() {
      return new traceRequestList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public traceRequestList_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public traceRequestList_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof traceRequestList_result)
        return this.equals((traceRequestList_result)that);
      return false;
    }

    public boolean equals(traceRequestList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(traceRequestList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      traceRequestList_result typedOther = (traceRequestList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("traceRequestList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class traceRequestList_resultStandardSchemeFactory implements SchemeFactory {
      public traceRequestList_resultStandardScheme getScheme() {
        return new traceRequestList_resultStandardScheme();
      }
    }

    private static class traceRequestList_resultStandardScheme extends StandardScheme<traceRequestList_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, traceRequestList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list438 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list438.size);
                  for (int _i439 = 0; _i439 < _list438.size; ++_i439)
                  {
                    String _elem440; // required
                    _elem440 = iprot.readString();
                    struct.success.add(_elem440);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, traceRequestList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.success.size()));
            for (String _iter441 : struct.success)
            {
              oprot.writeString(_iter441);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class traceRequestList_resultTupleSchemeFactory implements SchemeFactory {
      public traceRequestList_resultTupleScheme getScheme() {
        return new traceRequestList_resultTupleScheme();
      }
    }

    private static class traceRequestList_resultTupleScheme extends TupleScheme<traceRequestList_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceRequestList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter442 : struct.success)
            {
              oprot.writeString(_iter442);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceRequestList_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList _list443 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TList(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list443.size);
            for (int _i444 = 0; _i444 < _list443.size; ++_i444)
            {
              String _elem445; // required
              _elem445 = iprot.readString();
              struct.success.add(_elem445);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class traceRequestFetch_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<traceRequestFetch_args, traceRequestFetch_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("traceRequestFetch_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("traceId", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("requestId", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new traceRequestFetch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new traceRequestFetch_argsTupleSchemeFactory());
    }

    /**
     * the trace id.
     */
    public String traceId; // required
    /**
     * the request id.
     */
    public String requestId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the trace id.
       */
      TRACE_ID((short)1, "traceId"),
      /**
       * the request id.
       */
      REQUEST_ID((short)2, "requestId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRACE_ID
            return TRACE_ID;
          case 2: // REQUEST_ID
            return REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRACE_ID, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("traceId", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("requestId", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(traceRequestFetch_args.class, metaDataMap);
    }

    public traceRequestFetch_args() {
    }

    public traceRequestFetch_args(
      String traceId,
      String requestId)
    {
      this();
      this.traceId = traceId;
      this.requestId = requestId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public traceRequestFetch_args(traceRequestFetch_args other) {
      if (other.isSetTraceId()) {
        this.traceId = other.traceId;
      }
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
    }

    public traceRequestFetch_args deepCopy() {
      return new traceRequestFetch_args(this);
    }

    @Override
    public void clear() {
      this.traceId = null;
      this.requestId = null;
    }

    /**
     * the trace id.
     */
    public String getTraceId() {
      return this.traceId;
    }

    /**
     * the trace id.
     */
    public traceRequestFetch_args setTraceId(String traceId) {
      this.traceId = traceId;
      return this;
    }

    public void unsetTraceId() {
      this.traceId = null;
    }

    /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
    public boolean isSetTraceId() {
      return this.traceId != null;
    }

    public void setTraceIdIsSet(boolean value) {
      if (!value) {
        this.traceId = null;
      }
    }

    /**
     * the request id.
     */
    public String getRequestId() {
      return this.requestId;
    }

    /**
     * the request id.
     */
    public traceRequestFetch_args setRequestId(String requestId) {
      this.requestId = requestId;
      return this;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRACE_ID:
        if (value == null) {
          unsetTraceId();
        } else {
          setTraceId((String)value);
        }
        break;

      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRACE_ID:
        return getTraceId();

      case REQUEST_ID:
        return getRequestId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRACE_ID:
        return isSetTraceId();
      case REQUEST_ID:
        return isSetRequestId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof traceRequestFetch_args)
        return this.equals((traceRequestFetch_args)that);
      return false;
    }

    public boolean equals(traceRequestFetch_args that) {
      if (that == null)
        return false;

      boolean this_present_traceId = true && this.isSetTraceId();
      boolean that_present_traceId = true && that.isSetTraceId();
      if (this_present_traceId || that_present_traceId) {
        if (!(this_present_traceId && that_present_traceId))
          return false;
        if (!this.traceId.equals(that.traceId))
          return false;
      }

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(traceRequestFetch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      traceRequestFetch_args typedOther = (traceRequestFetch_args)other;

      lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(typedOther.isSetTraceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTraceId()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.traceId, typedOther.traceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(typedOther.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.requestId, typedOther.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("traceRequestFetch_args(");
      boolean first = true;

      sb.append("traceId:");
      if (this.traceId == null) {
        sb.append("null");
      } else {
        sb.append(this.traceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class traceRequestFetch_argsStandardSchemeFactory implements SchemeFactory {
      public traceRequestFetch_argsStandardScheme getScheme() {
        return new traceRequestFetch_argsStandardScheme();
      }
    }

    private static class traceRequestFetch_argsStandardScheme extends StandardScheme<traceRequestFetch_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, traceRequestFetch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRACE_ID
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.traceId = iprot.readString();
                struct.setTraceIdIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST_ID
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.requestId = iprot.readString();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, traceRequestFetch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.traceId != null) {
          oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
          oprot.writeString(struct.traceId);
          oprot.writeFieldEnd();
        }
        if (struct.requestId != null) {
          oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
          oprot.writeString(struct.requestId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class traceRequestFetch_argsTupleSchemeFactory implements SchemeFactory {
      public traceRequestFetch_argsTupleScheme getScheme() {
        return new traceRequestFetch_argsTupleScheme();
      }
    }

    private static class traceRequestFetch_argsTupleScheme extends TupleScheme<traceRequestFetch_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceRequestFetch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTraceId()) {
          optionals.set(0);
        }
        if (struct.isSetRequestId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTraceId()) {
          oprot.writeString(struct.traceId);
        }
        if (struct.isSetRequestId()) {
          oprot.writeString(struct.requestId);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceRequestFetch_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.traceId = iprot.readString();
          struct.setTraceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requestId = iprot.readString();
          struct.setRequestIdIsSet(true);
        }
      }
    }

  }

  public static class traceRequestFetch_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<traceRequestFetch_result, traceRequestFetch_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("traceRequestFetch_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)0);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new traceRequestFetch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new traceRequestFetch_resultTupleSchemeFactory());
    }

    public String success; // required
    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(traceRequestFetch_result.class, metaDataMap);
    }

    public traceRequestFetch_result() {
    }

    public traceRequestFetch_result(
      String success,
      BlurException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public traceRequestFetch_result(traceRequestFetch_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public traceRequestFetch_result deepCopy() {
      return new traceRequestFetch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public traceRequestFetch_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlurException getEx() {
      return this.ex;
    }

    public traceRequestFetch_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof traceRequestFetch_result)
        return this.equals((traceRequestFetch_result)that);
      return false;
    }

    public boolean equals(traceRequestFetch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(traceRequestFetch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      traceRequestFetch_result typedOther = (traceRequestFetch_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("traceRequestFetch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class traceRequestFetch_resultStandardSchemeFactory implements SchemeFactory {
      public traceRequestFetch_resultStandardScheme getScheme() {
        return new traceRequestFetch_resultStandardScheme();
      }
    }

    private static class traceRequestFetch_resultStandardScheme extends StandardScheme<traceRequestFetch_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, traceRequestFetch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, traceRequestFetch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class traceRequestFetch_resultTupleSchemeFactory implements SchemeFactory {
      public traceRequestFetch_resultTupleScheme getScheme() {
        return new traceRequestFetch_resultTupleScheme();
      }
    }

    private static class traceRequestFetch_resultTupleScheme extends TupleScheme<traceRequestFetch_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceRequestFetch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceRequestFetch_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class traceRemove_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<traceRemove_args, traceRemove_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("traceRemove_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("traceId", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new traceRemove_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new traceRemove_argsTupleSchemeFactory());
    }

    /**
     * the trace id.
     */
    public String traceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the trace id.
       */
      TRACE_ID((short)1, "traceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRACE_ID
            return TRACE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRACE_ID, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("traceId", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(traceRemove_args.class, metaDataMap);
    }

    public traceRemove_args() {
    }

    public traceRemove_args(
      String traceId)
    {
      this();
      this.traceId = traceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public traceRemove_args(traceRemove_args other) {
      if (other.isSetTraceId()) {
        this.traceId = other.traceId;
      }
    }

    public traceRemove_args deepCopy() {
      return new traceRemove_args(this);
    }

    @Override
    public void clear() {
      this.traceId = null;
    }

    /**
     * the trace id.
     */
    public String getTraceId() {
      return this.traceId;
    }

    /**
     * the trace id.
     */
    public traceRemove_args setTraceId(String traceId) {
      this.traceId = traceId;
      return this;
    }

    public void unsetTraceId() {
      this.traceId = null;
    }

    /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
    public boolean isSetTraceId() {
      return this.traceId != null;
    }

    public void setTraceIdIsSet(boolean value) {
      if (!value) {
        this.traceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRACE_ID:
        if (value == null) {
          unsetTraceId();
        } else {
          setTraceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRACE_ID:
        return getTraceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRACE_ID:
        return isSetTraceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof traceRemove_args)
        return this.equals((traceRemove_args)that);
      return false;
    }

    public boolean equals(traceRemove_args that) {
      if (that == null)
        return false;

      boolean this_present_traceId = true && this.isSetTraceId();
      boolean that_present_traceId = true && that.isSetTraceId();
      if (this_present_traceId || that_present_traceId) {
        if (!(this_present_traceId && that_present_traceId))
          return false;
        if (!this.traceId.equals(that.traceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(traceRemove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      traceRemove_args typedOther = (traceRemove_args)other;

      lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(typedOther.isSetTraceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTraceId()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.traceId, typedOther.traceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("traceRemove_args(");
      boolean first = true;

      sb.append("traceId:");
      if (this.traceId == null) {
        sb.append("null");
      } else {
        sb.append(this.traceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class traceRemove_argsStandardSchemeFactory implements SchemeFactory {
      public traceRemove_argsStandardScheme getScheme() {
        return new traceRemove_argsStandardScheme();
      }
    }

    private static class traceRemove_argsStandardScheme extends StandardScheme<traceRemove_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, traceRemove_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRACE_ID
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.traceId = iprot.readString();
                struct.setTraceIdIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, traceRemove_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.traceId != null) {
          oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
          oprot.writeString(struct.traceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class traceRemove_argsTupleSchemeFactory implements SchemeFactory {
      public traceRemove_argsTupleScheme getScheme() {
        return new traceRemove_argsTupleScheme();
      }
    }

    private static class traceRemove_argsTupleScheme extends TupleScheme<traceRemove_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceRemove_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTraceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTraceId()) {
          oprot.writeString(struct.traceId);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceRemove_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.traceId = iprot.readString();
          struct.setTraceIdIsSet(true);
        }
      }
    }

  }

  public static class traceRemove_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<traceRemove_result, traceRemove_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("traceRemove_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new traceRemove_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new traceRemove_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(traceRemove_result.class, metaDataMap);
    }

    public traceRemove_result() {
    }

    public traceRemove_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public traceRemove_result(traceRemove_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public traceRemove_result deepCopy() {
      return new traceRemove_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public traceRemove_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof traceRemove_result)
        return this.equals((traceRemove_result)that);
      return false;
    }

    public boolean equals(traceRemove_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(traceRemove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      traceRemove_result typedOther = (traceRemove_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("traceRemove_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class traceRemove_resultStandardSchemeFactory implements SchemeFactory {
      public traceRemove_resultStandardScheme getScheme() {
        return new traceRemove_resultStandardScheme();
      }
    }

    private static class traceRemove_resultStandardScheme extends StandardScheme<traceRemove_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, traceRemove_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, traceRemove_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class traceRemove_resultTupleSchemeFactory implements SchemeFactory {
      public traceRemove_resultTupleScheme getScheme() {
        return new traceRemove_resultTupleScheme();
      }
    }

    private static class traceRemove_resultTupleScheme extends TupleScheme<traceRemove_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceRemove_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, traceRemove_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class ping_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_args typedOther = (ping_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, ping_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, ping_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, ping_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, ping_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("ping_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_result typedOther = (ping_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, ping_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, ping_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, ping_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, ping_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class logging_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<logging_args, logging_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("logging_args");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField CLASS_NAME_OR_LOGGER_NAME_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("classNameOrLoggerName", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField LEVEL_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("level", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new logging_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new logging_argsTupleSchemeFactory());
    }

    /**
     * the className or Logger Name of the Logger to be changed.
     */
    public String classNameOrLoggerName; // required
    /**
     * the logging level.
     * 
     * @see Level
     */
    public Level level; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      /**
       * the className or Logger Name of the Logger to be changed.
       */
      CLASS_NAME_OR_LOGGER_NAME((short)1, "classNameOrLoggerName"),
      /**
       * the logging level.
       * 
       * @see Level
       */
      LEVEL((short)2, "level");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLASS_NAME_OR_LOGGER_NAME
            return CLASS_NAME_OR_LOGGER_NAME;
          case 2: // LEVEL
            return LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLASS_NAME_OR_LOGGER_NAME, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("classNameOrLoggerName", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      tmpMap.put(_Fields.LEVEL, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("level", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.EnumMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.ENUM, Level.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(logging_args.class, metaDataMap);
    }

    public logging_args() {
    }

    public logging_args(
      String classNameOrLoggerName,
      Level level)
    {
      this();
      this.classNameOrLoggerName = classNameOrLoggerName;
      this.level = level;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logging_args(logging_args other) {
      if (other.isSetClassNameOrLoggerName()) {
        this.classNameOrLoggerName = other.classNameOrLoggerName;
      }
      if (other.isSetLevel()) {
        this.level = other.level;
      }
    }

    public logging_args deepCopy() {
      return new logging_args(this);
    }

    @Override
    public void clear() {
      this.classNameOrLoggerName = null;
      this.level = null;
    }

    /**
     * the className or Logger Name of the Logger to be changed.
     */
    public String getClassNameOrLoggerName() {
      return this.classNameOrLoggerName;
    }

    /**
     * the className or Logger Name of the Logger to be changed.
     */
    public logging_args setClassNameOrLoggerName(String classNameOrLoggerName) {
      this.classNameOrLoggerName = classNameOrLoggerName;
      return this;
    }

    public void unsetClassNameOrLoggerName() {
      this.classNameOrLoggerName = null;
    }

    /** Returns true if field classNameOrLoggerName is set (has been assigned a value) and false otherwise */
    public boolean isSetClassNameOrLoggerName() {
      return this.classNameOrLoggerName != null;
    }

    public void setClassNameOrLoggerNameIsSet(boolean value) {
      if (!value) {
        this.classNameOrLoggerName = null;
      }
    }

    /**
     * the logging level.
     * 
     * @see Level
     */
    public Level getLevel() {
      return this.level;
    }

    /**
     * the logging level.
     * 
     * @see Level
     */
    public logging_args setLevel(Level level) {
      this.level = level;
      return this;
    }

    public void unsetLevel() {
      this.level = null;
    }

    /** Returns true if field level is set (has been assigned a value) and false otherwise */
    public boolean isSetLevel() {
      return this.level != null;
    }

    public void setLevelIsSet(boolean value) {
      if (!value) {
        this.level = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLASS_NAME_OR_LOGGER_NAME:
        if (value == null) {
          unsetClassNameOrLoggerName();
        } else {
          setClassNameOrLoggerName((String)value);
        }
        break;

      case LEVEL:
        if (value == null) {
          unsetLevel();
        } else {
          setLevel((Level)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLASS_NAME_OR_LOGGER_NAME:
        return getClassNameOrLoggerName();

      case LEVEL:
        return getLevel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLASS_NAME_OR_LOGGER_NAME:
        return isSetClassNameOrLoggerName();
      case LEVEL:
        return isSetLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logging_args)
        return this.equals((logging_args)that);
      return false;
    }

    public boolean equals(logging_args that) {
      if (that == null)
        return false;

      boolean this_present_classNameOrLoggerName = true && this.isSetClassNameOrLoggerName();
      boolean that_present_classNameOrLoggerName = true && that.isSetClassNameOrLoggerName();
      if (this_present_classNameOrLoggerName || that_present_classNameOrLoggerName) {
        if (!(this_present_classNameOrLoggerName && that_present_classNameOrLoggerName))
          return false;
        if (!this.classNameOrLoggerName.equals(that.classNameOrLoggerName))
          return false;
      }

      boolean this_present_level = true && this.isSetLevel();
      boolean that_present_level = true && that.isSetLevel();
      if (this_present_level || that_present_level) {
        if (!(this_present_level && that_present_level))
          return false;
        if (!this.level.equals(that.level))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(logging_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      logging_args typedOther = (logging_args)other;

      lastComparison = Boolean.valueOf(isSetClassNameOrLoggerName()).compareTo(typedOther.isSetClassNameOrLoggerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassNameOrLoggerName()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.classNameOrLoggerName, typedOther.classNameOrLoggerName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLevel()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.level, typedOther.level);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logging_args(");
      boolean first = true;

      sb.append("classNameOrLoggerName:");
      if (this.classNameOrLoggerName == null) {
        sb.append("null");
      } else {
        sb.append(this.classNameOrLoggerName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("level:");
      if (this.level == null) {
        sb.append("null");
      } else {
        sb.append(this.level);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logging_argsStandardSchemeFactory implements SchemeFactory {
      public logging_argsStandardScheme getScheme() {
        return new logging_argsStandardScheme();
      }
    }

    private static class logging_argsStandardScheme extends StandardScheme<logging_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, logging_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLASS_NAME_OR_LOGGER_NAME
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.classNameOrLoggerName = iprot.readString();
                struct.setClassNameOrLoggerNameIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LEVEL
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32) {
                struct.level = Level.findByValue(iprot.readI32());
                struct.setLevelIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, logging_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.classNameOrLoggerName != null) {
          oprot.writeFieldBegin(CLASS_NAME_OR_LOGGER_NAME_FIELD_DESC);
          oprot.writeString(struct.classNameOrLoggerName);
          oprot.writeFieldEnd();
        }
        if (struct.level != null) {
          oprot.writeFieldBegin(LEVEL_FIELD_DESC);
          oprot.writeI32(struct.level.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logging_argsTupleSchemeFactory implements SchemeFactory {
      public logging_argsTupleScheme getScheme() {
        return new logging_argsTupleScheme();
      }
    }

    private static class logging_argsTupleScheme extends TupleScheme<logging_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, logging_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClassNameOrLoggerName()) {
          optionals.set(0);
        }
        if (struct.isSetLevel()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClassNameOrLoggerName()) {
          oprot.writeString(struct.classNameOrLoggerName);
        }
        if (struct.isSetLevel()) {
          oprot.writeI32(struct.level.getValue());
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, logging_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.classNameOrLoggerName = iprot.readString();
          struct.setClassNameOrLoggerNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.level = Level.findByValue(iprot.readI32());
          struct.setLevelIsSet(true);
        }
      }
    }

  }

  public static class logging_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<logging_result, logging_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("logging_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new logging_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new logging_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(logging_result.class, metaDataMap);
    }

    public logging_result() {
    }

    public logging_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logging_result(logging_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public logging_result deepCopy() {
      return new logging_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public logging_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logging_result)
        return this.equals((logging_result)that);
      return false;
    }

    public boolean equals(logging_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(logging_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      logging_result typedOther = (logging_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logging_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logging_resultStandardSchemeFactory implements SchemeFactory {
      public logging_resultStandardScheme getScheme() {
        return new logging_resultStandardScheme();
      }
    }

    private static class logging_resultStandardScheme extends StandardScheme<logging_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, logging_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, logging_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logging_resultTupleSchemeFactory implements SchemeFactory {
      public logging_resultTupleScheme getScheme() {
        return new logging_resultTupleScheme();
      }
    }

    private static class logging_resultTupleScheme extends TupleScheme<logging_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, logging_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, logging_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class resetLogging_args implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<resetLogging_args, resetLogging_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("resetLogging_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetLogging_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetLogging_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(resetLogging_args.class, metaDataMap);
    }

    public resetLogging_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetLogging_args(resetLogging_args other) {
    }

    public resetLogging_args deepCopy() {
      return new resetLogging_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetLogging_args)
        return this.equals((resetLogging_args)that);
      return false;
    }

    public boolean equals(resetLogging_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(resetLogging_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      resetLogging_args typedOther = (resetLogging_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetLogging_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resetLogging_argsStandardSchemeFactory implements SchemeFactory {
      public resetLogging_argsStandardScheme getScheme() {
        return new resetLogging_argsStandardScheme();
      }
    }

    private static class resetLogging_argsStandardScheme extends StandardScheme<resetLogging_args> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, resetLogging_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, resetLogging_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetLogging_argsTupleSchemeFactory implements SchemeFactory {
      public resetLogging_argsTupleScheme getScheme() {
        return new resetLogging_argsTupleScheme();
      }
    }

    private static class resetLogging_argsTupleScheme extends TupleScheme<resetLogging_args> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, resetLogging_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, resetLogging_args struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class resetLogging_result implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<resetLogging_result, resetLogging_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("resetLogging_result");

    private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetLogging_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetLogging_resultTupleSchemeFactory());
    }

    public BlurException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(resetLogging_result.class, metaDataMap);
    }

    public resetLogging_result() {
    }

    public resetLogging_result(
      BlurException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetLogging_result(resetLogging_result other) {
      if (other.isSetEx()) {
        this.ex = new BlurException(other.ex);
      }
    }

    public resetLogging_result deepCopy() {
      return new resetLogging_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BlurException getEx() {
      return this.ex;
    }

    public resetLogging_result setEx(BlurException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BlurException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetLogging_result)
        return this.equals((resetLogging_result)that);
      return false;
    }

    public boolean equals(resetLogging_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(resetLogging_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      resetLogging_result typedOther = (resetLogging_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetLogging_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resetLogging_resultStandardSchemeFactory implements SchemeFactory {
      public resetLogging_resultStandardScheme getScheme() {
        return new resetLogging_resultStandardScheme();
      }
    }

    private static class resetLogging_resultStandardScheme extends StandardScheme<resetLogging_result> {

      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, resetLogging_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new BlurException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, resetLogging_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetLogging_resultTupleSchemeFactory implements SchemeFactory {
      public resetLogging_resultTupleScheme getScheme() {
        return new resetLogging_resultTupleScheme();
      }
    }

    private static class resetLogging_resultTupleScheme extends TupleScheme<resetLogging_result> {

      @Override
      public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, resetLogging_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, resetLogging_result struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BlurException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
