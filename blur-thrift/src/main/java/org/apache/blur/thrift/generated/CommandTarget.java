/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.blur.thrift.generated;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import org.apache.blur.thirdparty.thrift_0_9_0.scheme.IScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.SchemeFactory;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.StandardScheme;

import org.apache.blur.thirdparty.thrift_0_9_0.scheme.TupleScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TTupleProtocol;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolException;
import org.apache.blur.thirdparty.thrift_0_9_0.EncodingUtils;
import org.apache.blur.thirdparty.thrift_0_9_0.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

public class CommandTarget implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<CommandTarget, CommandTarget._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("CommandTarget");

  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLES_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("tables", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.SET, (short)1);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SHARDS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("shards", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.SET, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommandTargetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommandTargetTupleSchemeFactory());
  }

  public Set<String> tables; // required
  public Set<String> shards; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
    TABLES((short)1, "tables"),
    SHARDS((short)2, "shards");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLES
          return TABLES;
        case 2: // SHARDS
          return SHARDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLES, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("tables", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.SetMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.SET, 
            new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
    tmpMap.put(_Fields.SHARDS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("shards", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.SetMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.SET, 
            new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(CommandTarget.class, metaDataMap);
  }

  public CommandTarget() {
  }

  public CommandTarget(
    Set<String> tables,
    Set<String> shards)
  {
    this();
    this.tables = tables;
    this.shards = shards;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommandTarget(CommandTarget other) {
    if (other.isSetTables()) {
      Set<String> __this__tables = new HashSet<String>();
      for (String other_element : other.tables) {
        __this__tables.add(other_element);
      }
      this.tables = __this__tables;
    }
    if (other.isSetShards()) {
      Set<String> __this__shards = new HashSet<String>();
      for (String other_element : other.shards) {
        __this__shards.add(other_element);
      }
      this.shards = __this__shards;
    }
  }

  public CommandTarget deepCopy() {
    return new CommandTarget(this);
  }

  @Override
  public void clear() {
    this.tables = null;
    this.shards = null;
  }

  public int getTablesSize() {
    return (this.tables == null) ? 0 : this.tables.size();
  }

  public java.util.Iterator<String> getTablesIterator() {
    return (this.tables == null) ? null : this.tables.iterator();
  }

  public void addToTables(String elem) {
    if (this.tables == null) {
      this.tables = new HashSet<String>();
    }
    this.tables.add(elem);
  }

  public Set<String> getTables() {
    return this.tables;
  }

  public CommandTarget setTables(Set<String> tables) {
    this.tables = tables;
    return this;
  }

  public void unsetTables() {
    this.tables = null;
  }

  /** Returns true if field tables is set (has been assigned a value) and false otherwise */
  public boolean isSetTables() {
    return this.tables != null;
  }

  public void setTablesIsSet(boolean value) {
    if (!value) {
      this.tables = null;
    }
  }

  public int getShardsSize() {
    return (this.shards == null) ? 0 : this.shards.size();
  }

  public java.util.Iterator<String> getShardsIterator() {
    return (this.shards == null) ? null : this.shards.iterator();
  }

  public void addToShards(String elem) {
    if (this.shards == null) {
      this.shards = new HashSet<String>();
    }
    this.shards.add(elem);
  }

  public Set<String> getShards() {
    return this.shards;
  }

  public CommandTarget setShards(Set<String> shards) {
    this.shards = shards;
    return this;
  }

  public void unsetShards() {
    this.shards = null;
  }

  /** Returns true if field shards is set (has been assigned a value) and false otherwise */
  public boolean isSetShards() {
    return this.shards != null;
  }

  public void setShardsIsSet(boolean value) {
    if (!value) {
      this.shards = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLES:
      if (value == null) {
        unsetTables();
      } else {
        setTables((Set<String>)value);
      }
      break;

    case SHARDS:
      if (value == null) {
        unsetShards();
      } else {
        setShards((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLES:
      return getTables();

    case SHARDS:
      return getShards();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLES:
      return isSetTables();
    case SHARDS:
      return isSetShards();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommandTarget)
      return this.equals((CommandTarget)that);
    return false;
  }

  public boolean equals(CommandTarget that) {
    if (that == null)
      return false;

    boolean this_present_tables = true && this.isSetTables();
    boolean that_present_tables = true && that.isSetTables();
    if (this_present_tables || that_present_tables) {
      if (!(this_present_tables && that_present_tables))
        return false;
      if (!this.tables.equals(that.tables))
        return false;
    }

    boolean this_present_shards = true && this.isSetShards();
    boolean that_present_shards = true && that.isSetShards();
    if (this_present_shards || that_present_shards) {
      if (!(this_present_shards && that_present_shards))
        return false;
      if (!this.shards.equals(that.shards))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CommandTarget other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CommandTarget typedOther = (CommandTarget)other;

    lastComparison = Boolean.valueOf(isSetTables()).compareTo(typedOther.isSetTables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.tables, typedOther.tables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShards()).compareTo(typedOther.isSetShards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShards()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.shards, typedOther.shards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommandTarget(");
    boolean first = true;

    sb.append("tables:");
    if (this.tables == null) {
      sb.append("null");
    } else {
      sb.append(this.tables);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shards:");
    if (this.shards == null) {
      sb.append("null");
    } else {
      sb.append(this.shards);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommandTargetStandardSchemeFactory implements SchemeFactory {
    public CommandTargetStandardScheme getScheme() {
      return new CommandTargetStandardScheme();
    }
  }

  private static class CommandTargetStandardScheme extends StandardScheme<CommandTarget> {

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, CommandTarget struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLES
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.SET) {
              {
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet _set290 = iprot.readSetBegin();
                struct.tables = new HashSet<String>(2*_set290.size);
                for (int _i291 = 0; _i291 < _set290.size; ++_i291)
                {
                  String _elem292; // required
                  _elem292 = iprot.readString();
                  struct.tables.add(_elem292);
                }
                iprot.readSetEnd();
              }
              struct.setTablesIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHARDS
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.SET) {
              {
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet _set293 = iprot.readSetBegin();
                struct.shards = new HashSet<String>(2*_set293.size);
                for (int _i294 = 0; _i294 < _set293.size; ++_i294)
                {
                  String _elem295; // required
                  _elem295 = iprot.readString();
                  struct.shards.add(_elem295);
                }
                iprot.readSetEnd();
              }
              struct.setShardsIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, CommandTarget struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tables != null) {
        oprot.writeFieldBegin(TABLES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.tables.size()));
          for (String _iter296 : struct.tables)
          {
            oprot.writeString(_iter296);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.shards != null) {
        oprot.writeFieldBegin(SHARDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.shards.size()));
          for (String _iter297 : struct.shards)
          {
            oprot.writeString(_iter297);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommandTargetTupleSchemeFactory implements SchemeFactory {
    public CommandTargetTupleScheme getScheme() {
      return new CommandTargetTupleScheme();
    }
  }

  private static class CommandTargetTupleScheme extends TupleScheme<CommandTarget> {

    @Override
    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, CommandTarget struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTables()) {
        optionals.set(0);
      }
      if (struct.isSetShards()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTables()) {
        {
          oprot.writeI32(struct.tables.size());
          for (String _iter298 : struct.tables)
          {
            oprot.writeString(_iter298);
          }
        }
      }
      if (struct.isSetShards()) {
        {
          oprot.writeI32(struct.shards.size());
          for (String _iter299 : struct.shards)
          {
            oprot.writeString(_iter299);
          }
        }
      }
    }

    @Override
    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, CommandTarget struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet _set300 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
          struct.tables = new HashSet<String>(2*_set300.size);
          for (int _i301 = 0; _i301 < _set300.size; ++_i301)
          {
            String _elem302; // required
            _elem302 = iprot.readString();
            struct.tables.add(_elem302);
          }
        }
        struct.setTablesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet _set303 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
          struct.shards = new HashSet<String>(2*_set303.size);
          for (int _i304 = 0; _i304 < _set303.size; ++_i304)
          {
            String _elem305; // required
            _elem305 = iprot.readString();
            struct.shards.add(_elem305);
          }
        }
        struct.setShardsIsSet(true);
      }
    }
  }

}

