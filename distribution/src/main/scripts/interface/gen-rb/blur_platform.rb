#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'blur_types'

module Blur
  module BlurPlatform
    class Client
      include ::Thrift::Client

      def execute(request)
        send_execute(request)
        return recv_execute()
      end

      def send_execute(request)
        send_message('execute', Execute_args, :request => request)
      end

      def recv_execute()
        result = receive_message(Execute_result)
        return result.success unless result.success.nil?
        raise result.ex unless result.ex.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'execute failed: unknown result')
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_execute(seqid, iprot, oprot)
        args = read_args(iprot, Execute_args)
        result = Execute_result.new()
        begin
          result.success = @handler.execute(args.request)
        rescue ::Blur::BlurException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'execute', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class Execute_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      REQUEST = 1

      FIELDS = {
        REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::Blur::BlurCommandRequest}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Execute_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      EX = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Blur::BlurCommandResponse},
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::Blur::BlurException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
