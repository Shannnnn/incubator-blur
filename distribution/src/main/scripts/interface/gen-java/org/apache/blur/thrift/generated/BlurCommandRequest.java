/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.blur.thrift.generated;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import org.apache.blur.thirdparty.thrift_0_9_0.scheme.IScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.SchemeFactory;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.StandardScheme;

import org.apache.blur.thirdparty.thrift_0_9_0.scheme.TupleScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TTupleProtocol;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolException;
import org.apache.blur.thirdparty.thrift_0_9_0.EncodingUtils;
import org.apache.blur.thirdparty.thrift_0_9_0.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

public class BlurCommandRequest extends org.apache.blur.thirdparty.thrift_0_9_0.TUnion<BlurCommandRequest, BlurCommandRequest._Fields> {
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("BlurCommandRequest");
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLES_TO_INVOKE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("tablesToInvoke", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.SET, (short)1);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField ADHOC_BYTE_CODE_COMMAND_REQUEST_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("adhocByteCodeCommandRequest", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)2);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
    TABLES_TO_INVOKE((short)1, "tablesToInvoke"),
    ADHOC_BYTE_CODE_COMMAND_REQUEST((short)2, "adhocByteCodeCommandRequest");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLES_TO_INVOKE
          return TABLES_TO_INVOKE;
        case 2: // ADHOC_BYTE_CODE_COMMAND_REQUEST
          return ADHOC_BYTE_CODE_COMMAND_REQUEST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLES_TO_INVOKE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("tablesToInvoke", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.SetMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.SET, 
            new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
    tmpMap.put(_Fields.ADHOC_BYTE_CODE_COMMAND_REQUEST, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("adhocByteCodeCommandRequest", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, AdhocByteCodeCommandRequest.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(BlurCommandRequest.class, metaDataMap);
  }

  public BlurCommandRequest() {
    super();
  }

  public BlurCommandRequest(_Fields setField, Object value) {
    super(setField, value);
  }

  public BlurCommandRequest(BlurCommandRequest other) {
    super(other);
  }
  public BlurCommandRequest deepCopy() {
    return new BlurCommandRequest(this);
  }

  public static BlurCommandRequest tablesToInvoke(Set<String> value) {
    BlurCommandRequest x = new BlurCommandRequest();
    x.setTablesToInvoke(value);
    return x;
  }

  public static BlurCommandRequest adhocByteCodeCommandRequest(AdhocByteCodeCommandRequest value) {
    BlurCommandRequest x = new BlurCommandRequest();
    x.setAdhocByteCodeCommandRequest(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case TABLES_TO_INVOKE:
        if (value instanceof Set) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Set<String> for field 'tablesToInvoke', but got " + value.getClass().getSimpleName());
      case ADHOC_BYTE_CODE_COMMAND_REQUEST:
        if (value instanceof AdhocByteCodeCommandRequest) {
          break;
        }
        throw new ClassCastException("Was expecting value of type AdhocByteCodeCommandRequest for field 'adhocByteCodeCommandRequest', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField field) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case TABLES_TO_INVOKE:
          if (field.type == TABLES_TO_INVOKE_FIELD_DESC.type) {
            Set<String> tablesToInvoke;
            {
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet _set258 = iprot.readSetBegin();
              tablesToInvoke = new HashSet<String>(2*_set258.size);
              for (int _i259 = 0; _i259 < _set258.size; ++_i259)
              {
                String _elem260; // required
                _elem260 = iprot.readString();
                tablesToInvoke.add(_elem260);
              }
              iprot.readSetEnd();
            }
            return tablesToInvoke;
          } else {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADHOC_BYTE_CODE_COMMAND_REQUEST:
          if (field.type == ADHOC_BYTE_CODE_COMMAND_REQUEST_FIELD_DESC.type) {
            AdhocByteCodeCommandRequest adhocByteCodeCommandRequest;
            adhocByteCodeCommandRequest = new AdhocByteCodeCommandRequest();
            adhocByteCodeCommandRequest.read(iprot);
            return adhocByteCodeCommandRequest;
          } else {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    switch (setField_) {
      case TABLES_TO_INVOKE:
        Set<String> tablesToInvoke = (Set<String>)value_;
        {
          oprot.writeSetBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, tablesToInvoke.size()));
          for (String _iter261 : tablesToInvoke)
          {
            oprot.writeString(_iter261);
          }
          oprot.writeSetEnd();
        }
        return;
      case ADHOC_BYTE_CODE_COMMAND_REQUEST:
        AdhocByteCodeCommandRequest adhocByteCodeCommandRequest = (AdhocByteCodeCommandRequest)value_;
        adhocByteCodeCommandRequest.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, short fieldID) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case TABLES_TO_INVOKE:
          Set<String> tablesToInvoke;
          {
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet _set262 = iprot.readSetBegin();
            tablesToInvoke = new HashSet<String>(2*_set262.size);
            for (int _i263 = 0; _i263 < _set262.size; ++_i263)
            {
              String _elem264; // required
              _elem264 = iprot.readString();
              tablesToInvoke.add(_elem264);
            }
            iprot.readSetEnd();
          }
          return tablesToInvoke;
        case ADHOC_BYTE_CODE_COMMAND_REQUEST:
          AdhocByteCodeCommandRequest adhocByteCodeCommandRequest;
          adhocByteCodeCommandRequest = new AdhocByteCodeCommandRequest();
          adhocByteCodeCommandRequest.read(iprot);
          return adhocByteCodeCommandRequest;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    switch (setField_) {
      case TABLES_TO_INVOKE:
        Set<String> tablesToInvoke = (Set<String>)value_;
        {
          oprot.writeSetBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TSet(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, tablesToInvoke.size()));
          for (String _iter265 : tablesToInvoke)
          {
            oprot.writeString(_iter265);
          }
          oprot.writeSetEnd();
        }
        return;
      case ADHOC_BYTE_CODE_COMMAND_REQUEST:
        AdhocByteCodeCommandRequest adhocByteCodeCommandRequest = (AdhocByteCodeCommandRequest)value_;
        adhocByteCodeCommandRequest.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case TABLES_TO_INVOKE:
        return TABLES_TO_INVOKE_FIELD_DESC;
      case ADHOC_BYTE_CODE_COMMAND_REQUEST:
        return ADHOC_BYTE_CODE_COMMAND_REQUEST_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public Set<String> getTablesToInvoke() {
    if (getSetField() == _Fields.TABLES_TO_INVOKE) {
      return (Set<String>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'tablesToInvoke' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTablesToInvoke(Set<String> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TABLES_TO_INVOKE;
    value_ = value;
  }

  public AdhocByteCodeCommandRequest getAdhocByteCodeCommandRequest() {
    if (getSetField() == _Fields.ADHOC_BYTE_CODE_COMMAND_REQUEST) {
      return (AdhocByteCodeCommandRequest)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'adhocByteCodeCommandRequest' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAdhocByteCodeCommandRequest(AdhocByteCodeCommandRequest value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADHOC_BYTE_CODE_COMMAND_REQUEST;
    value_ = value;
  }

  public boolean isSetTablesToInvoke() {
    return setField_ == _Fields.TABLES_TO_INVOKE;
  }


  public boolean isSetAdhocByteCodeCommandRequest() {
    return setField_ == _Fields.ADHOC_BYTE_CODE_COMMAND_REQUEST;
  }


  public boolean equals(Object other) {
    if (other instanceof BlurCommandRequest) {
      return equals((BlurCommandRequest)other);
    } else {
      return false;
    }
  }

  public boolean equals(BlurCommandRequest other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(BlurCommandRequest other) {
    int lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  /**
   * If you'd like this to perform more respectably, use the hashcode generator option.
   */
  @Override
  public int hashCode() {
    return 0;
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
